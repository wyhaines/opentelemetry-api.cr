crystal_doc_search_index_callback({"repository_name":"opentelemetry-api","body":"![OpenTelemetry CI](https://img.shields.io/github/workflow/status/wyhaines/opentelemetry-api.cr/OpenTelemetry%20CI?style=for-the-badge&logo=GitHub)\n[![GitHub release](https://img.shields.io/github/release/wyhaines/opentelemetry-api.cr.svg?style=for-the-badge)](https://github.com/wyhaines/opentelemetry-api.cr/releases)\n![GitHub commits since latest release (by SemVer)](https://img.shields.io/github/commits-since/wyhaines/opentelemetry-api.cr/latest?style=for-the-badge)\n\n# OpenTelemetry-API\n\nThis library provides the base functionality for implementing services that utilize\nOpenTelemetry to send or receive metrics, traces, and logs. This library is intended to be focused specifically on OpenTelemetry itself, with most higher level functionality implemented by other libraries which use this library.\n\nAs a general rule, naming conventions have been based on the standard glossary of OpenTelementry terms, as found at [https://opentelemetry.io/docs/concepts/glossary/](https://opentelemetry.io/docs/concepts/glossary/)\n\nThe general architecture of the implementation is guided by this document:\n\n[https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md)\n\nThe TL;DR is that a `TraceProvider` is used to create a `Tracer`. A `Span` is created inside of the context of a `Tracer`, and one `Span` may nest inside of another.\n\n## Full Generated Documentation\n\n[https://wyhaines.github.io/opentelemetry-api.cr/](https://wyhaines.github.io/opentelemetry-api.cr/)\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     otel:\n       github: wyhaines/opentelemetry-api.cr\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"opentelemetry-api\"\n```\n\n## Global Tracer Provider\n-----\n\n```crystal\nOpenTelemetry.configure do |config|\n  config.service_name = \"my_app_or_library\"\n  config.service_version = \"1.1.1\"\n  config.exporter = OpenTelemetry::IOExporter.new(:STDOUT)\nend\n```\n\n```crystal\ntracer = OpenTelemetry.tracer_provider(\"my_app_or_library\", \"1.1.1\")\ntracer = OpenTelemetry.tracer_provider do |tracer|\n  tracer.service_name = \"my_app_or_library\"\n  tracer.service_version = \"1.1.1\"\nend\n```\n\n## Tracer Providers as Objects With Unique Configuration\n-----\n\n```crystal\nprovider_a = OpenTelemetry::TracerProvider.new(\"my_app_or_library\", \"1.1.1\")\nprovider_a.exporter = OpenTelemetry::IOExporter.new(:STDOUT)\n```\n\n```crystal\nprovider_b = OpenTelementry::TracerProvider.new do |config|\n  config.service_name = \"my_app_or_library\"\n  config.service_version = \"1.1.1\"\n  config.exporter = OpenTelemetry::IOExporter.new(:STDOUT)\nend\n```\n\n## Getting a Tracer From a Provider Object\n-----\n\n```crystal\ntracer = provider_a.tracer # Inherit all configuration from the Provider Object\n```\n\n```crystal\ntracer = provider_a.tracer(\"microservice foo\", \"1.2.3\") # Override the configuration\n```\n\n```crystal\ntracer = provider_a.tracer do |tracer|\n  tracer.service_name = \"microservice foo\"\n  tracer.service_version = \"1.2.3\"\nend\n```\n\n## Creating Spans Using a Tracer\n-----\n\n```crystal\ntracer.in_span(\"request\") do |span|\n  span.set_attribute(\"verb\", \"GET\")\n  span.set_attribute(\"url\", \"http://example.com/foo\")\n  span.add_event(\"dispatching to handler\")\n  tracer.in_span(\"handler\") do |child_span|\n    child_span.add_event(\"handling request\")\n    tracer.in_span(\"db\") do |child_span|\n      child_span.add_event(\"querying database\")\n    end\n  end\nend\n```\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/your-github-user/otel/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Kirk Haines](https://github.com/wyhaines) - creator and maintainer\n\n![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/wyhaines/opentelemetry-api.cr?style=for-the-badge)\n![GitHub issues](https://img.shields.io/github/issues/wyhaines/opentelemetry-api.cr?style=for-the-badge)\n","program":{"html_id":"opentelemetry-api/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"opentelemetry-api","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"opentelemetry-api/Exception","path":"Exception.html","kind":"class","full_name":"Exception","name":"Exception","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ext/exception.cr","line_number":1,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"opentelemetry-api/OpenTelemetry/Meter/DuplicateInstrumentError","kind":"class","full_name":"OpenTelemetry::Meter::DuplicateInstrumentError","name":"DuplicateInstrumentError"},{"html_id":"opentelemetry-api/OpenTelemetry/Meter/InstrumentNameError","kind":"class","full_name":"OpenTelemetry::Meter::InstrumentNameError","name":"InstrumentNameError"},{"html_id":"opentelemetry-api/OpenTelemetry/Meter/InstrumentUnitError","kind":"class","full_name":"OpenTelemetry::Meter::InstrumentUnitError","name":"InstrumentUnitError"},{"html_id":"opentelemetry-api/OpenTelemetry/Trace/InvalidSpanInSpanStackError","kind":"class","full_name":"OpenTelemetry::Trace::InvalidSpanInSpanStackError","name":"InvalidSpanInSpanStackError"}],"doc":"Represents errors that occur during application execution.\n\nException and its descendants are used to communicate between raise and\nrescue statements in `begin ... end` blocks.\nException objects carry information about the exception – its type (the\nexception’s class name), an optional descriptive string, and\noptional traceback information.\nException subclasses may add additional information.","summary":"<p>Represents errors that occur during application execution.</p>","instance_methods":[{"html_id":"span_status_message_set:Bool-instance-method","name":"span_status_message_set","doc":"This adds a flag to an exception, so that underlying code can\neasily know if this exception has been set in a span status.\nOtherwise handlers may repeatedly set a whole chain of spans\nto error state as an exception bubbles up through the span stack.","summary":"<p>This adds a flag to an exception, so that underlying code can easily know if this exception has been set in a span status.</p>","abstract":false,"location":{"filename":"src/ext/exception.cr","line_number":6,"url":null},"def":{"name":"span_status_message_set","return_type":"Bool","visibility":"Public","body":"@span_status_message_set"}},{"html_id":"span_status_message_set=(span_status_message_set:Bool)-instance-method","name":"span_status_message_set=","doc":"This adds a flag to an exception, so that underlying code can\neasily know if this exception has been set in a span status.\nOtherwise handlers may repeatedly set a whole chain of spans\nto error state as an exception bubbles up through the span stack.","summary":"<p>This adds a flag to an exception, so that underlying code can easily know if this exception has been set in a span status.</p>","abstract":false,"args":[{"name":"span_status_message_set","external_name":"span_status_message_set","restriction":"Bool"}],"args_string":"(span_status_message_set : Bool)","args_html":"(span_status_message_set : Bool)","location":{"filename":"src/ext/exception.cr","line_number":6,"url":null},"def":{"name":"span_status_message_set=","args":[{"name":"span_status_message_set","external_name":"span_status_message_set","restriction":"Bool"}],"visibility":"Public","body":"@span_status_message_set = span_status_message_set"}}]},{"html_id":"opentelemetry-api/Fiber","path":"Fiber.html","kind":"class","full_name":"Fiber","name":"Fiber","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ext/fiber.cr","line_number":1,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"doc":"A `Fiber` is a light-weight execution unit managed by the Crystal runtime.\n\nIt is conceptually similar to an operating system thread but with less\noverhead and completely internal to the Crystal process. The runtime includes\na scheduler which schedules execution of fibers.\n\nA `Fiber` has a stack size of `8 MiB` which is usually also assigned\nto an operating system thread. But only `4KiB` are actually allocated at first\nso the memory footprint is very small.\n\nCommunication between fibers is usually passed through `Channel`.\n\n## Cooperative\n\nFibers are cooperative. That means execution can only be drawn from a fiber\nwhen it offers it. It can't be interrupted in its execution at random.\nIn order to make concurrency work, fibers must make sure to occasionally\nprovide hooks for the scheduler to swap in other fibers.\nIO operations like reading from a file descriptor are natural implementations\nfor this and the developer does not need to take further action on that. When\nIO access can't be served immediately by a buffer, the fiber will\nautomatically wait and yield execution. When IO is ready it's going to be\nresumed through the event loop.\n\nWhen a computation-intensive task has none or only rare IO operations, a fiber\nshould explicitly offer to yield execution from time to time using\n`Fiber.yield` to break up tight loops. The frequency of this call depends on\nthe application and concurrency model.\n\n## Event loop\n\nThe event loop is responsible for keeping track of sleeping fibers waiting for\nnotifications that IO is ready or a timeout reached. When a fiber can be woken,\nthe event loop enqueues it in the scheduler","summary":"<p>A <code><a href=\"Fiber.html\">Fiber</a></code> is a light-weight execution unit managed by the Crystal runtime.</p>","instance_methods":[{"html_id":"<=>(val)-instance-method","name":"<=>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/ext/fiber.cr","line_number":5,"url":null},"def":{"name":"<=>","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"self.object_id <=> val.object_id"}},{"html_id":"current_span:OpenTelemetry::Span?-instance-method","name":"current_span","abstract":false,"location":{"filename":"src/ext/fiber.cr","line_number":2,"url":null},"def":{"name":"current_span","return_type":"OpenTelemetry::Span | ::Nil","visibility":"Public","body":"@current_span"}},{"html_id":"current_span=(current_span:OpenTelemetry::Span?)-instance-method","name":"current_span=","abstract":false,"args":[{"name":"current_span","external_name":"current_span","restriction":"OpenTelemetry::Span | ::Nil"}],"args_string":"(current_span : OpenTelemetry::Span?)","args_html":"(current_span : <a href=\"OpenTelemetry/Span.html\">OpenTelemetry::Span</a>?)","location":{"filename":"src/ext/fiber.cr","line_number":2,"url":null},"def":{"name":"current_span=","args":[{"name":"current_span","external_name":"current_span","restriction":"OpenTelemetry::Span | ::Nil"}],"visibility":"Public","body":"@current_span = current_span"}},{"html_id":"current_trace:OpenTelemetry::Trace?-instance-method","name":"current_trace","abstract":false,"location":{"filename":"src/ext/fiber.cr","line_number":3,"url":null},"def":{"name":"current_trace","return_type":"OpenTelemetry::Trace | ::Nil","visibility":"Public","body":"@current_trace"}},{"html_id":"current_trace=(current_trace:OpenTelemetry::Trace?)-instance-method","name":"current_trace=","abstract":false,"args":[{"name":"current_trace","external_name":"current_trace","restriction":"OpenTelemetry::Trace | ::Nil"}],"args_string":"(current_trace : OpenTelemetry::Trace?)","args_html":"(current_trace : <a href=\"OpenTelemetry/Trace.html\">OpenTelemetry::Trace</a>?)","location":{"filename":"src/ext/fiber.cr","line_number":3,"url":null},"def":{"name":"current_trace=","args":[{"name":"current_trace","external_name":"current_trace","restriction":"OpenTelemetry::Trace | ::Nil"}],"visibility":"Public","body":"@current_trace = current_trace"}}]},{"html_id":"opentelemetry-api/HTTP","path":"HTTP.html","kind":"module","full_name":"HTTP","name":"HTTP","abstract":false,"locations":[{"filename":"src/exporters/http.cr","line_number":6,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"doc":"The HTTP module contains `HTTP::Client`, `HTTP::Server` and `HTTP::WebSocket` implementations.","summary":"<p>The HTTP module contains <code>HTTP::Client</code>, <code>HTTP::Server</code> and <code>HTTP::WebSocket</code> implementations.</p>"},{"html_id":"opentelemetry-api/OpenTelemetry","path":"OpenTelemetry.html","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry","abstract":false,"locations":[{"filename":"src/exporter.cr","line_number":3,"url":null},{"filename":"src/exporters/abstract.cr","line_number":3,"url":null},{"filename":"src/exporters/base.cr","line_number":3,"url":null},{"filename":"src/exporters/buffered_base.cr","line_number":3,"url":null},{"filename":"src/exporters/buffered_exporter.cr","line_number":3,"url":null},{"filename":"src/exporters/http.cr","line_number":23,"url":null},{"filename":"src/exporters/io.cr","line_number":4,"url":null},{"filename":"src/exporters/null.cr","line_number":4,"url":null},{"filename":"src/exporters/stdout.cr","line_number":3,"url":null},{"filename":"src/exporters/unbuffered_exporter.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api.cr","line_number":72,"url":null},{"filename":"src/opentelemetry-api/aliases.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/anyvalue.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/attribute.cr","line_number":3,"url":null},{"filename":"src/opentelemetry-api/context.cr","line_number":4,"url":null},{"filename":"src/opentelemetry-api/context/key.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/event.cr","line_number":3,"url":null},{"filename":"src/opentelemetry-api/id_generator.cr","line_number":3,"url":null},{"filename":"src/opentelemetry-api/id_generator/base.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/id_generator/random.cr","line_number":3,"url":null},{"filename":"src/opentelemetry-api/id_generator/unique.cr","line_number":6,"url":null},{"filename":"src/opentelemetry-api/instrument.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/instrument.cr","line_number":53,"url":null},{"filename":"src/opentelemetry-api/instrument/counter.cr","line_number":3,"url":null},{"filename":"src/opentelemetry-api/instrumentation.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/log.cr","line_number":6,"url":null},{"filename":"src/opentelemetry-api/log_collection.cr","line_number":3,"url":null},{"filename":"src/opentelemetry-api/log_provider.cr","line_number":5,"url":null},{"filename":"src/opentelemetry-api/message.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/meter.cr","line_number":4,"url":null},{"filename":"src/opentelemetry-api/meter/exceptions.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/meter_provider.cr","line_number":4,"url":null},{"filename":"src/opentelemetry-api/name.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/propagation/text_map_getter.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/propagation/text_map_setter.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":6,"url":null},{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/provider.cr","line_number":5,"url":null},{"filename":"src/opentelemetry-api/provider/configuration.cr","line_number":3,"url":null},{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/resource.cr","line_number":4,"url":null},{"filename":"src/opentelemetry-api/sendable.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/span.cr","line_number":8,"url":null},{"filename":"src/opentelemetry-api/span/kind.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/span_context.cr","line_number":3,"url":null},{"filename":"src/opentelemetry-api/status.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/text_map_propagator.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/trace.cr","line_number":8,"url":null},{"filename":"src/opentelemetry-api/trace/exceptions.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/trace_flags.cr","line_number":1,"url":null},{"filename":"src/opentelemetry-api/trace_provider.cr","line_number":4,"url":null},{"filename":"src/opentelemetry-api/version.cr","line_number":1,"url":null},{"filename":"src/proto/common.pb.cr","line_number":4,"url":null},{"filename":"src/proto/logs.pb.cr","line_number":7,"url":null},{"filename":"src/proto/logs_service.pb.cr","line_number":6,"url":null},{"filename":"src/proto/metrics.pb.cr","line_number":7,"url":null},{"filename":"src/proto/metrics_config_service.pb.cr","line_number":6,"url":null},{"filename":"src/proto/metrics_service.pb.cr","line_number":6,"url":null},{"filename":"src/proto/resource.pb.cr","line_number":6,"url":null},{"filename":"src/proto/trace.pb.cr","line_number":7,"url":null},{"filename":"src/proto/trace_config.pb.cr","line_number":4,"url":null},{"filename":"src/proto/trace_service.pb.cr","line_number":6,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"INSTANCE_ID","name":"INSTANCE_ID","value":"CSUUID.unique.to_s"},{"id":"NAME","name":"NAME","value":"\"OpenTelemetry Crystal\""},{"id":"VERSION","name":"VERSION","value":"\"0.2.5\""}],"doc":"```\n\n## Global Trace Provider\n----------------------------------------------------------------\n\nOpenTelemetry.configure do |config|\n  config.service_name = \"my_app_or_library\"\n  config.service_version = \"1.1.1\"\n  config.exporter = OpenTelemetry::IOExporter.new(:STDOUT)\nend\n\ntrace = OpenTelemetry.trace_provider(\"my_app_or_library\", \"1.1.1\")\ntrace = OpenTelemetry.trace_provider do |provider|\n  provider.service_name = \"my_app_or_library\"\n  provider.service_version = \"1.1.1\"\nend.trace\n\n## Trace Providers as Objects With Unique Configuration\n----------------------------------------------------------------\n\nprovider_a = OpenTelemetry::TraceProvider.new(\"my_app_or_library\", \"1.1.1\")\nprovider_a.exporter = OpenTelemetry::IOExporter.new(:STDOUT)\n\nprovider_b = OpenTelementry::TraceProvider.new do |config|\n  config.service_name = \"my_app_or_library\"\n  config.service_version = \"1.1.1\"\n  config.exporter = OpenTelemetry::IOExporter.new(:STDOUT)\nend\n\n## Getting a Trace From a Provider Object\n----------------------------------------------------------------\n\ntrace = provider_a.trace # Inherit all configuration from the Provider Object\n\ntrace = provider_a.trace(\"microservice foo\", \"1.2.3\") # Override the configuration\n\ntrace = provider_a.trace do |provider|\n  provider.service_name = \"microservice foo\"\n  provider.service_version = \"1.2.3\"\nend.trace\n\n## Creating Spans Using a Trace\n----------------------------------------------------------------\n\ntrace.in_span(\"request\") do |span|\n  span.set_attribute(\"verb\", \"GET\")\n  span.set_attribute(\"url\", \"http://example.com/foo\")\n  span.add_event(\"dispatching to handler\")\n  trace.in_span(\"handler\") do |child_span|\n    child_span.add_event(\"handling request\")\n    trace.in_span(\"db\") do |child_span|\n      child_span.add_event(\"querying database\")\n    end\n  end\nend","summary":"<pre><code class=\"language-crystal\"></code></pre>","class_methods":[{"html_id":"config-class-method","name":"config","abstract":false,"location":{"filename":"src/opentelemetry-api.cr","line_number":75,"url":null},"def":{"name":"config","visibility":"Public","body":"@@config"}},{"html_id":"config=(config)-class-method","name":"config=","abstract":false,"args":[{"name":"config","external_name":"config","restriction":""}],"args_string":"(config)","args_html":"(config)","location":{"filename":"src/opentelemetry-api.cr","line_number":75,"url":null},"def":{"name":"config=","args":[{"name":"config","external_name":"config","restriction":""}],"visibility":"Public","body":"@@config = config"}},{"html_id":"configure(&block:TraceProvider::Configuration::Factory->)-class-method","name":"configure","doc":"Use this method to configure the global trace provider.","summary":"<p>Use this method to configure the global trace provider.</p>","abstract":false,"location":{"filename":"src/opentelemetry-api.cr","line_number":79,"url":null},"def":{"name":"configure","yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(TraceProvider::Configuration::Factory ->)"},"visibility":"Public","body":"@@config = TraceProvider::Configuration::Factory.build do |config_block|\n  block.call(config_block)\nend\nprovider.configure!(@@config)\n@@config\n"}},{"html_id":"current_span-class-method","name":"current_span","abstract":false,"location":{"filename":"src/opentelemetry-api.cr","line_number":117,"url":null},"def":{"name":"current_span","visibility":"Public","body":"Fiber.current.current_span"}},{"html_id":"handle_error(error)-class-method","name":"handle_error","abstract":false,"args":[{"name":"error","external_name":"error","restriction":""}],"args_string":"(error)","args_html":"(error)","location":{"filename":"src/opentelemetry-api.cr","line_number":146,"url":null},"def":{"name":"handle_error","args":[{"name":"error","external_name":"error","restriction":""}],"visibility":"Public","body":""}},{"html_id":"instrumentation_library-class-method","name":"instrumentation_library","abstract":false,"location":{"filename":"src/opentelemetry-api.cr","line_number":142,"url":null},"def":{"name":"instrumentation_library","visibility":"Public","body":"instrumentation_scope"}},{"html_id":"instrumentation_scope-class-method","name":"instrumentation_scope","abstract":false,"location":{"filename":"src/opentelemetry-api.cr","line_number":135,"url":null},"def":{"name":"instrumentation_scope","visibility":"Public","body":"Proto::Common::V1::InstrumentationScope.new(name: NAME, version: VERSION)"}},{"html_id":"provider-class-method","name":"provider","abstract":false,"location":{"filename":"src/opentelemetry-api.cr","line_number":76,"url":null},"def":{"name":"provider","visibility":"Public","body":"@@provider"}},{"html_id":"provider=(provider)-class-method","name":"provider=","abstract":false,"args":[{"name":"provider","external_name":"provider","restriction":""}],"args_string":"(provider)","args_html":"(provider)","location":{"filename":"src/opentelemetry-api.cr","line_number":76,"url":null},"def":{"name":"provider=","args":[{"name":"provider","external_name":"provider","restriction":""}],"visibility":"Public","body":"@@provider = provider"}},{"html_id":"trace-class-method","name":"trace","abstract":false,"location":{"filename":"src/opentelemetry-api.cr","line_number":121,"url":null},"def":{"name":"trace","visibility":"Public","body":"trace = Fiber.current.current_trace\nr = trace ? trace : trace_provider.trace\nr\n"}},{"html_id":"trace(&)-class-method","name":"trace","abstract":false,"location":{"filename":"src/opentelemetry-api.cr","line_number":128,"url":null},"def":{"name":"trace","yields":1,"visibility":"Public","body":"trace = self.trace\nyield trace\ntrace\n"}},{"html_id":"trace_provider(service_name:String=ENV[\"OTEL_SERVICE_NAME\"]?||\"\",service_version:String=\"\",exporter=nil)-class-method","name":"trace_provider","abstract":false,"args":[{"name":"service_name","default_value":"ENV[\"OTEL_SERVICE_NAME\"]? || \"\"","external_name":"service_name","restriction":"String"},{"name":"service_version","default_value":"\"\"","external_name":"service_version","restriction":"String"},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":""}],"args_string":"(service_name : String = ENV[\"OTEL_SERVICE_NAME\"]? || \"\", service_version : String = \"\", exporter = nil)","args_html":"(service_name : <a href=\"String.html\">String</a> = <span class=\"t\">ENV</span>[<span class=\"s\">&quot;OTEL_SERVICE_NAME&quot;</span>]? || <span class=\"s\">&quot;&quot;</span>, service_version : <a href=\"String.html\">String</a> = <span class=\"s\">&quot;&quot;</span>, exporter = <span class=\"n\">nil</span>)","location":{"filename":"src/opentelemetry-api.cr","line_number":103,"url":null},"def":{"name":"trace_provider","args":[{"name":"service_name","default_value":"ENV[\"OTEL_SERVICE_NAME\"]? || \"\"","external_name":"service_name","restriction":"String"},{"name":"service_version","default_value":"\"\"","external_name":"service_version","restriction":"String"},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":""}],"visibility":"Public","body":"self.provider = TraceProvider.new(service_name: service_name, service_version: service_version, exporter: exporter || (Exporter.new(:abstract)))\nprovider.merge_configuration(@@config)\nprovider\n"}},{"html_id":"trace_provider(&block:TraceProvider::Configuration::Factory->)-class-method","name":"trace_provider","abstract":false,"location":{"filename":"src/opentelemetry-api.cr","line_number":93,"url":null},"def":{"name":"trace_provider","yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(TraceProvider::Configuration::Factory ->)"},"visibility":"Public","body":"self.provider = TraceProvider.new do |cfg|\n  block.call(cfg)\nend\nprovider.merge_configuration(@@config)\nprovider\n"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/AbstractIdGenerator","path":"OpenTelemetry/AbstractIdGenerator.html","kind":"struct","full_name":"OpenTelemetry::AbstractIdGenerator","name":"AbstractIdGenerator","abstract":false,"superclass":{"html_id":"opentelemetry-api/OpenTelemetry/IdGenerator/Base","kind":"struct","full_name":"OpenTelemetry::IdGenerator::Base","name":"Base"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/IdGenerator/Base","kind":"struct","full_name":"OpenTelemetry::IdGenerator::Base","name":"Base"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/id_generator.cr","line_number":4,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"instance_methods":[{"html_id":"span_id-instance-method","name":"span_id","doc":"This method will return an ID suitable for use as a Span ID. The standard offered\nin the open telemetry spec is 64 bits (8 bytes). This is not a hard requirement,\nhowever, so subclass implementations can return a different length.","summary":"<p>This method will return an ID suitable for use as a Span ID.</p>","abstract":false,"location":{"filename":"src/opentelemetry-api/id_generator.cr","line_number":9,"url":null},"def":{"name":"span_id","visibility":"Public","body":"Slice(UInt8).new(8, 0)"}},{"html_id":"trace_id-instance-method","name":"trace_id","doc":"This method will return an ID suitable for use as a Trace ID. The standard offered\nin the open telemetry spec is 128 bits (16 bytes). This is not a hard requirement,\nhowever, so subclass implementations can return a different length.","summary":"<p>This method will return an ID suitable for use as a Trace ID.</p>","abstract":false,"location":{"filename":"src/opentelemetry-api/id_generator.cr","line_number":5,"url":null},"def":{"name":"trace_id","visibility":"Public","body":"Slice(UInt8).new(16, 0)"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/AnyAttribute","path":"OpenTelemetry/AnyAttribute.html","kind":"class","full_name":"OpenTelemetry::AnyAttribute","name":"AnyAttribute","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/attribute.cr","line_number":66,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"doc":"This is a wrapper around the supported attribute types.","summary":"<p>This is a wrapper around the supported attribute types.</p>","constructors":[{"html_id":"new(key:String,value:ValueTypes|UInt64)-class-method","name":"new","doc":"ameba:disable Metrics/CyclomaticComplexity","summary":"<p>ameba:disable Metrics/CyclomaticComplexity</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"value","external_name":"value","restriction":"ValueTypes | UInt64"}],"args_string":"(key : String, value : ValueTypes | UInt64)","args_html":"(key : <a href=\"../String.html\">String</a>, value : <a href=\"../OpenTelemetry/ValueTypes.html\">ValueTypes</a> | UInt64)","location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":85,"url":null},"def":{"name":"new","args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"value","external_name":"value","restriction":"ValueTypes | UInt64"}],"visibility":"Public","body":"_ = allocate\n_.initialize(key, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(raw:Attribute)-class-method","name":"new","abstract":false,"args":[{"name":"raw","external_name":"raw","restriction":"Attribute"}],"args_string":"(raw : Attribute)","args_html":"(raw : <a href=\"../OpenTelemetry/Attribute.html\">Attribute</a>)","location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":80,"url":null},"def":{"name":"new","args":[{"name":"raw","external_name":"raw","restriction":"Attribute"}],"visibility":"Public","body":"_ = allocate\n_.initialize(raw)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<<(value:ValueType|ValueArrays)-instance-method","name":"<<","doc":"ameba:disable Metrics/CyclomaticComplexity","summary":"<p>ameba:disable Metrics/CyclomaticComplexity</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"ValueType | ValueArrays"}],"args_string":"(value : ValueType | ValueArrays)","args_html":"(value : <a href=\"../OpenTelemetry/ValueType.html\">ValueType</a> | <a href=\"../OpenTelemetry/ValueArrays.html\">ValueArrays</a>)","location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":113,"url":null},"def":{"name":"<<","args":[{"name":"value","external_name":"value","restriction":"ValueType | ValueArrays"}],"visibility":"Public","body":"case object = @raw\nwhen Attribute(String)\n  @raw = Attribute(Array(String)).new(object.key, [object.value.as(String)])\nwhen Attribute(Bool)\n  @raw = Attribute(Array(Bool)).new(object.key, [object.value.as(Bool)])\nwhen Attribute(Float64)\n  @raw = Attribute(Array(Float64)).new(@raw.key, [@raw.value.as(Float64)])\nwhen Attribute(Int64)\n  @raw = Attribute(Array(Int64)).new(@raw.key, [@raw.value.as(Int64)])\nwhen Attribute(Int32)\n  @raw = Attribute(Array(Int32)).new(@raw.key, [@raw.value.as(Int32)])\nend\ncase value\nwhen String\n  (@raw.value.as(Array(String))) << value\nwhen Bool\n  (@raw.value.as(Array(Bool))) << value\nwhen Float64\n  (@raw.value.as(Array(Float64))) << value\nwhen Int64\n  (@raw.value.as(Array(Int64))) << value\nwhen Int32\n  (@raw.value.as(Array(Int32))) << value\nwhen Array(String)\n  (@raw.value.as(Array(String))).concat(value)\nwhen Array(Bool)\n  (@raw.value.as(Array(Bool))).concat(value)\nwhen Array(Float64)\n  (@raw.value.as(Array(Float64))).concat(value)\nwhen Array(Int64)\n  (@raw.value.as(Array(Int64))).concat(value)\nwhen Array(Int32)\n  (@raw.value.as(Array(Int32))).concat(value)\nelse\n  raise(ArgumentError.new(\"#{value} is not a valid type\"))\nend\n"}},{"html_id":"[](index)-instance-method","name":"[]","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""}],"args_string":"(index)","args_html":"(index)","location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":161,"url":null},"def":{"name":"[]","args":[{"name":"index","external_name":"index","restriction":""}],"visibility":"Public","body":"case object = @raw.value\nwhen Array, String\n  object[index]\nelse\n  raise(\"Expected Attribute(Array) or Attribute(String) for #[](index : Int), not #{object.class}\")\nend"}},{"html_id":"[]=(index,value)-instance-method","name":"[]=","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(index, value)","args_html":"(index, value)","location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":179,"url":null},"def":{"name":"[]=","args":[{"name":"index","external_name":"index","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"case value\nwhen String\n  (@raw.value.as(Array(String)))[index] = value.as(String)\nwhen Bool\n  (@raw.value.as(Array(Bool)))[index] = value.as(Bool)\nwhen Float64\n  (@raw.value.as(Array(Float64)))[index] = value.as(Float64)\nwhen Int64\n  (@raw.value.as(Array(Int64)))[index] = value.as(Int64)\nwhen Int32\n  (@raw.value.as(Array(Int32)))[index] = value.as(Int32)\nelse\n  raise(\"Expected Attribute(Array) for #[]=(index : Int, value : ValueType), not #{@raw.value.class}\")\nend"}},{"html_id":"[]?(index)-instance-method","name":"[]?","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""}],"args_string":"(index)","args_html":"(index)","location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":170,"url":null},"def":{"name":"[]?","args":[{"name":"index","external_name":"index","restriction":""}],"visibility":"Public","body":"case object = @raw.value\nwhen Array, String\n  object[index]?\nelse\n  raise(\"Expected Attribute(Array) or Attribute(String) for #[](index : Int), not #{object.class}\")\nend"}},{"html_id":"key-instance-method","name":"key","abstract":false,"location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":157,"url":null},"def":{"name":"key","visibility":"Public","body":"@raw.key"}},{"html_id":"raw:Type-instance-method","name":"raw","abstract":false,"location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":78,"url":null},"def":{"name":"raw","return_type":"Type","visibility":"Public","body":"@raw"}},{"html_id":"to_json-instance-method","name":"to_json","abstract":false,"location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":196,"url":null},"def":{"name":"to_json","visibility":"Public","body":"\"\\\"#{key}\\\":#{value.to_json}\""}},{"html_id":"value-instance-method","name":"value","abstract":false,"location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":153,"url":null},"def":{"name":"value","visibility":"Public","body":"@raw.value"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/AnyAttribute/Type","path":"OpenTelemetry/AnyAttribute/Type.html","kind":"alias","full_name":"OpenTelemetry::AnyAttribute::Type","name":"Type","abstract":false,"locations":[{"filename":"src/opentelemetry-api/attribute.cr","line_number":67,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":true,"aliased":"(OpenTelemetry::Attribute(Array(Bool)) | OpenTelemetry::Attribute(Array(Float64)) | OpenTelemetry::Attribute(Array(Int32)) | OpenTelemetry::Attribute(Array(Int64)) | OpenTelemetry::Attribute(Array(String)) | OpenTelemetry::Attribute(Bool) | OpenTelemetry::Attribute(Float64) | OpenTelemetry::Attribute(Int32) | OpenTelemetry::Attribute(Int64) | OpenTelemetry::Attribute(String))","aliased_html":"<a href=\"../../OpenTelemetry/Attribute.html\">OpenTelemetry::Attribute(Array(Bool))</a> | <a href=\"../../OpenTelemetry/Attribute.html\">OpenTelemetry::Attribute(Array(Float64))</a> | <a href=\"../../OpenTelemetry/Attribute.html\">OpenTelemetry::Attribute(Array(Int32))</a> | <a href=\"../../OpenTelemetry/Attribute.html\">OpenTelemetry::Attribute(Array(Int64))</a> | <a href=\"../../OpenTelemetry/Attribute.html\">OpenTelemetry::Attribute</a>(Array(<a href=\"../../String.html\">String</a>)) | <a href=\"../../OpenTelemetry/Attribute.html\">OpenTelemetry::Attribute(Bool)</a> | <a href=\"../../OpenTelemetry/Attribute.html\">OpenTelemetry::Attribute(Float64)</a> | <a href=\"../../OpenTelemetry/Attribute.html\">OpenTelemetry::Attribute(Int32)</a> | <a href=\"../../OpenTelemetry/Attribute.html\">OpenTelemetry::Attribute(Int64)</a> | <a href=\"../../OpenTelemetry/Attribute.html\">OpenTelemetry::Attribute</a>(<a href=\"../../String.html\">String</a>)","const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/AnyAttribute","kind":"class","full_name":"OpenTelemetry::AnyAttribute","name":"AnyAttribute"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/AnyValue","path":"OpenTelemetry/AnyValue.html","kind":"class","full_name":"OpenTelemetry::AnyValue","name":"AnyValue","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/anyvalue.cr","line_number":2,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"constructors":[{"html_id":"new(value:ValueTypes|UInt64)-class-method","name":"new","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"ValueTypes | UInt64"}],"args_string":"(value : ValueTypes | UInt64)","args_html":"(value : <a href=\"../OpenTelemetry/ValueTypes.html\">ValueTypes</a> | UInt64)","location":{"filename":"src/opentelemetry-api/anyvalue.cr","line_number":5,"url":null},"def":{"name":"new","args":[{"name":"value","external_name":"value","restriction":"ValueTypes | UInt64"}],"visibility":"Public","body":"_ = allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<<(value:ValueType|ValueArrays)-instance-method","name":"<<","doc":"ameba:disable Metrics/CyclomaticComplexity","summary":"<p>ameba:disable Metrics/CyclomaticComplexity</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"ValueType | ValueArrays"}],"args_string":"(value : ValueType | ValueArrays)","args_html":"(value : <a href=\"../OpenTelemetry/ValueType.html\">ValueType</a> | <a href=\"../OpenTelemetry/ValueArrays.html\">ValueArrays</a>)","location":{"filename":"src/opentelemetry-api/anyvalue.cr","line_number":14,"url":null},"def":{"name":"<<","args":[{"name":"value","external_name":"value","restriction":"ValueType | ValueArrays"}],"visibility":"Public","body":"case object = @raw\nwhen Attribute(String)\n  @raw = Attribute(Array(String)).new(object.key, [object.value.as(String)])\nwhen Attribute(Bool)\n  @raw = Attribute(Array(Bool)).new(object.key, [object.value.as(Bool)])\nwhen Attribute(Float64)\n  @raw = Attribute(Array(Float64)).new(@raw.key, [@raw.value.as(Float64)])\nwhen Attribute(Int64)\n  @raw = Attribute(Array(Int64)).new(@raw.key, [@raw.value.as(Int64)])\nwhen Attribute(Int32)\n  @raw = Attribute(Array(Int32)).new(@raw.key, [@raw.value.as(Int32)])\nend\ncase value\nwhen String\n  (@raw.value.as(Array(String))) << value\nwhen Bool\n  (@raw.value.as(Array(Bool))) << value\nwhen Float64\n  (@raw.value.as(Array(Float64))) << value\nwhen Int64\n  (@raw.value.as(Array(Int64))) << value\nwhen Int32\n  (@raw.value.as(Array(Int32))) << value\nwhen Array(String)\n  (@raw.value.as(Array(String))).concat(value)\nwhen Array(Bool)\n  (@raw.value.as(Array(Bool))).concat(value)\nwhen Array(Float64)\n  (@raw.value.as(Array(Float64))).concat(value)\nwhen Array(Int64)\n  (@raw.value.as(Array(Int64))).concat(value)\nwhen Array(Int32)\n  (@raw.value.as(Array(Int32))).concat(value)\nelse\n  raise(ArgumentError.new(\"#{value} is not a valid type\"))\nend\n"}},{"html_id":"[](index)-instance-method","name":"[]","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""}],"args_string":"(index)","args_html":"(index)","location":{"filename":"src/opentelemetry-api/anyvalue.cr","line_number":86,"url":null},"def":{"name":"[]","args":[{"name":"index","external_name":"index","restriction":""}],"visibility":"Public","body":"case object = @raw.value\nwhen Array, String\n  object[index]\nelse\n  raise(\"Expected Attribute(Array) or Attribute(String) for #[](index : Int), not #{object.class}\")\nend"}},{"html_id":"[]=(index,value)-instance-method","name":"[]=","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(index, value)","args_html":"(index, value)","location":{"filename":"src/opentelemetry-api/anyvalue.cr","line_number":104,"url":null},"def":{"name":"[]=","args":[{"name":"index","external_name":"index","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"case value\nwhen String\n  (@raw.value.as(Array(String)))[index] = value.as(String)\nwhen Bool\n  (@raw.value.as(Array(Bool)))[index] = value.as(Bool)\nwhen Float64\n  (@raw.value.as(Array(Float64)))[index] = value.as(Float64)\nwhen Int64\n  (@raw.value.as(Array(Int64)))[index] = value.as(Int64)\nwhen Int32\n  (@raw.value.as(Array(Int32)))[index] = value.as(Int32)\nelse\n  raise(\"Expected Attribute(Array) for #[]=(index : Int, value : ValueType), not #{@raw.value.class}\")\nend"}},{"html_id":"[]?(index)-instance-method","name":"[]?","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""}],"args_string":"(index)","args_html":"(index)","location":{"filename":"src/opentelemetry-api/anyvalue.cr","line_number":95,"url":null},"def":{"name":"[]?","args":[{"name":"index","external_name":"index","restriction":""}],"visibility":"Public","body":"case object = @raw.value\nwhen Array, String\n  object[index]?\nelse\n  raise(\"Expected Attribute(Array) or Attribute(String) for #[](index : Int), not #{object.class}\")\nend"}},{"html_id":"raw:AnyAttribute::Type-instance-method","name":"raw","abstract":false,"location":{"filename":"src/opentelemetry-api/anyvalue.cr","line_number":3,"url":null},"def":{"name":"raw","return_type":"AnyAttribute::Type","visibility":"Public","body":"@raw"}},{"html_id":"to_json-instance-method","name":"to_json","abstract":false,"location":{"filename":"src/opentelemetry-api/anyvalue.cr","line_number":121,"url":null},"def":{"name":"to_json","visibility":"Public","body":"value.to_json"}},{"html_id":"value-instance-method","name":"value","abstract":false,"location":{"filename":"src/opentelemetry-api/anyvalue.cr","line_number":54,"url":null},"def":{"name":"value","visibility":"Public","body":"@raw.value"}},{"html_id":"value=(val)-instance-method","name":"value=","doc":"ameba:disable Metrics/CyclomaticComplexity","summary":"<p>ameba:disable Metrics/CyclomaticComplexity</p>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/opentelemetry-api/anyvalue.cr","line_number":59,"url":null},"def":{"name":"value=","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"case val\nwhen String\n  @raw = Attribute(String).new(val)\nwhen Bool\n  @raw = Attribute(Bool).new(val)\nwhen Float64\n  @raw = Attribute(Float64).new(val)\nwhen Int64\n  @raw = Attribute(Int64).new(val)\nwhen Int32\n  @raw = Attribute(Int32).new(val)\nwhen Array(String)\n  @raw = Attribute(Array(String)).new(val)\nwhen Array(Bool)\n  @raw = Attribute(Array(Bool)).new(val)\nwhen Array(Float64)\n  @raw = Attribute(Array(Float64)).new(val)\nwhen Array(Int64)\n  @raw = Attribute(Array(Int64)).new(val)\nwhen Array(Int32)\n  @raw = Attribute(Array(Int32)).new(val)\nelse\n  raise(ArgumentError.new(\"#{val} is not a valid type\"))\nend"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Attribute","path":"OpenTelemetry/Attribute.html","kind":"struct","full_name":"OpenTelemetry::Attribute(K)","name":"Attribute","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/attribute.cr","line_number":8,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"class_methods":[{"html_id":"from_a(ary)-class-method","name":"from_a","abstract":false,"args":[{"name":"ary","external_name":"ary","restriction":""}],"args_string":"(ary)","args_html":"(ary)","location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":33,"url":null},"def":{"name":"from_a","args":[{"name":"ary","external_name":"ary","restriction":""}],"visibility":"Public","body":"new(key: ary[0], value: ary[1])"}},{"html_id":"from_h(hash)-class-method","name":"from_h","abstract":false,"args":[{"name":"hash","external_name":"hash","restriction":""}],"args_string":"(hash)","args_html":"(hash)","location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":29,"url":null},"def":{"name":"from_h","args":[{"name":"hash","external_name":"hash","restriction":""}],"visibility":"Public","body":"new(key: hash[\"key\"], value: hash[\"value\"])"}},{"html_id":"to_anyvalue(attribute)-class-method","name":"to_anyvalue","abstract":false,"args":[{"name":"attribute","external_name":"attribute","restriction":""}],"args_string":"(attribute)","args_html":"(attribute)","location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":12,"url":null},"def":{"name":"to_anyvalue","args":[{"name":"attribute","external_name":"attribute","restriction":""}],"visibility":"Public","body":"case val = attribute.value\nwhen String\n  Proto::Common::V1::AnyValue.new(string_value: val)\nwhen Bool\n  Proto::Common::V1::AnyValue.new(bool_value: val)\nwhen Int\n  Proto::Common::V1::AnyValue.new(int_value: val.to_i64)\nwhen Float\n  Proto::Common::V1::AnyValue.new(double_value: val.to_f64)\nwhen Time\n  Proto::Common::V1::AnyValue.new(string_value: val.iso8601)\nelse\n  Proto::Common::V1::AnyValue.new\nend"}}],"constructors":[{"html_id":"new(key,value)-class-method","name":"new","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(key, value)","args_html":"(key, value)","location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":41,"url":null},"def":{"name":"new","args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"_ = Attribute(K).allocate\n_.initialize(key, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(value)-class-method","name":"new","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":37,"url":null},"def":{"name":"new","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"_ = Attribute(K).allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"key:String-instance-method","name":"key","abstract":false,"location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":9,"url":null},"def":{"name":"key","return_type":"String","visibility":"Public","body":"@key"}},{"html_id":"to_bool-instance-method","name":"to_bool","abstract":false,"location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":60,"url":null},"def":{"name":"to_bool","visibility":"Public","body":"!(!value)"}},{"html_id":"to_f-instance-method","name":"to_f","abstract":false,"location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":56,"url":null},"def":{"name":"to_f","visibility":"Public","body":"value.to_f64"}},{"html_id":"to_h-instance-method","name":"to_h","abstract":false,"location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":44,"url":null},"def":{"name":"to_h","visibility":"Public","body":"{key: value}"}},{"html_id":"to_i-instance-method","name":"to_i","abstract":false,"location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":52,"url":null},"def":{"name":"to_i","visibility":"Public","body":"value.to_i64"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Same as `#inspect(io)`.","summary":"<p>Same as <code>#inspect(io)</code>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":48,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"io << value"}},{"html_id":"value:K-instance-method","name":"value","abstract":false,"location":{"filename":"src/opentelemetry-api/attribute.cr","line_number":10,"url":null},"def":{"name":"value","return_type":"K","visibility":"Public","body":"@value"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Attribute/List","path":"OpenTelemetry/Attribute/List.html","kind":"class","full_name":"OpenTelemetry::Attribute::List","name":"List","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/attribute/list.cr","line_number":1,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Attribute","kind":"struct","full_name":"OpenTelemetry::Attribute(K)","name":"Attribute"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Context","path":"OpenTelemetry/Context.html","kind":"struct","full_name":"OpenTelemetry::Context","name":"Context","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/context.cr","line_number":5,"url":null},{"filename":"src/opentelemetry-api/context/key.cr","line_number":2,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"class_methods":[{"html_id":"[](key)-class-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":108,"url":null},"def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"current[key]"}},{"html_id":"[]=(key,value)-class-method","name":"[]=","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(key, value)","args_html":"(key, value)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":124,"url":null},"def":{"name":"[]=","args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"current[key] = value"}},{"html_id":"[]?(key)-class-method","name":"[]?","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":112,"url":null},"def":{"name":"[]?","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"current[key]?"}},{"html_id":"attach(context:Context)-class-method","name":"attach","abstract":false,"args":[{"name":"context","external_name":"context","restriction":"Context"}],"args_string":"(context : Context)","args_html":"(context : <a href=\"../OpenTelemetry/Context.html\">Context</a>)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":29,"url":null},"def":{"name":"attach","args":[{"name":"context","external_name":"context","restriction":"Context"}],"visibility":"Public","body":"stack << context\ncontext.object_id\n"}},{"html_id":"attach(entries)-class-method","name":"attach","abstract":false,"args":[{"name":"entries","external_name":"entries","restriction":""}],"args_string":"(entries)","args_html":"(entries)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":34,"url":null},"def":{"name":"attach","args":[{"name":"entries","external_name":"entries","restriction":""}],"visibility":"Public","body":"attach(Context.new(entries))"}},{"html_id":"attach(context:Context,&)-class-method","name":"attach","abstract":false,"args":[{"name":"context","external_name":"context","restriction":"Context"}],"args_string":"(context : Context, &)","args_html":"(context : <a href=\"../OpenTelemetry/Context.html\">Context</a>, &)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":51,"url":null},"def":{"name":"attach","args":[{"name":"context","external_name":"context","restriction":"Context"}],"yields":1,"visibility":"Public","body":"begin\n  token = context.object_id\n  stack << context\n  yield context\nensure\n  detach(token)\nend"}},{"html_id":"attach(entries,&)-class-method","name":"attach","abstract":false,"args":[{"name":"entries","external_name":"entries","restriction":""}],"args_string":"(entries, &)","args_html":"(entries, &)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":59,"url":null},"def":{"name":"attach","args":[{"name":"entries","external_name":"entries","restriction":""}],"yields":1,"visibility":"Public","body":"attach(Context.new(entries)) do |ctx|\n  yield ctx\nend"}},{"html_id":"clear-class-method","name":"clear","abstract":false,"location":{"filename":"src/opentelemetry-api/context.cr","line_number":132,"url":null},"def":{"name":"clear","visibility":"Public","body":"stack.clear"}},{"html_id":"create_key(name)-class-method","name":"create_key","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""}],"args_string":"(name)","args_html":"(name)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":25,"url":null},"def":{"name":"create_key","args":[{"name":"name","external_name":"name","restriction":""}],"visibility":"Public","body":"Key.new(name)"}},{"html_id":"create_key-class-method","name":"create_key","abstract":false,"location":{"filename":"src/opentelemetry-api/context.cr","line_number":21,"url":null},"def":{"name":"create_key","visibility":"Public","body":"Key.new"}},{"html_id":"current-class-method","name":"current","abstract":false,"location":{"filename":"src/opentelemetry-api/context.cr","line_number":17,"url":null},"def":{"name":"current","visibility":"Public","body":"stack.empty? ? @@root : stack.last"}},{"html_id":"detach(token)-class-method","name":"detach","doc":"Restores the previous Context associated with the current Fiber.\nThe supplied token is used to check if the call to detach is balanced\nwith a corresponding attach call. A warning is logged if the\ncalls are unbalanced.","summary":"<p>Restores the previous Context associated with the current Fiber.</p>","abstract":false,"args":[{"name":"token","external_name":"token","restriction":""}],"args_string":"(token)","args_html":"(token)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":42,"url":null},"def":{"name":"detach","args":[{"name":"token","external_name":"token","restriction":""}],"visibility":"Public","body":"ctxt = stack\ncalls_matched = (token == ctxt.object_id)\nctxt.pop\ncalls_matched\n"}},{"html_id":"set_value(key,value)-class-method","name":"set_value","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(key, value)","args_html":"(key, value)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":128,"url":null},"def":{"name":"set_value","args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"self[key] = value"}},{"html_id":"stack-class-method","name":"stack","abstract":false,"location":{"filename":"src/opentelemetry-api/context.cr","line_number":13,"url":null},"def":{"name":"stack","visibility":"Public","body":"@@stack[Fiber.current]"}},{"html_id":"value(key)-class-method","name":"value","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":116,"url":null},"def":{"name":"value","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"self[key]"}},{"html_id":"value?(key)-class-method","name":"value?","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":120,"url":null},"def":{"name":"value?","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"self[key]?"}},{"html_id":"with(key,values,&)-class-method","name":"with","doc":"Execute a block in a new context with key set to value. Restores the\nprevious context after the block executes.","summary":"<p>Execute a block in a new context with key set to value.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"values","external_name":"values","restriction":""}],"args_string":"(key, values, &)","args_html":"(key, values, &)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":104,"url":null},"def":{"name":"with","args":[{"name":"key","external_name":"key","restriction":""},{"name":"values","external_name":"values","restriction":""}],"yields":2,"visibility":"Public","body":"self.with(key, values) do |ctx, val|\n  yield ctx, val\nend"}},{"html_id":"with(context:Context,&)-class-method","name":"with","doc":"Executes a block with ctx as the current context. It restores\nthe previous context upon exiting.","summary":"<p>Executes a block with ctx as the current context.</p>","abstract":false,"args":[{"name":"context","external_name":"context","restriction":"Context"}],"args_string":"(context : Context, &)","args_html":"(context : <a href=\"../OpenTelemetry/Context.html\">Context</a>, &)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":65,"url":null},"def":{"name":"with","args":[{"name":"context","external_name":"context","restriction":"Context"}],"yields":1,"visibility":"Public","body":"attach(context) do |ctx|\n  yield ctx\nend"}},{"html_id":"with(values,&)-class-method","name":"with","doc":"@param [String] key The lookup key\n@param [Hash] values Will be merged with values of the current context\n and returned in a new context\n@param [Callable] Block to execute in a new context\n@yield [context, values] Yields the newly created context and values\n  to the block","summary":"<p>@param [String] key The lookup key @param [Hash] values Will be merged with values of the current context  and returned in a new context @param [Callable] Block to execute in a new context @yield [context, values] Yields the newly created context and values   to the block</p>","abstract":false,"args":[{"name":"values","external_name":"values","restriction":""}],"args_string":"(values, &)","args_html":"(values, &)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":96,"url":null},"def":{"name":"with","args":[{"name":"values","external_name":"values","restriction":""}],"yields":2,"visibility":"Public","body":"begin\n  ctx = current.dup.merge(values)\n  token = attach(ctx)\n  yield ctx, values\nensure\n  detach(token)\nend"}}],"constructors":[{"html_id":"new(entries:ContextContainer)-class-method","name":"new","abstract":false,"args":[{"name":"entries","external_name":"entries","restriction":"ContextContainer"}],"args_string":"(entries : ContextContainer)","args_html":"(entries : <a href=\"../OpenTelemetry/Context/ContextContainer.html\">ContextContainer</a>)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":140,"url":null},"def":{"name":"new","args":[{"name":"entries","external_name":"entries","restriction":"ContextContainer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(entries)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(entries)-class-method","name":"new","abstract":false,"args":[{"name":"entries","external_name":"entries","restriction":""}],"args_string":"(entries)","args_html":"(entries)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":144,"url":null},"def":{"name":"new","args":[{"name":"entries","external_name":"entries","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(entries)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/opentelemetry-api/context.cr","line_number":136,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":160,"url":null},"def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"@entries[key]"}},{"html_id":"[]=(key,value)-instance-method","name":"[]=","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(key, value)","args_html":"(key, value)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":172,"url":null},"def":{"name":"[]=","args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"@entries[key] = value"}},{"html_id":"[]?(key)-instance-method","name":"[]?","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":164,"url":null},"def":{"name":"[]?","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"@entries[key]?"}},{"html_id":"entries:SplayTreeMap(String,String)-instance-method","name":"entries","abstract":false,"location":{"filename":"src/opentelemetry-api/context.cr","line_number":176,"url":null},"def":{"name":"entries","visibility":"Public","body":"@entries"}},{"html_id":"merge(other_entries)-instance-method","name":"merge","abstract":false,"args":[{"name":"other_entries","external_name":"other_entries","restriction":""}],"args_string":"(other_entries)","args_html":"(other_entries)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":180,"url":null},"def":{"name":"merge","args":[{"name":"other_entries","external_name":"other_entries","restriction":""}],"visibility":"Public","body":"@entries = @entries.merge(other_entries)"}},{"html_id":"object_id:CSUUID-instance-method","name":"object_id","abstract":false,"location":{"filename":"src/opentelemetry-api/context.cr","line_number":11,"url":null},"def":{"name":"object_id","return_type":"CSUUID","visibility":"Public","body":"@object_id"}},{"html_id":"set_value(key,value)-instance-method","name":"set_value","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(key, value)","args_html":"(key, value)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":168,"url":null},"def":{"name":"set_value","args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"self[key] = value"}},{"html_id":"value(key)-instance-method","name":"value","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":152,"url":null},"def":{"name":"value","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"self[key]"}},{"html_id":"value?(key)-instance-method","name":"value?","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/opentelemetry-api/context.cr","line_number":156,"url":null},"def":{"name":"value?","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"self[key]?"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Context/ContextContainer","path":"OpenTelemetry/Context/ContextContainer.html","kind":"alias","full_name":"OpenTelemetry::Context::ContextContainer","name":"ContextContainer","abstract":false,"locations":[{"filename":"src/opentelemetry-api/context.cr","line_number":6,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":true,"aliased":"SplayTreeMap(String, String)","aliased_html":"SplayTreeMap(<a href=\"../../String.html\">String</a>, <a href=\"../../String.html\">String</a>)","const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Context","kind":"struct","full_name":"OpenTelemetry::Context","name":"Context"}},{"html_id":"opentelemetry-api/OpenTelemetry/Context/Key","path":"OpenTelemetry/Context/Key.html","kind":"struct","full_name":"OpenTelemetry::Context::Key","name":"Key","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/context/key.cr","line_number":3,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Context","kind":"struct","full_name":"OpenTelemetry::Context","name":"Context"},"constructors":[{"html_id":"new(name=CSUUID.unique.to_s,context=Context.current,id=CSUUID.unique)-class-method","name":"new","abstract":false,"args":[{"name":"name","default_value":"CSUUID.unique.to_s","external_name":"name","restriction":""},{"name":"context","default_value":"Context.current","external_name":"context","restriction":""},{"name":"id","default_value":"CSUUID.unique","external_name":"id","restriction":""}],"args_string":"(name = CSUUID.unique.to_s, context = Context.current, id = CSUUID.unique)","args_html":"(name = <span class=\"t\">CSUUID</span>.unique.to_s, context = <span class=\"t\">Context</span>.current, id = <span class=\"t\">CSUUID</span>.unique)","location":{"filename":"src/opentelemetry-api/context/key.cr","line_number":8,"url":null},"def":{"name":"new","args":[{"name":"name","default_value":"CSUUID.unique.to_s","external_name":"name","restriction":""},{"name":"context","default_value":"Context.current","external_name":"context","restriction":""},{"name":"id","default_value":"CSUUID.unique","external_name":"id","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(name, context, id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<=>(val)-instance-method","name":"<=>","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/opentelemetry-api/context/key.cr","line_number":19,"url":null},"def":{"name":"<=>","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"id <=> val.id"}},{"html_id":"context:Context-instance-method","name":"context","abstract":false,"location":{"filename":"src/opentelemetry-api/context/key.cr","line_number":6,"url":null},"def":{"name":"context","return_type":"Context","visibility":"Public","body":"@context"}},{"html_id":"get(context=Context.current)-instance-method","name":"get","abstract":false,"args":[{"name":"context","default_value":"Context.current","external_name":"context","restriction":""}],"args_string":"(context = Context.current)","args_html":"(context = <span class=\"t\">Context</span>.current)","location":{"filename":"src/opentelemetry-api/context/key.cr","line_number":15,"url":null},"def":{"name":"get","args":[{"name":"context","default_value":"Context.current","external_name":"context","restriction":""}],"visibility":"Public","body":"context[self.name]"}},{"html_id":"id:CSUUID-instance-method","name":"id","abstract":false,"location":{"filename":"src/opentelemetry-api/context/key.cr","line_number":5,"url":null},"def":{"name":"id","return_type":"CSUUID","visibility":"Public","body":"@id"}},{"html_id":"name:String-instance-method","name":"name","abstract":false,"location":{"filename":"src/opentelemetry-api/context/key.cr","line_number":4,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"}},{"html_id":"value-instance-method","name":"value","abstract":false,"location":{"filename":"src/opentelemetry-api/context/key.cr","line_number":11,"url":null},"def":{"name":"value","visibility":"Public","body":"get"}}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Event","path":"OpenTelemetry/Event.html","kind":"class","full_name":"OpenTelemetry::Event","name":"Event","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/event.cr","line_number":4,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"constructors":[{"html_id":"new(name,attributes:Hash(String,AnyAttribute))-class-method","name":"new","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"attributes","external_name":"attributes","restriction":"Hash(String, AnyAttribute)"}],"args_string":"(name, attributes : Hash(String, AnyAttribute))","args_html":"(name, attributes : Hash(<a href=\"../String.html\">String</a>, <a href=\"../OpenTelemetry/AnyAttribute.html\">AnyAttribute</a>))","location":{"filename":"src/opentelemetry-api/event.cr","line_number":18,"url":null},"def":{"name":"new","args":[{"name":"name","external_name":"name","restriction":""},{"name":"attributes","external_name":"attributes","restriction":"Hash(String, AnyAttribute)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(name, attributes)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(name,attributes:Hash(String,_))-class-method","name":"new","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"attributes","external_name":"attributes","restriction":"Hash(String, _)"}],"args_string":"(name, attributes : Hash(String, _))","args_html":"(name, attributes : Hash(<a href=\"../String.html\">String</a>, _))","location":{"filename":"src/opentelemetry-api/event.cr","line_number":21,"url":null},"def":{"name":"new","args":[{"name":"name","external_name":"name","restriction":""},{"name":"attributes","external_name":"attributes","restriction":"Hash(String, _)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(name, attributes)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(name)-class-method","name":"new","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""}],"args_string":"(name)","args_html":"(name)","location":{"filename":"src/opentelemetry-api/event.cr","line_number":11,"url":null},"def":{"name":"new","args":[{"name":"name","external_name":"name","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(name=\"\",&)-class-method","name":"new","abstract":false,"args":[{"name":"name","default_value":"\"\"","external_name":"name","restriction":""}],"args_string":"(name = \"\", &)","args_html":"(name = <span class=\"s\">&quot;&quot;</span>, &)","location":{"filename":"src/opentelemetry-api/event.cr","line_number":14,"url":null},"def":{"name":"new","args":[{"name":"name","default_value":"\"\"","external_name":"name","restriction":""}],"yields":1,"visibility":"Public","body":"_ = allocate\n_.initialize(name) do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/opentelemetry-api/event.cr","line_number":43,"url":null},"def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"attributes[key].value"}},{"html_id":"[]=(key,value)-instance-method","name":"[]=","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(key, value)","args_html":"(key, value)","location":{"filename":"src/opentelemetry-api/event.cr","line_number":35,"url":null},"def":{"name":"[]=","args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"attributes[key] = AnyAttribute.new(key: key, value: value)"}},{"html_id":"attributes:Hash(String,AnyAttribute)-instance-method","name":"attributes","abstract":false,"location":{"filename":"src/opentelemetry-api/event.cr","line_number":8,"url":null},"def":{"name":"attributes","return_type":"Hash(String, AnyAttribute)","visibility":"Public","body":"@attributes"}},{"html_id":"attributes=(attr:Hash(String,_))-instance-method","name":"attributes=","abstract":false,"args":[{"name":"attr","external_name":"attr","restriction":"Hash(String, _)"}],"args_string":"(attr : Hash(String, _))","args_html":"(attr : Hash(<a href=\"../String.html\">String</a>, _))","location":{"filename":"src/opentelemetry-api/event.cr","line_number":28,"url":null},"def":{"name":"attributes=","args":[{"name":"attr","external_name":"attr","restriction":"Hash(String, _)"}],"visibility":"Public","body":"@attributes = {} of String => AnyAttribute\nattr.each do |k, v|\n  @attributes[k] = AnyAttribute.new(k, v)\nend\n"}},{"html_id":"get_attribute(key)-instance-method","name":"get_attribute","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/opentelemetry-api/event.cr","line_number":47,"url":null},"def":{"name":"get_attribute","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"attributes[key]"}},{"html_id":"name:String-instance-method","name":"name","abstract":false,"location":{"filename":"src/opentelemetry-api/event.cr","line_number":5,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"}},{"html_id":"name=(name:String)-instance-method","name":"name=","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : <a href=\"../String.html\">String</a>)","location":{"filename":"src/opentelemetry-api/event.cr","line_number":5,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"}},{"html_id":"parent_span:Span?-instance-method","name":"parent_span","abstract":false,"location":{"filename":"src/opentelemetry-api/event.cr","line_number":9,"url":null},"def":{"name":"parent_span","return_type":"Span | ::Nil","visibility":"Public","body":"@parent_span"}},{"html_id":"parent_span=(parent_span:Span?)-instance-method","name":"parent_span=","abstract":false,"args":[{"name":"parent_span","external_name":"parent_span","restriction":"Span | ::Nil"}],"args_string":"(parent_span : Span?)","args_html":"(parent_span : <a href=\"../OpenTelemetry/Span.html\">Span</a>?)","location":{"filename":"src/opentelemetry-api/event.cr","line_number":9,"url":null},"def":{"name":"parent_span=","args":[{"name":"parent_span","external_name":"parent_span","restriction":"Span | ::Nil"}],"visibility":"Public","body":"@parent_span = parent_span"}},{"html_id":"set_attribute(key,value)-instance-method","name":"set_attribute","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(key, value)","args_html":"(key, value)","location":{"filename":"src/opentelemetry-api/event.cr","line_number":39,"url":null},"def":{"name":"set_attribute","args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"self[key] = value"}},{"html_id":"time_unix_nano-instance-method","name":"time_unix_nano","abstract":false,"location":{"filename":"src/opentelemetry-api/event.cr","line_number":51,"url":null},"def":{"name":"time_unix_nano","visibility":"Public","body":"(wall_timestamp - Time::UNIX_EPOCH).total_nanoseconds.to_u64"}},{"html_id":"timestamp:Time::Span-instance-method","name":"timestamp","abstract":false,"location":{"filename":"src/opentelemetry-api/event.cr","line_number":6,"url":null},"def":{"name":"timestamp","return_type":"Time::Span","visibility":"Public","body":"@timestamp"}},{"html_id":"timestamp=(timestamp:Time::Span)-instance-method","name":"timestamp=","abstract":false,"args":[{"name":"timestamp","external_name":"timestamp","restriction":"Time::Span"}],"args_string":"(timestamp : Time::Span)","args_html":"(timestamp : Time::Span)","location":{"filename":"src/opentelemetry-api/event.cr","line_number":6,"url":null},"def":{"name":"timestamp=","args":[{"name":"timestamp","external_name":"timestamp","restriction":"Time::Span"}],"visibility":"Public","body":"@timestamp = timestamp"}},{"html_id":"to_json-instance-method","name":"to_json","abstract":false,"location":{"filename":"src/opentelemetry-api/event.cr","line_number":66,"url":null},"def":{"name":"to_json","visibility":"Public","body":"String.build do |json|\n  json << \"    {\\n\"\n  json << \"          \\\"type\\\": \\\"event\\\",\\n\"\n  json << \"          \\\"name\\\": \\\"#{name}\\\",\\n\"\n  if !attributes.empty?\n    json << \"          \\\"attributes\\\":{\\n\"\n    json << (String.build do |attr_json|\n      attributes.each do |_, value|\n        attr_json << \"            #{value.to_json},\\n\"\n      end\n    end.chomp(\",\\n\"))\n    json << \"\\n          },\\n\"\n  end\n  json << \"          \\\"timestamp\\\": #{time_unix_nano}\\n\"\n  json << \"        }\"\nend"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"location":{"filename":"src/opentelemetry-api/event.cr","line_number":55,"url":null},"def":{"name":"to_protobuf","visibility":"Public","body":"Proto::Trace::V1::Span::Event.new(name: name, time_unix_nano: time_unix_nano, attributes: attributes.map do |key, value|\n  Proto::Common::V1::KeyValue.new(key: key, value: Attribute.to_anyvalue(value))\nend)"}},{"html_id":"wall_timestamp:Time-instance-method","name":"wall_timestamp","abstract":false,"location":{"filename":"src/opentelemetry-api/event.cr","line_number":7,"url":null},"def":{"name":"wall_timestamp","return_type":"Time","visibility":"Public","body":"@wall_timestamp"}},{"html_id":"wall_timestamp=(wall_timestamp:Time)-instance-method","name":"wall_timestamp=","abstract":false,"args":[{"name":"wall_timestamp","external_name":"wall_timestamp","restriction":"Time"}],"args_string":"(wall_timestamp : Time)","args_html":"(wall_timestamp : Time)","location":{"filename":"src/opentelemetry-api/event.cr","line_number":7,"url":null},"def":{"name":"wall_timestamp=","args":[{"name":"wall_timestamp","external_name":"wall_timestamp","restriction":"Time"}],"visibility":"Public","body":"@wall_timestamp = wall_timestamp"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Exporter","path":"OpenTelemetry/Exporter.html","kind":"class","full_name":"OpenTelemetry::Exporter","name":"Exporter","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/exporter.cr","line_number":4,"url":null},{"filename":"src/exporters/abstract.cr","line_number":4,"url":null},{"filename":"src/exporters/base.cr","line_number":4,"url":null},{"filename":"src/exporters/buffered_base.cr","line_number":4,"url":null},{"filename":"src/exporters/buffered_exporter.cr","line_number":4,"url":null},{"filename":"src/exporters/http.cr","line_number":24,"url":null},{"filename":"src/exporters/io.cr","line_number":5,"url":null},{"filename":"src/exporters/null.cr","line_number":5,"url":null},{"filename":"src/exporters/stdout.cr","line_number":4,"url":null},{"filename":"src/exporters/unbuffered_exporter.cr","line_number":2,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"constructors":[{"html_id":"new(variant:String|Symbol,&)-class-method","name":"new","abstract":false,"args":[{"name":"variant","external_name":"variant","restriction":"String | Symbol"}],"args_string":"(variant : String | Symbol, &)","args_html":"(variant : <a href=\"../String.html\">String</a> | Symbol, &)","location":{"filename":"src/exporter.cr","line_number":14,"url":null},"def":{"name":"new","args":[{"name":"variant","external_name":"variant","restriction":"String | Symbol"}],"yields":1,"visibility":"Public","body":"_ = allocate\n_.initialize(variant) do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(variant:String|Symbol=:null,*args,**kwargs)-class-method","name":"new","abstract":false,"args":[{"name":"variant","default_value":":null","external_name":"variant","restriction":"String | Symbol"},{"name":"args","external_name":"args","restriction":""}],"args_string":"(variant : String | Symbol = :null, *args, **kwargs)","args_html":"(variant : <a href=\"../String.html\">String</a> | Symbol = <span class=\"n\">:null</span>, *args, **kwargs)","location":{"filename":"src/exporter.cr","line_number":46,"url":null},"def":{"name":"new","args":[{"name":"variant","default_value":":null","external_name":"variant","restriction":"String | Symbol"},{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"kwargs","external_name":"kwargs","restriction":""},"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(variant, *args, **kwargs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"export(elements:Array(Elements))-instance-method","name":"export","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":"Array(Elements)"}],"args_string":"(elements : Array(Elements))","args_html":"(elements : Array(<a href=\"../OpenTelemetry/Exporter/Elements.html\">Elements</a>))","location":{"filename":"src/exporter.cr","line_number":63,"url":null},"def":{"name":"export","args":[{"name":"elements","external_name":"elements","restriction":"Array(Elements)"}],"visibility":"Public","body":"@exporter.export(elements)"}},{"html_id":"export(element:Elements)-instance-method","name":"export","abstract":false,"args":[{"name":"element","external_name":"element","restriction":"Elements"}],"args_string":"(element : Elements)","args_html":"(element : <a href=\"../OpenTelemetry/Exporter/Elements.html\">Elements</a>)","location":{"filename":"src/exporter.cr","line_number":67,"url":null},"def":{"name":"export","args":[{"name":"element","external_name":"element","restriction":"Elements"}],"visibility":"Public","body":"@exporter.export(element)"}},{"html_id":"exporter:Exporter::Abstract|Exporter::Null|Exporter::Http|Exporter::Stdout|Exporter::IO-instance-method","name":"exporter","abstract":false,"location":{"filename":"src/exporter.cr","line_number":8,"url":null},"def":{"name":"exporter","return_type":"Exporter::Abstract | Exporter::Null | Exporter::Http | Exporter::Stdout | Exporter::IO","visibility":"Public","body":"@exporter"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/Base","path":"OpenTelemetry/Exporter/Base.html","kind":"class","full_name":"OpenTelemetry::Exporter::Base","name":"Base","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/UnbufferedExporter","kind":"module","full_name":"OpenTelemetry::Exporter::UnbufferedExporter","name":"UnbufferedExporter"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/exporters/base.cr","line_number":5,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/UnbufferedExporter","kind":"module","full_name":"OpenTelemetry::Exporter::UnbufferedExporter","name":"UnbufferedExporter"}],"subclasses":[{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/IO","kind":"class","full_name":"OpenTelemetry::Exporter::IO","name":"IO"},{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/Null","kind":"class","full_name":"OpenTelemetry::Exporter::Null","name":"Null"},{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/Stdout","kind":"class","full_name":"OpenTelemetry::Exporter::Stdout","name":"Stdout"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Exporter","kind":"class","full_name":"OpenTelemetry::Exporter","name":"Exporter"},"instance_methods":[{"html_id":"handle(elements:Array(Elements))-instance-method","name":"handle","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":"Array(Elements)"}],"args_string":"(elements : Array(Elements))","args_html":"(elements : Array(<a href=\"../../OpenTelemetry/Exporter/Elements.html\">Elements</a>))","location":{"filename":"src/exporters/base.cr","line_number":12,"url":null},"def":{"name":"handle","args":[{"name":"elements","external_name":"elements","restriction":"Array(Elements)"}],"visibility":"Public","body":"raise(NotImplementedError.new(\"Exporter::Abstract.handle not implemented; this class is not intended to be used externally\"))"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/BufferedBase","path":"OpenTelemetry/Exporter/BufferedBase.html","kind":"class","full_name":"OpenTelemetry::Exporter::BufferedBase","name":"BufferedBase","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/BufferedExporter","kind":"module","full_name":"OpenTelemetry::Exporter::BufferedExporter","name":"BufferedExporter"},{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/UnbufferedExporter","kind":"module","full_name":"OpenTelemetry::Exporter::UnbufferedExporter","name":"UnbufferedExporter"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/exporters/buffered_base.cr","line_number":5,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/BufferedExporter","kind":"module","full_name":"OpenTelemetry::Exporter::BufferedExporter","name":"BufferedExporter"}],"subclasses":[{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/Http","kind":"class","full_name":"OpenTelemetry::Exporter::Http","name":"Http"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Exporter","kind":"class","full_name":"OpenTelemetry::Exporter","name":"Exporter"},"instance_methods":[{"html_id":"handle(elements:Array(Elements))-instance-method","name":"handle","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":"Array(Elements)"}],"args_string":"(elements : Array(Elements))","args_html":"(elements : Array(<a href=\"../../OpenTelemetry/Exporter/Elements.html\">Elements</a>))","location":{"filename":"src/exporters/buffered_base.cr","line_number":12,"url":null},"def":{"name":"handle","args":[{"name":"elements","external_name":"elements","restriction":"Array(Elements)"}],"visibility":"Public","body":"raise(NotImplementedError.new(\"Exporter::Abstract.handle not implemented; this class is not intended to be used externally\"))"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/BufferedExporter","path":"OpenTelemetry/Exporter/BufferedExporter.html","kind":"module","full_name":"OpenTelemetry::Exporter::BufferedExporter","name":"BufferedExporter","abstract":false,"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/UnbufferedExporter","kind":"module","full_name":"OpenTelemetry::Exporter::UnbufferedExporter","name":"UnbufferedExporter"}],"locations":[{"filename":"src/exporters/buffered_exporter.cr","line_number":9,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/UnbufferedExporter","kind":"module","full_name":"OpenTelemetry::Exporter::UnbufferedExporter","name":"UnbufferedExporter"}],"including_types":[{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/BufferedBase","kind":"class","full_name":"OpenTelemetry::Exporter::BufferedBase","name":"BufferedBase"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Exporter","kind":"class","full_name":"OpenTelemetry::Exporter","name":"Exporter"},"doc":"A BufferedExporter provides a channel that can receive data to export,\ndefines a `start` method that will spawn a fiber to consume data that\nenters the channel, and a `handle` method that will handle each data\nelement as it is received.","summary":"<p>A BufferedExporter provides a channel that can receive data to export, defines a <code>start</code> method that will spawn a fiber to consume data that enters the channel, and a <code>handle</code> method that will handle each data element as it is received.</p>","instance_methods":[{"html_id":"batch_interval-instance-method","name":"batch_interval","abstract":false,"location":{"filename":"src/exporters/buffered_exporter.cr","line_number":15,"url":null},"def":{"name":"batch_interval","visibility":"Public","body":"@batch_interval"}},{"html_id":"batch_interval=(batch_interval)-instance-method","name":"batch_interval=","abstract":false,"args":[{"name":"batch_interval","external_name":"batch_interval","restriction":""}],"args_string":"(batch_interval)","args_html":"(batch_interval)","location":{"filename":"src/exporters/buffered_exporter.cr","line_number":15,"url":null},"def":{"name":"batch_interval=","args":[{"name":"batch_interval","external_name":"batch_interval","restriction":""}],"visibility":"Public","body":"@batch_interval = batch_interval"}},{"html_id":"batch_latency-instance-method","name":"batch_latency","abstract":false,"location":{"filename":"src/exporters/buffered_exporter.cr","line_number":14,"url":null},"def":{"name":"batch_latency","visibility":"Public","body":"@batch_latency"}},{"html_id":"batch_latency=(batch_latency)-instance-method","name":"batch_latency=","abstract":false,"args":[{"name":"batch_latency","external_name":"batch_latency","restriction":""}],"args_string":"(batch_latency)","args_html":"(batch_latency)","location":{"filename":"src/exporters/buffered_exporter.cr","line_number":14,"url":null},"def":{"name":"batch_latency=","args":[{"name":"batch_latency","external_name":"batch_latency","restriction":""}],"visibility":"Public","body":"@batch_latency = batch_latency"}},{"html_id":"batch_threshold-instance-method","name":"batch_threshold","abstract":false,"location":{"filename":"src/exporters/buffered_exporter.cr","line_number":13,"url":null},"def":{"name":"batch_threshold","visibility":"Public","body":"@batch_threshold"}},{"html_id":"batch_threshold=(batch_threshold)-instance-method","name":"batch_threshold=","abstract":false,"args":[{"name":"batch_threshold","external_name":"batch_threshold","restriction":""}],"args_string":"(batch_threshold)","args_html":"(batch_threshold)","location":{"filename":"src/exporters/buffered_exporter.cr","line_number":13,"url":null},"def":{"name":"batch_threshold=","args":[{"name":"batch_threshold","external_name":"batch_threshold","restriction":""}],"visibility":"Public","body":"@batch_threshold = batch_threshold"}},{"html_id":"loop_and_receive-instance-method","name":"loop_and_receive","abstract":false,"location":{"filename":"src/exporters/buffered_exporter.cr","line_number":17,"url":null},"def":{"name":"loop_and_receive","visibility":"Public","body":"elements = [] of Elements\nelements_size = 0\nmark = Time.monotonic\noldsize = 0\nlast_inspect = Time.monotonic\nloop do\n  while elements_size < @batch_threshold && (element = @buffer.receive?)\n    elements << element\n    elements_size = elements_size + element.size\n  end\n  if (oldsize != elements.size) || (Time.monotonic - last_inspect).seconds > 1\n    oldsize = elements.size\n    last_inspect = Time.monotonic\n    {% if flag?(:DEBUG) %}\n              puts \"#{elements.size} >= #{@batch_threshold} || #{(Time.monotonic - mark).seconds} >= #{@batch_latency}\"\n            {% end %}\n  end\n  if elements.size >= @batch_threshold || (Time.monotonic - mark).seconds >= @batch_latency\n    handle(elements)\n    elements.clear\n    elements_size = 0\n    mark = Time.monotonic\n  end\n  sleep(0.01)\nend\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/Elements","path":"OpenTelemetry/Exporter/Elements.html","kind":"alias","full_name":"OpenTelemetry::Exporter::Elements","name":"Elements","abstract":false,"locations":[{"filename":"src/exporter.cr","line_number":7,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":true,"aliased":"OpenTelemetry::Trace","aliased_html":"<a href=\"../../OpenTelemetry/Trace.html\">OpenTelemetry::Trace</a>","const":false,"constants":[{"id":"MATCH","name":"MATCH","value":"/(?<trace_id>[A-Fa-f0-9]{32})/"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Exporter","kind":"class","full_name":"OpenTelemetry::Exporter","name":"Exporter"},"doc":"As other data types, like metrics or logs are added, expand this aliase\nto be a union that supports them, as well.","summary":"<p>As other data types, like metrics or logs are added, expand this aliase to be a union that supports them, as well.</p>"},{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/Http","path":"OpenTelemetry/Exporter/Http.html","kind":"class","full_name":"OpenTelemetry::Exporter::Http","name":"Http","abstract":false,"superclass":{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/BufferedBase","kind":"class","full_name":"OpenTelemetry::Exporter::BufferedBase","name":"BufferedBase"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/BufferedBase","kind":"class","full_name":"OpenTelemetry::Exporter::BufferedBase","name":"BufferedBase"},{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/BufferedExporter","kind":"module","full_name":"OpenTelemetry::Exporter::BufferedExporter","name":"BufferedExporter"},{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/UnbufferedExporter","kind":"module","full_name":"OpenTelemetry::Exporter::UnbufferedExporter","name":"UnbufferedExporter"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/exporters/http.cr","line_number":25,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Exporter","kind":"class","full_name":"OpenTelemetry::Exporter","name":"Exporter"},"constructors":[{"html_id":"new(endpoint:String?=nil,_headers:HTTP::Headers?=nil,_clients:DB::Pool(HTTP::Client)?=nil,*_junk,**_kwjunk)-class-method","name":"new","abstract":false,"args":[{"name":"endpoint","default_value":"nil","external_name":"endpoint","restriction":"String | ::Nil"},{"name":"_headers","default_value":"nil","external_name":"_headers","restriction":"HTTP::Headers | ::Nil"},{"name":"_clients","default_value":"nil","external_name":"_clients","restriction":"DB::Pool(HTTP::Client) | ::Nil"},{"name":"_junk","external_name":"_junk","restriction":""}],"args_string":"(endpoint : String? = nil, _headers : HTTP::Headers? = nil, _clients : DB::Pool(HTTP::Client)? = nil, *_junk, **_kwjunk)","args_html":"(endpoint : <a href=\"../../String.html\">String</a>? = <span class=\"n\">nil</span>, _headers : HTTP::Headers? = <span class=\"n\">nil</span>, _clients : DB::Pool(HTTP::Client)? = <span class=\"n\">nil</span>, *_junk, **_kwjunk)","location":{"filename":"src/exporters/http.cr","line_number":34,"url":null},"def":{"name":"new","args":[{"name":"endpoint","default_value":"nil","external_name":"endpoint","restriction":"String | ::Nil"},{"name":"_headers","default_value":"nil","external_name":"_headers","restriction":"HTTP::Headers | ::Nil"},{"name":"_clients","default_value":"nil","external_name":"_clients","restriction":"DB::Pool(HTTP::Client) | ::Nil"},{"name":"_junk","external_name":"_junk","restriction":""}],"double_splat":{"name":"_kwjunk","external_name":"_kwjunk","restriction":""},"splat_index":3,"visibility":"Public","body":"_ = allocate\n_.initialize(endpoint, _headers, _clients, *_junk, **_kwjunk)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(&)-class-method","name":"new","abstract":false,"location":{"filename":"src/exporters/http.cr","line_number":47,"url":null},"def":{"name":"new","yields":1,"visibility":"Public","body":"_ = allocate\n_.initialize do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clients:DB::Pool(HTTP::Client)-instance-method","name":"clients","abstract":false,"location":{"filename":"src/exporters/http.cr","line_number":26,"url":null},"def":{"name":"clients","return_type":"DB::Pool(HTTP::Client)","visibility":"Public","body":"@clients"}},{"html_id":"clients=(clients:DB::Pool(HTTP::Client))-instance-method","name":"clients=","abstract":false,"args":[{"name":"clients","external_name":"clients","restriction":"DB::Pool(HTTP::Client)"}],"args_string":"(clients : DB::Pool(HTTP::Client))","args_html":"(clients : DB::Pool(HTTP::Client))","location":{"filename":"src/exporters/http.cr","line_number":26,"url":null},"def":{"name":"clients=","args":[{"name":"clients","external_name":"clients","restriction":"DB::Pool(HTTP::Client)"}],"visibility":"Public","body":"@clients = clients"}},{"html_id":"collate(elements)-instance-method","name":"collate","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":""}],"args_string":"(elements)","args_html":"(elements)","location":{"filename":"src/exporters/http.cr","line_number":164,"url":null},"def":{"name":"collate","args":[{"name":"elements","external_name":"elements","restriction":""}],"visibility":"Public","body":"batches = {traces: [] of Proto::Trace::V1::ResourceSpans}\nelements.each do |element|\n  case element\n  when Trace\n    pb_or_nil = element.to_protobuf\n    if pb_or_nil\n      batches[:traces] << pb_or_nil\n    end\n  end\nend\nbatches\n"}},{"html_id":"endpoint:URI-instance-method","name":"endpoint","abstract":false,"location":{"filename":"src/exporters/http.cr","line_number":104,"url":null},"def":{"name":"endpoint","visibility":"Public","body":"@endpoint_uri"}},{"html_id":"endpoint=(uri:String)-instance-method","name":"endpoint=","abstract":false,"args":[{"name":"uri","external_name":"uri","restriction":"String"}],"args_string":"(uri : String)","args_html":"(uri : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/exporters/http.cr","line_number":113,"url":null},"def":{"name":"endpoint=","args":[{"name":"uri","external_name":"uri","restriction":"String"}],"visibility":"Public","body":"@endpoint_uri = URI.parse(uri)\nif @endpoint_uri.path.empty?\n  @endpoint_uri.path = \"/\"\nend\n"}},{"html_id":"endpoint=(uri:Uri)-instance-method","name":"endpoint=","abstract":false,"args":[{"name":"uri","external_name":"uri","restriction":"Uri"}],"args_string":"(uri : Uri)","args_html":"(uri : Uri)","location":{"filename":"src/exporters/http.cr","line_number":108,"url":null},"def":{"name":"endpoint=","args":[{"name":"uri","external_name":"uri","restriction":"Uri"}],"visibility":"Public","body":"@endpoint_uri = uri\nif @endpoint_uri.path.empty?\n  @endpoint_uri.path = \"/\"\nend\n"}},{"html_id":"endpoint_uri:URI-instance-method","name":"endpoint_uri","abstract":false,"location":{"filename":"src/exporters/http.cr","line_number":29,"url":null},"def":{"name":"endpoint_uri","return_type":"URI","visibility":"Public","body":"@endpoint_uri"}},{"html_id":"endpoint_uri=(endpoint_uri:URI)-instance-method","name":"endpoint_uri=","abstract":false,"args":[{"name":"endpoint_uri","external_name":"endpoint_uri","restriction":"URI"}],"args_string":"(endpoint_uri : URI)","args_html":"(endpoint_uri : URI)","location":{"filename":"src/exporters/http.cr","line_number":29,"url":null},"def":{"name":"endpoint_uri=","args":[{"name":"endpoint_uri","external_name":"endpoint_uri","restriction":"URI"}],"visibility":"Public","body":"@endpoint_uri = endpoint_uri"}},{"html_id":"generate_payload(request)-instance-method","name":"generate_payload","abstract":false,"args":[{"name":"request","external_name":"request","restriction":""}],"args_string":"(request)","args_html":"(request)","location":{"filename":"src/exporters/http.cr","line_number":160,"url":null},"def":{"name":"generate_payload","args":[{"name":"request","external_name":"request","restriction":""}],"visibility":"Public","body":"request.to_slice"}},{"html_id":"handle(elements:Array(Elements))-instance-method","name":"handle","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":"Array(Elements)"}],"args_string":"(elements : Array(Elements))","args_html":"(elements : Array(<a href=\"../../OpenTelemetry/Exporter/Elements.html\">Elements</a>))","location":{"filename":"src/exporters/http.cr","line_number":118,"url":null},"def":{"name":"handle","args":[{"name":"elements","external_name":"elements","restriction":"Array(Elements)"}],"visibility":"Public","body":"batches = collate(elements)\nif batches[:traces].empty?\nelse\n  begin\n    body = generate_payload(Proto::Collector::Trace::V1::ExportTraceServiceRequest.new(resource_spans: batches[:traces]).to_protobuf)\n  rescue ex : Exception\n    puts(\"Failed to generate payload: #{ex}\")\n    return\n  end\n  begin\n    Retriable.retry(max_attempts: 5) do\n      @clients.checkout do |client|\n        OpenTelemetry.trace.in_span(\"Send OTLP/HTTP to Ingest\") do |span|\n          if !ENV[\"OTEL_CRYSTAL_ENABLE_INSTRUMENTATION_SELF\"]?\n            span.is_recording = false\n          else\n            span.is_recording = true\n          end\n          response = client.post(@endpoint_uri.path, body: body)\n          {% if true %}\n                    {% if flag?(:DEBUG) %}\n                      pp response\n                    {% end %}\n                  {% end %}\n        end\n      end\n    end\n  rescue ex\n    puts(\"Failed to send payload: #{ex}\")\n  end\nend\n"}},{"html_id":"headers:HTTP::Headers-instance-method","name":"headers","abstract":false,"location":{"filename":"src/exporters/http.cr","line_number":28,"url":null},"def":{"name":"headers","return_type":"HTTP::Headers","visibility":"Public","body":"@headers"}},{"html_id":"headers=(headers:HTTP::Headers)-instance-method","name":"headers=","abstract":false,"args":[{"name":"headers","external_name":"headers","restriction":"HTTP::Headers"}],"args_string":"(headers : HTTP::Headers)","args_html":"(headers : HTTP::Headers)","location":{"filename":"src/exporters/http.cr","line_number":28,"url":null},"def":{"name":"headers=","args":[{"name":"headers","external_name":"headers","restriction":"HTTP::Headers"}],"visibility":"Public","body":"@headers = headers"}},{"html_id":"initialize_client_pool-instance-method","name":"initialize_client_pool","abstract":false,"location":{"filename":"src/exporters/http.cr","line_number":55,"url":null},"def":{"name":"initialize_client_pool","visibility":"Public","body":"if @clients_are_initialized\n  return\nend\n@clients = DB::Pool(HTTP::Client).new do\n  client = HTTP::Client.new(@endpoint_uri)\n  client.before_request do |request|\n    setup_standard_headers(request.headers)\n  end\n  client\nend\n@clients_are_initialized = true\n"}},{"html_id":"setup_standard_headers(headers)-instance-method","name":"setup_standard_headers","doc":"For other HTTP based protocols, such as gRPC, this method should be\noverridden to set the appropriate protocol specific headers.","summary":"<p>For other HTTP based protocols, such as gRPC, this method should be overridden to set the appropriate protocol specific headers.</p>","abstract":false,"args":[{"name":"headers","external_name":"headers","restriction":""}],"args_string":"(headers)","args_html":"(headers)","location":{"filename":"src/exporters/http.cr","line_number":71,"url":null},"def":{"name":"setup_standard_headers","args":[{"name":"headers","external_name":"headers","restriction":""}],"visibility":"Public","body":"headers[\"Content-Type\"] = \"application/x-protobuf\"\nheaders[\"Connection\"] = \"keep-alive\"\nadd_env_based_headers(headers)\n@headers.each do |key, value|\n  headers[key] = value\nend\nheaders\n"}},{"html_id":"user_agent-instance-method","name":"user_agent","abstract":false,"location":{"filename":"src/exporters/http.cr","line_number":180,"url":null},"def":{"name":"user_agent","visibility":"Public","body":"\"OpenTelemetry/Crystal #{VERSION}\""}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/IO","path":"OpenTelemetry/Exporter/IO.html","kind":"class","full_name":"OpenTelemetry::Exporter::IO","name":"IO","abstract":false,"superclass":{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/Base","kind":"class","full_name":"OpenTelemetry::Exporter::Base","name":"Base"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/Base","kind":"class","full_name":"OpenTelemetry::Exporter::Base","name":"Base"},{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/UnbufferedExporter","kind":"module","full_name":"OpenTelemetry::Exporter::UnbufferedExporter","name":"UnbufferedExporter"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/exporters/io.cr","line_number":6,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Exporter","kind":"class","full_name":"OpenTelemetry::Exporter","name":"Exporter"},"constructors":[{"html_id":"new(io:::IO|::IO::Memory=::IO::Memory.new,*_junk,**_kwjunk)-class-method","name":"new","abstract":false,"args":[{"name":"io","default_value":"::IO::Memory.new","external_name":"io","restriction":"::IO | ::IO::Memory"},{"name":"_junk","external_name":"_junk","restriction":""}],"args_string":"(io : ::IO | ::IO::Memory = ::IO::Memory.new, *_junk, **_kwjunk)","args_html":"(io : ::IO | ::IO::Memory = <span class=\"t\">::</span><span class=\"t\">IO</span><span class=\"t\">::</span><span class=\"t\">Memory</span>.<span class=\"k\">new</span>, *_junk, **_kwjunk)","location":{"filename":"src/exporters/io.cr","line_number":9,"url":null},"def":{"name":"new","args":[{"name":"io","default_value":"::IO::Memory.new","external_name":"io","restriction":"::IO | ::IO::Memory"},{"name":"_junk","external_name":"_junk","restriction":""}],"double_splat":{"name":"_kwjunk","external_name":"_kwjunk","restriction":""},"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(io, *_junk, **_kwjunk)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(&)-class-method","name":"new","abstract":false,"location":{"filename":"src/exporters/io.cr","line_number":13,"url":null},"def":{"name":"new","yields":1,"visibility":"Public","body":"_ = allocate\n_.initialize do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"handle(elements:Array(Elements))-instance-method","name":"handle","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":"Array(Elements)"}],"args_string":"(elements : Array(Elements))","args_html":"(elements : Array(<a href=\"../../OpenTelemetry/Exporter/Elements.html\">Elements</a>))","location":{"filename":"src/exporters/io.cr","line_number":18,"url":null},"def":{"name":"handle","args":[{"name":"elements","external_name":"elements","restriction":"Array(Elements)"}],"visibility":"Public","body":"if io_not_nil = io\n  elements.each do |element|\n    io_not_nil << element.to_json.to_s\n  end\nend"}},{"html_id":"io:::IO|::IO::Memory|Nil-instance-method","name":"io","abstract":false,"location":{"filename":"src/exporters/io.cr","line_number":7,"url":null},"def":{"name":"io","return_type":"::IO | ::IO::Memory | Nil","visibility":"Public","body":"@io"}},{"html_id":"io=(io:::IO|::IO::Memory|Nil)-instance-method","name":"io=","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"::IO | ::IO::Memory | Nil"}],"args_string":"(io : ::IO | ::IO::Memory | Nil)","args_html":"(io : ::IO | ::IO::Memory | Nil)","location":{"filename":"src/exporters/io.cr","line_number":7,"url":null},"def":{"name":"io=","args":[{"name":"io","external_name":"io","restriction":"::IO | ::IO::Memory | Nil"}],"visibility":"Public","body":"@io = io"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/Null","path":"OpenTelemetry/Exporter/Null.html","kind":"class","full_name":"OpenTelemetry::Exporter::Null","name":"Null","abstract":false,"superclass":{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/Base","kind":"class","full_name":"OpenTelemetry::Exporter::Base","name":"Base"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/Base","kind":"class","full_name":"OpenTelemetry::Exporter::Base","name":"Base"},{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/UnbufferedExporter","kind":"module","full_name":"OpenTelemetry::Exporter::UnbufferedExporter","name":"UnbufferedExporter"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/exporters/null.cr","line_number":8,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Exporter","kind":"class","full_name":"OpenTelemetry::Exporter","name":"Exporter"},"doc":"This implements an exporter that simply eats data, sending it into oblivion.\nIt will, however, log what it consumes if compiled with -DDEBUG.","summary":"<p>This implements an exporter that simply eats data, sending it into oblivion.</p>","instance_methods":[{"html_id":"handle(elements:Array(Elements))-instance-method","name":"handle","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":"Array(Elements)"}],"args_string":"(elements : Array(Elements))","args_html":"(elements : Array(<a href=\"../../OpenTelemetry/Exporter/Elements.html\">Elements</a>))","location":{"filename":"src/exporters/null.cr","line_number":9,"url":null},"def":{"name":"handle","args":[{"name":"elements","external_name":"elements","restriction":"Array(Elements)"}],"visibility":"Public","body":"{% if true %}\n        {% if flag?(:DEBUG) %}\n        elements.each do |element|\n          output = element.to_json\n          puts \"\\n#{\"DEBUG - #{Time.local}:\\n\".colorize(:green)} #{output}\"\n        end\n        {% end %}\n        {% end %}"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/Stdout","path":"OpenTelemetry/Exporter/Stdout.html","kind":"class","full_name":"OpenTelemetry::Exporter::Stdout","name":"Stdout","abstract":false,"superclass":{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/Base","kind":"class","full_name":"OpenTelemetry::Exporter::Base","name":"Base"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/Base","kind":"class","full_name":"OpenTelemetry::Exporter::Base","name":"Base"},{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/UnbufferedExporter","kind":"module","full_name":"OpenTelemetry::Exporter::UnbufferedExporter","name":"UnbufferedExporter"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/exporters/stdout.cr","line_number":5,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Exporter","kind":"class","full_name":"OpenTelemetry::Exporter","name":"Exporter"},"instance_methods":[{"html_id":"handle(elements:Array(Elements))-instance-method","name":"handle","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":"Array(Elements)"}],"args_string":"(elements : Array(Elements))","args_html":"(elements : Array(<a href=\"../../OpenTelemetry/Exporter/Elements.html\">Elements</a>))","location":{"filename":"src/exporters/stdout.cr","line_number":6,"url":null},"def":{"name":"handle","args":[{"name":"elements","external_name":"elements","restriction":"Array(Elements)"}],"visibility":"Public","body":"elements.each do |element|\n  puts(element.to_json)\nend"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/UnbufferedExporter","path":"OpenTelemetry/Exporter/UnbufferedExporter.html","kind":"module","full_name":"OpenTelemetry::Exporter::UnbufferedExporter","name":"UnbufferedExporter","abstract":false,"locations":[{"filename":"src/exporters/unbuffered_exporter.cr","line_number":10,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/Base","kind":"class","full_name":"OpenTelemetry::Exporter::Base","name":"Base"},{"html_id":"opentelemetry-api/OpenTelemetry/Exporter/BufferedExporter","kind":"module","full_name":"OpenTelemetry::Exporter::BufferedExporter","name":"BufferedExporter"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Exporter","kind":"class","full_name":"OpenTelemetry::Exporter","name":"Exporter"},"doc":"This module provides the base implementation for building exporters. It\nprovides a Channel into which data elements to be exported are sent. It\nalso defines a `start` method that will create a fiber which will listen\non this channel for data waiting to be exported. That fiber will consume\nthe element, and pass it to a `handle` method for actual dispatch.\nIt is expected that subclasses will override at least the `handle` method\nwith their own functionality.","summary":"<p>This module provides the base implementation for building exporters.</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/exporters/unbuffered_exporter.cr","line_number":13,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(&)-class-method","name":"new","abstract":false,"location":{"filename":"src/exporters/unbuffered_exporter.cr","line_number":17,"url":null},"def":{"name":"new","yields":1,"visibility":"Public","body":"_ = allocate\n_.initialize do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"export(elements:Array(Elements))-instance-method","name":"export","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":"Array(Elements)"}],"args_string":"(elements : Array(Elements))","args_html":"(elements : Array(<a href=\"../../OpenTelemetry/Exporter/Elements.html\">Elements</a>))","location":{"filename":"src/exporters/unbuffered_exporter.cr","line_number":22,"url":null},"def":{"name":"export","args":[{"name":"elements","external_name":"elements","restriction":"Array(Elements)"}],"visibility":"Public","body":"elements.each do |element|\n  @buffer.send(element)\nend"}},{"html_id":"export(element:Elements)-instance-method","name":"export","abstract":false,"args":[{"name":"element","external_name":"element","restriction":"Elements"}],"args_string":"(element : Elements)","args_html":"(element : <a href=\"../../OpenTelemetry/Exporter/Elements.html\">Elements</a>)","location":{"filename":"src/exporters/unbuffered_exporter.cr","line_number":28,"url":null},"def":{"name":"export","args":[{"name":"element","external_name":"element","restriction":"Elements"}],"visibility":"Public","body":"@buffer.send(element)"}},{"html_id":"handle(elements:Array(Elements))-instance-method","name":"handle","abstract":true,"args":[{"name":"elements","external_name":"elements","restriction":"Array(Elements)"}],"args_string":"(elements : Array(Elements))","args_html":"(elements : Array(<a href=\"../../OpenTelemetry/Exporter/Elements.html\">Elements</a>))","location":{"filename":"src/exporters/unbuffered_exporter.cr","line_number":58,"url":null},"def":{"name":"handle","args":[{"name":"elements","external_name":"elements","restriction":"Array(Elements)"}],"visibility":"Public","body":""}},{"html_id":"handle(element)-instance-method","name":"handle","abstract":false,"args":[{"name":"element","external_name":"element","restriction":""}],"args_string":"(element)","args_html":"(element)","location":{"filename":"src/exporters/unbuffered_exporter.cr","line_number":53,"url":null},"def":{"name":"handle","args":[{"name":"element","external_name":"element","restriction":""}],"visibility":"Public","body":"inject_telemetry_attributes(element)\nhandle([element])\n"}},{"html_id":"inject_telemetry_attributes(element)-instance-method","name":"inject_telemetry_attributes","abstract":false,"args":[{"name":"element","external_name":"element","restriction":""}],"args_string":"(element)","args_html":"(element)","location":{"filename":"src/exporters/unbuffered_exporter.cr","line_number":46,"url":null},"def":{"name":"inject_telemetry_attributes","args":[{"name":"element","external_name":"element","restriction":""}],"visibility":"Public","body":"element[\"telemetry.sdk.name\"] = \"opentelemetry\"\nelement[\"telemetry.sdk.language\"] = \"crystal\"\nelement[\"telemetry.sdk.version\"] = OpenTelemetry::VERSION\n"}},{"html_id":"loop_and_receive-instance-method","name":"loop_and_receive","abstract":false,"location":{"filename":"src/exporters/unbuffered_exporter.cr","line_number":36,"url":null},"def":{"name":"loop_and_receive","visibility":"Public","body":"loop do\n  while element = @buffer.receive?\n    handle(element)\n  end\n  sleep(0.01)\nend"}},{"html_id":"start-instance-method","name":"start","abstract":false,"location":{"filename":"src/exporters/unbuffered_exporter.cr","line_number":32,"url":null},"def":{"name":"start","visibility":"Public","body":"spawn(loop_and_receive)"}}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/IdGenerator","path":"OpenTelemetry/IdGenerator.html","kind":"struct","full_name":"OpenTelemetry::IdGenerator","name":"IdGenerator","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/id_generator.cr","line_number":14,"url":null},{"filename":"src/opentelemetry-api/id_generator/base.cr","line_number":4,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"doc":"This is the abstract base implementation for an ID Generator. Other ID Generators\nshould inherit from this class to implement the interface prescribed here.","summary":"<p>This is the abstract base implementation for an ID Generator.</p>","class_methods":[{"html_id":"generator:OpenTelemetry::IdGenerator::Base-class-method","name":"generator","abstract":false,"location":{"filename":"src/opentelemetry-api/id_generator.cr","line_number":16,"url":null},"def":{"name":"generator","return_type":"OpenTelemetry::IdGenerator::Base","visibility":"Public","body":"@@generator"}},{"html_id":"generator=(generator:OpenTelemetry::IdGenerator::Base)-class-method","name":"generator=","abstract":false,"args":[{"name":"generator","external_name":"generator","restriction":"OpenTelemetry::IdGenerator::Base"}],"args_string":"(generator : OpenTelemetry::IdGenerator::Base)","args_html":"(generator : <a href=\"../OpenTelemetry/IdGenerator/Base.html\">OpenTelemetry::IdGenerator::Base</a>)","location":{"filename":"src/opentelemetry-api/id_generator.cr","line_number":16,"url":null},"def":{"name":"generator=","args":[{"name":"generator","external_name":"generator","restriction":"OpenTelemetry::IdGenerator::Base"}],"visibility":"Public","body":"@@generator = generator"}},{"html_id":"span_id-class-method","name":"span_id","abstract":false,"location":{"filename":"src/opentelemetry-api/id_generator.cr","line_number":42,"url":null},"def":{"name":"span_id","visibility":"Public","body":"generator.span_id"}},{"html_id":"trace_id-class-method","name":"trace_id","abstract":false,"location":{"filename":"src/opentelemetry-api/id_generator.cr","line_number":38,"url":null},"def":{"name":"trace_id","visibility":"Public","body":"generator.trace_id"}}],"constructors":[{"html_id":"new(variant:String|Symbol=\"unique\")-class-method","name":"new","abstract":false,"args":[{"name":"variant","default_value":"\"unique\"","external_name":"variant","restriction":"String | Symbol"}],"args_string":"(variant : String | Symbol = \"unique\")","args_html":"(variant : <a href=\"../String.html\">String</a> | Symbol = <span class=\"s\">&quot;unique&quot;</span>)","location":{"filename":"src/opentelemetry-api/id_generator.cr","line_number":18,"url":null},"def":{"name":"new","args":[{"name":"variant","default_value":"\"unique\"","external_name":"variant","restriction":"String | Symbol"}],"visibility":"Public","body":"_ = allocate\n_.initialize(variant)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"generator:OpenTelemetry::IdGenerator::Base-instance-method","name":"generator","abstract":false,"location":{"filename":"src/opentelemetry-api/id_generator.cr","line_number":15,"url":null},"def":{"name":"generator","return_type":"OpenTelemetry::IdGenerator::Base","visibility":"Public","body":"@generator"}},{"html_id":"span_id-instance-method","name":"span_id","abstract":false,"location":{"filename":"src/opentelemetry-api/id_generator.cr","line_number":34,"url":null},"def":{"name":"span_id","visibility":"Public","body":"@generator.span_id"}},{"html_id":"trace_id-instance-method","name":"trace_id","abstract":false,"location":{"filename":"src/opentelemetry-api/id_generator.cr","line_number":30,"url":null},"def":{"name":"trace_id","visibility":"Public","body":"@generator.trace_id"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/IdGenerator/Base","path":"OpenTelemetry/IdGenerator/Base.html","kind":"struct","full_name":"OpenTelemetry::IdGenerator::Base","name":"Base","abstract":true,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/id_generator/base.cr","line_number":5,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"opentelemetry-api/OpenTelemetry/AbstractIdGenerator","kind":"struct","full_name":"OpenTelemetry::AbstractIdGenerator","name":"AbstractIdGenerator"},{"html_id":"opentelemetry-api/OpenTelemetry/IdGenerator/Random","kind":"struct","full_name":"OpenTelemetry::IdGenerator::Random","name":"Random"},{"html_id":"opentelemetry-api/OpenTelemetry/IdGenerator/Unique","kind":"struct","full_name":"OpenTelemetry::IdGenerator::Unique","name":"Unique"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/IdGenerator","kind":"struct","full_name":"OpenTelemetry::IdGenerator","name":"IdGenerator"},"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/opentelemetry-api/id_generator/base.cr","line_number":5,"url":null},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/opentelemetry-api/id_generator/base.cr","line_number":5,"url":null},"def":{"name":"initialize","visibility":"Public","body":""}},{"html_id":"span_id-instance-method","name":"span_id","doc":"This method will return an ID suitable for use as a Span ID. The standard offered\nin the open telemetry spec is 64 bits (8 bytes). This is not a hard requirement,\nhowever, so subclass implementations can return a different length.","summary":"<p>This method will return an ID suitable for use as a Span ID.</p>","abstract":true,"location":{"filename":"src/opentelemetry-api/id_generator/base.cr","line_number":14,"url":null},"def":{"name":"span_id","visibility":"Public","body":""}},{"html_id":"trace_id-instance-method","name":"trace_id","doc":"This method will return an ID suitable for use as a Trace ID. The standard offered\nin the open telemetry spec is 128 bits (16 bytes). This is not a hard requirement,\nhowever, so subclass implementations can return a different length.","summary":"<p>This method will return an ID suitable for use as a Trace ID.</p>","abstract":true,"location":{"filename":"src/opentelemetry-api/id_generator/base.cr","line_number":9,"url":null},"def":{"name":"trace_id","visibility":"Public","body":""}}]},{"html_id":"opentelemetry-api/OpenTelemetry/IdGenerator/Random","path":"OpenTelemetry/IdGenerator/Random.html","kind":"struct","full_name":"OpenTelemetry::IdGenerator::Random","name":"Random","abstract":false,"superclass":{"html_id":"opentelemetry-api/OpenTelemetry/IdGenerator/Base","kind":"struct","full_name":"OpenTelemetry::IdGenerator::Base","name":"Base"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/IdGenerator/Base","kind":"struct","full_name":"OpenTelemetry::IdGenerator::Base","name":"Base"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/id_generator/random.cr","line_number":4,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/IdGenerator","kind":"struct","full_name":"OpenTelemetry::IdGenerator","name":"IdGenerator"},"instance_methods":[{"html_id":"span_id-instance-method","name":"span_id","doc":"Return a random sequence of 8 bytes for the span id.","summary":"<p>Return a random sequence of 8 bytes for the span id.</p>","abstract":false,"location":{"filename":"src/opentelemetry-api/id_generator/random.cr","line_number":11,"url":null},"def":{"name":"span_id","visibility":"Public","body":"Trace.prng.random_bytes(8)"}},{"html_id":"trace_id-instance-method","name":"trace_id","doc":"Return a random sequence of 16 bytes for the trace id.","summary":"<p>Return a random sequence of 16 bytes for the trace id.</p>","abstract":false,"location":{"filename":"src/opentelemetry-api/id_generator/random.cr","line_number":6,"url":null},"def":{"name":"trace_id","visibility":"Public","body":"Trace.prng.random_bytes(16)"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/IdGenerator/Unique","path":"OpenTelemetry/IdGenerator/Unique.html","kind":"struct","full_name":"OpenTelemetry::IdGenerator::Unique","name":"Unique","abstract":false,"superclass":{"html_id":"opentelemetry-api/OpenTelemetry/IdGenerator/Base","kind":"struct","full_name":"OpenTelemetry::IdGenerator::Base","name":"Base"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/IdGenerator/Base","kind":"struct","full_name":"OpenTelemetry::IdGenerator::Base","name":"Base"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/id_generator/unique.cr","line_number":9,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/IdGenerator","kind":"struct","full_name":"OpenTelemetry::IdGenerator","name":"IdGenerator"},"doc":"This ID Generator returns guaranteed unique (within the process) IDs\nwhich are chronologically and logically sortable.","summary":"<p>This ID Generator returns guaranteed unique (within the process) IDs which are chronologically and logically sortable.</p>","instance_methods":[{"html_id":"span_id-instance-method","name":"span_id","doc":"This method will return an ID suitable for use as a Span ID. The standard offered\nin the open telemetry spec is 64 bits (8 bytes). This is not a hard requirement,\nhowever, so subclass implementations can return a different length.","summary":"<p>This method will return an ID suitable for use as a Span ID.</p>","abstract":false,"location":{"filename":"src/opentelemetry-api/id_generator/unique.cr","line_number":18,"url":null},"def":{"name":"span_id","visibility":"Public","body":"span_bytes = Slice(UInt8).new(8, 0)\n@mutex.sync do\n  t = Time.local\n  increment_unique_identifier\n  seconds_buffer = Slice(UInt8).new(8, 0)\n  IO::ByteFormat::BigEndian.encode(t.internal_seconds, seconds_buffer)\n  span_bytes[0, 5].copy_from(seconds_buffer[3, 5])\n  span_bytes[5, 3].copy_from(@unique_identifier)\nend\nspan_bytes\n"}},{"html_id":"trace_id-instance-method","name":"trace_id","doc":"This method will return an ID suitable for use as a Trace ID. The standard offered\nin the open telemetry spec is 128 bits (16 bytes). This is not a hard requirement,\nhowever, so subclass implementations can return a different length.","summary":"<p>This method will return an ID suitable for use as a Trace ID.</p>","abstract":false,"location":{"filename":"src/opentelemetry-api/id_generator/unique.cr","line_number":14,"url":null},"def":{"name":"trace_id","visibility":"Public","body":"CSUUID.unique.bytes"}}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Instrument","path":"OpenTelemetry/Instrument.html","kind":"class","full_name":"OpenTelemetry::Instrument","name":"Instrument","abstract":true,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/instrument.cr","line_number":2,"url":null},{"filename":"src/opentelemetry-api/instrument/counter.cr","line_number":4,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"opentelemetry-api/OpenTelemetry/Instrument/Counter","kind":"class","full_name":"OpenTelemetry::Instrument::Counter","name":"Counter"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"constructors":[{"html_id":"new(name,kind,unit=\"\",description=\"\")-class-method","name":"new","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"kind","external_name":"kind","restriction":""},{"name":"unit","default_value":"\"\"","external_name":"unit","restriction":""},{"name":"description","default_value":"\"\"","external_name":"description","restriction":""}],"args_string":"(name, kind, unit = \"\", description = \"\")","args_html":"(name, kind, unit = <span class=\"s\">&quot;&quot;</span>, description = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/opentelemetry-api/instrument.cr","line_number":11,"url":null},"def":{"name":"new","args":[{"name":"name","external_name":"name","restriction":""},{"name":"kind","external_name":"kind","restriction":""},{"name":"unit","default_value":"\"\"","external_name":"unit","restriction":""},{"name":"description","default_value":"\"\"","external_name":"description","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(name, kind, unit, description)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"attributes:Hash(String,AnyAttribute)-instance-method","name":"attributes","abstract":false,"location":{"filename":"src/opentelemetry-api/instrument.cr","line_number":8,"url":null},"def":{"name":"attributes","return_type":"Hash(String, AnyAttribute)","visibility":"Public","body":"@attributes"}},{"html_id":"attributes=(attributes:Hash(String,AnyAttribute))-instance-method","name":"attributes=","abstract":false,"args":[{"name":"attributes","external_name":"attributes","restriction":"Hash(String, AnyAttribute)"}],"args_string":"(attributes : Hash(String, AnyAttribute))","args_html":"(attributes : Hash(<a href=\"../String.html\">String</a>, <a href=\"../OpenTelemetry/AnyAttribute.html\">AnyAttribute</a>))","location":{"filename":"src/opentelemetry-api/instrument.cr","line_number":8,"url":null},"def":{"name":"attributes=","args":[{"name":"attributes","external_name":"attributes","restriction":"Hash(String, AnyAttribute)"}],"visibility":"Public","body":"@attributes = attributes"}},{"html_id":"description:String-instance-method","name":"description","abstract":false,"location":{"filename":"src/opentelemetry-api/instrument.cr","line_number":7,"url":null},"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"key_name:String-instance-method","name":"key_name","abstract":false,"location":{"filename":"src/opentelemetry-api/instrument.cr","line_number":4,"url":null},"def":{"name":"key_name","return_type":"String","visibility":"Public","body":"@key_name"}},{"html_id":"kind:String-instance-method","name":"kind","abstract":false,"location":{"filename":"src/opentelemetry-api/instrument.cr","line_number":5,"url":null},"def":{"name":"kind","return_type":"String","visibility":"Public","body":"@kind"}},{"html_id":"labels:Hash(String,String)-instance-method","name":"labels","abstract":false,"location":{"filename":"src/opentelemetry-api/instrument.cr","line_number":9,"url":null},"def":{"name":"labels","return_type":"Hash(String, String)","visibility":"Public","body":"@labels"}},{"html_id":"labels=(labels:Hash(String,String))-instance-method","name":"labels=","abstract":false,"args":[{"name":"labels","external_name":"labels","restriction":"Hash(String, String)"}],"args_string":"(labels : Hash(String, String))","args_html":"(labels : Hash(<a href=\"../String.html\">String</a>, <a href=\"../String.html\">String</a>))","location":{"filename":"src/opentelemetry-api/instrument.cr","line_number":9,"url":null},"def":{"name":"labels=","args":[{"name":"labels","external_name":"labels","restriction":"Hash(String, String)"}],"visibility":"Public","body":"@labels = labels"}},{"html_id":"name:String-instance-method","name":"name","abstract":false,"location":{"filename":"src/opentelemetry-api/instrument.cr","line_number":3,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"}},{"html_id":"unit:String-instance-method","name":"unit","abstract":false,"location":{"filename":"src/opentelemetry-api/instrument.cr","line_number":6,"url":null},"def":{"name":"unit","return_type":"String","visibility":"Public","body":"@unit"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Instrument/Counter","path":"OpenTelemetry/Instrument/Counter.html","kind":"class","full_name":"OpenTelemetry::Instrument::Counter","name":"Counter","abstract":false,"superclass":{"html_id":"opentelemetry-api/OpenTelemetry/Instrument","kind":"class","full_name":"OpenTelemetry::Instrument","name":"Instrument"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/Instrument","kind":"class","full_name":"OpenTelemetry::Instrument","name":"Instrument"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/instrument/counter.cr","line_number":5,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Instrument","kind":"class","full_name":"OpenTelemetry::Instrument","name":"Instrument"},"constructors":[{"html_id":"new(name,unit=\"\",variant:NumberClasses=UInt64,description=\"\")-class-method","name":"new","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"unit","default_value":"\"\"","external_name":"unit","restriction":""},{"name":"variant","default_value":"UInt64","external_name":"variant","restriction":"NumberClasses"},{"name":"description","default_value":"\"\"","external_name":"description","restriction":""}],"args_string":"(name, unit = \"\", variant : NumberClasses = UInt64, description = \"\")","args_html":"(name, unit = <span class=\"s\">&quot;&quot;</span>, variant : <a href=\"../../OpenTelemetry/Instrument/Counter/NumberClasses.html\">NumberClasses</a> = <span class=\"t\">UInt64</span>, description = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/opentelemetry-api/instrument/counter.cr","line_number":8,"url":null},"def":{"name":"new","args":[{"name":"name","external_name":"name","restriction":""},{"name":"unit","default_value":"\"\"","external_name":"unit","restriction":""},{"name":"variant","default_value":"UInt64","external_name":"variant","restriction":"NumberClasses"},{"name":"description","default_value":"\"\"","external_name":"description","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(name, unit, variant, description)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"add(value:Int::Unsigned|Float,attributes:Hash(String,ValueTypes)?=nil,labels:Hash(String,String)?=nil)-instance-method","name":"add","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int::Unsigned | Float"},{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Hash(String, ValueTypes) | ::Nil"},{"name":"labels","default_value":"nil","external_name":"labels","restriction":"Hash(String, String) | ::Nil"}],"args_string":"(value : Int::Unsigned | Float, attributes : Hash(String, ValueTypes)? = nil, labels : Hash(String, String)? = nil)","args_html":"(value : Int::Unsigned | Float, attributes : Hash(<a href=\"../../String.html\">String</a>, <a href=\"../../OpenTelemetry/ValueTypes.html\">ValueTypes</a>)? = <span class=\"n\">nil</span>, labels : Hash(<a href=\"../../String.html\">String</a>, <a href=\"../../String.html\">String</a>)? = <span class=\"n\">nil</span>)","location":{"filename":"src/opentelemetry-api/instrument/counter.cr","line_number":12,"url":null},"def":{"name":"add","args":[{"name":"value","external_name":"value","restriction":"Int::Unsigned | Float"},{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Hash(String, ValueTypes) | ::Nil"},{"name":"labels","default_value":"nil","external_name":"labels","restriction":"Hash(String, String) | ::Nil"}],"visibility":"Public","body":""}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Instrument/Counter/NumberClasses","path":"OpenTelemetry/Instrument/Counter/NumberClasses.html","kind":"alias","full_name":"OpenTelemetry::Instrument::Counter::NumberClasses","name":"NumberClasses","abstract":false,"locations":[{"filename":"src/opentelemetry-api/instrument/counter.cr","line_number":6,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":true,"aliased":"(Float64.class | UInt64.class)","aliased_html":"Float64.class | UInt64.class","const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Instrument/Counter","kind":"class","full_name":"OpenTelemetry::Instrument::Counter","name":"Counter"}}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Instrumentation","path":"OpenTelemetry/Instrumentation.html","kind":"class","full_name":"OpenTelemetry::Instrumentation","name":"Instrumentation","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/instrumentation.cr","line_number":2,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"class_methods":[{"html_id":"register(klass)-class-method","name":"register","abstract":false,"args":[{"name":"klass","external_name":"klass","restriction":""}],"args_string":"(klass)","args_html":"(klass)","location":{"filename":"src/opentelemetry-api/instrumentation.cr","line_number":3,"url":null},"def":{"name":"register","args":[{"name":"klass","external_name":"klass","restriction":""}],"visibility":"Public","body":""}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Instruments","path":"OpenTelemetry/Instruments.html","kind":"alias","full_name":"OpenTelemetry::Instruments","name":"Instruments","abstract":false,"locations":[{"filename":"src/opentelemetry-api/instrument.cr","line_number":54,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":true,"aliased":"OpenTelemetry::Instrument::Counter","aliased_html":"<a href=\"../OpenTelemetry/Instrument/Counter.html\">OpenTelemetry::Instrument::Counter</a>","const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"}},{"html_id":"opentelemetry-api/OpenTelemetry/LogColletion","path":"OpenTelemetry/LogColletion.html","kind":"class","full_name":"OpenTelemetry::LogColletion","name":"LogColletion","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/Sendable","kind":"module","full_name":"OpenTelemetry::Sendable","name":"Sendable"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/log_collection.cr","line_number":4,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"opentelemetry-api/OpenTelemetry/Sendable","kind":"module","full_name":"OpenTelemetry::Sendable","name":"Sendable"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"instance_methods":[{"html_id":"logs:Array(Log)-instance-method","name":"logs","abstract":false,"location":{"filename":"src/opentelemetry-api/log_collection.cr","line_number":7,"url":null},"def":{"name":"logs","return_type":"Array(Log)","visibility":"Public","body":"@logs"}},{"html_id":"logs=(logs:Array(Log))-instance-method","name":"logs=","abstract":false,"args":[{"name":"logs","external_name":"logs","restriction":"Array(Log)"}],"args_string":"(logs : Array(Log))","args_html":"(logs : Array(Log))","location":{"filename":"src/opentelemetry-api/log_collection.cr","line_number":7,"url":null},"def":{"name":"logs=","args":[{"name":"logs","external_name":"logs","restriction":"Array(Log)"}],"visibility":"Public","body":"@logs = logs"}},{"html_id":"to_json-instance-method","name":"to_json","abstract":false,"location":{"filename":"src/opentelemetry-api/log_collection.cr","line_number":27,"url":null},"def":{"name":"to_json","visibility":"Public","body":"String.build do |json|\n  json << \"{\\n\"\n  json << \"  \\\"type\\\":\\\"trace\\\",\\n\"\n  json << \"  \\\"traceId\\\":\\\"#{trace_id.hexstring}\\\",\\n\"\n  json << \"  \\\"spans\\\":[\\n\"\n  json << (String.build do |span_list|\n    iterate_span_nodes(root_span) do |span|\n      span_list << \"    \"\n      if span\n        span_list << span.to_json\n      end\n      span_list << \",\\n\"\n    end\n  end.chomp(\",\\n\"))\n  json << \"\\n  ]\\n\"\n  json << \"}\"\nend"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"location":{"filename":"src/opentelemetry-api/log_collection.cr","line_number":15,"url":null},"def":{"name":"to_protobuf","visibility":"Public","body":"Proto::Trace::V1::ResourceLogs.new(instrumentation_library_logs: [Proto::Trace::V1::InstrumentationLibraryLogs.new(instrumentation_library: OpenTelemetry.instrumentation_library, logs: logs.map(&.to_protobuf), schema_url: schema_url)], schema_url: schema_url)"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/LogProvider","path":"OpenTelemetry/LogProvider.html","kind":"class","full_name":"OpenTelemetry::LogProvider","name":"LogProvider","abstract":false,"superclass":{"html_id":"opentelemetry-api/OpenTelemetry/Provider","kind":"class","full_name":"OpenTelemetry::Provider","name":"Provider"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/Provider","kind":"class","full_name":"OpenTelemetry::Provider","name":"Provider"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/log_provider.cr","line_number":6,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"instance_methods":[{"html_id":"log(exporter=nil)-instance-method","name":"log","abstract":false,"args":[{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":""}],"args_string":"(exporter = nil)","args_html":"(exporter = <span class=\"n\">nil</span>)","location":{"filename":"src/opentelemetry-api/log_provider.cr","line_number":14,"url":null},"def":{"name":"log","args":[{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":""}],"visibility":"Public","body":"new_log = Log.new(service_name, service_version, schema_url, exporter)\nnew_log.merge_configuration_from_provider = self\nnew_log\n"}},{"html_id":"log(&)-instance-method","name":"log","abstract":false,"location":{"filename":"src/opentelemetry-api/log_provider.cr","line_number":27,"url":null},"def":{"name":"log","yields":1,"visibility":"Public","body":"new_log = log\nnew_log.provider = self\nyield new_log\nnew_log\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/LogRecord","path":"OpenTelemetry/LogRecord.html","kind":"class","full_name":"OpenTelemetry::LogRecord","name":"LogRecord","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/Sendable","kind":"module","full_name":"OpenTelemetry::Sendable","name":"Sendable"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/log.cr","line_number":7,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"NAME_OFFSETS","name":"NAME_OFFSETS","value":"{\"UNSPECIFIED\" => ->(_n : Int32) do\n  0\nend, \"TRACE\" => ->(n : Int32) do\n  n + 1\nend, \"DEBUG\" => ->(n : Int32) do\n  n + 5\nend, \"INFO\" => ->(n : Int32) do\n  n + 9\nend, \"WARN\" => ->(n : Int32) do\n  n + 13\nend, \"ERROR\" => ->(n : Int32) do\n  n + 17\nend, \"FATAL\" => ->(n : Int32) do\n  n + 21\nend}"}],"included_modules":[{"html_id":"opentelemetry-api/OpenTelemetry/Sendable","kind":"module","full_name":"OpenTelemetry::Sendable","name":"Sendable"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"class_methods":[{"html_id":"severity_from_name(name)-class-method","name":"severity_from_name","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""}],"args_string":"(name)","args_html":"(name)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":74,"url":null},"def":{"name":"severity_from_name","args":[{"name":"name","external_name":"name","restriction":""}],"visibility":"Public","body":"parts = (name.upcase.scan(/[a-zA-Z]+|\\d+/)).map do |__arg0|\n  __arg0.to_a.first.to_s\nend\nif !((1..2).includes?(parts.size))\n  raise(\"Severity name not formatted correctly; LABEL|LABELn where LABEL is one of TRACE, DEBUG, INFO, WARN, ERROR, or FATAL and n is an optional number\")\nend\nname = parts[0].upcase\nn = parts[1]? ? (parts[1].to_i - 1) : 0\nif !((0..3).includes?(n))\n  raise(\"Invalid severity sublevel; must be blank (i.e. TRACE) or 2..4 (i.e. TRACE4)\")\nend\nlevel = NAME_OFFSETS[name]? || (raise(\"Invalid severity name; severity must be one of TRACE, DEBUG, INFO, WARN, ERROR, or FATAL\"))\nLevel.new(level.call(n))\n"}},{"html_id":"severity_from_number(number)-class-method","name":"severity_from_number","abstract":false,"args":[{"name":"number","external_name":"number","restriction":""}],"args_string":"(number)","args_html":"(number)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":66,"url":null},"def":{"name":"severity_from_number","args":[{"name":"number","external_name":"number","restriction":""}],"visibility":"Public","body":"if number.to_i > 0 && number.to_i < 25\n  Level.new(number.to_i)\nelse\n  raise(\"Invalid severity number; severity must be in the range of 1..24\")\nend"}}],"constructors":[{"html_id":"new(severity:Level=Level::Unspecified,severity_text:String?=nil,body:ValueTypes?=nil,time:Time?=nil,observed_time:Time?=nil,trace_id:Slice(UInt8)?=nil,span_id:Slice(UInt8)?=nil,flags:TraceFlags=TraceFlags.new(0),exporter:Exporter?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"severity","default_value":"Level::Unspecified","external_name":"severity","restriction":"Level"},{"name":"severity_text","default_value":"nil","external_name":"severity_text","restriction":"String | ::Nil"},{"name":"body","default_value":"nil","external_name":"body","restriction":"ValueTypes | ::Nil"},{"name":"time","default_value":"nil","external_name":"time","restriction":"Time | ::Nil"},{"name":"observed_time","default_value":"nil","external_name":"observed_time","restriction":"Time | ::Nil"},{"name":"trace_id","default_value":"nil","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"span_id","default_value":"nil","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"flags","default_value":"TraceFlags.new(0)","external_name":"flags","restriction":"TraceFlags"},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":"Exporter | ::Nil"}],"args_string":"(severity : Level = Level::Unspecified, severity_text : String? = nil, body : ValueTypes? = nil, time : Time? = nil, observed_time : Time? = nil, trace_id : Slice(UInt8)? = nil, span_id : Slice(UInt8)? = nil, flags : TraceFlags = TraceFlags.new(0), exporter : Exporter? = nil)","args_html":"(severity : <a href=\"../OpenTelemetry/LogRecord/Level.html\">Level</a> = <span class=\"t\">Level</span><span class=\"t\">::</span><span class=\"t\">Unspecified</span>, severity_text : <a href=\"../String.html\">String</a>? = <span class=\"n\">nil</span>, body : <a href=\"../OpenTelemetry/ValueTypes.html\">ValueTypes</a>? = <span class=\"n\">nil</span>, time : Time? = <span class=\"n\">nil</span>, observed_time : Time? = <span class=\"n\">nil</span>, trace_id : Slice(UInt8)? = <span class=\"n\">nil</span>, span_id : Slice(UInt8)? = <span class=\"n\">nil</span>, flags : <a href=\"../OpenTelemetry/TraceFlags.html\">TraceFlags</a> = <span class=\"t\">TraceFlags</span>.<span class=\"k\">new</span>(<span class=\"n\">0</span>), exporter : <a href=\"../OpenTelemetry/Exporter.html\">Exporter</a>? = <span class=\"n\">nil</span>)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":105,"url":null},"def":{"name":"new","args":[{"name":"severity","default_value":"Level::Unspecified","external_name":"severity","restriction":"Level"},{"name":"severity_text","default_value":"nil","external_name":"severity_text","restriction":"String | ::Nil"},{"name":"body","default_value":"nil","external_name":"body","restriction":"ValueTypes | ::Nil"},{"name":"time","default_value":"nil","external_name":"time","restriction":"Time | ::Nil"},{"name":"observed_time","default_value":"nil","external_name":"observed_time","restriction":"Time | ::Nil"},{"name":"trace_id","default_value":"nil","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"span_id","default_value":"nil","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"flags","default_value":"TraceFlags.new(0)","external_name":"flags","restriction":"TraceFlags"},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":"Exporter | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(severity, severity_text, body, time, observed_time, trace_id, span_id, flags, exporter)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(severity:String=\"UNSPECIFIED\",severity_text:String?=nil,body:ValueTypes?=nil,time:Time?=nil,observed_time:Time?=nil,trace_id:Slice(UInt8)?=nil,span_id:Slice(UInt8)?=nil,flags:TraceFlags=TraceFlags.new(0),exporter:Exporter?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"severity","default_value":"\"UNSPECIFIED\"","external_name":"severity","restriction":"String"},{"name":"severity_text","default_value":"nil","external_name":"severity_text","restriction":"String | ::Nil"},{"name":"body","default_value":"nil","external_name":"body","restriction":"ValueTypes | ::Nil"},{"name":"time","default_value":"nil","external_name":"time","restriction":"Time | ::Nil"},{"name":"observed_time","default_value":"nil","external_name":"observed_time","restriction":"Time | ::Nil"},{"name":"trace_id","default_value":"nil","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"span_id","default_value":"nil","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"flags","default_value":"TraceFlags.new(0)","external_name":"flags","restriction":"TraceFlags"},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":"Exporter | ::Nil"}],"args_string":"(severity : String = \"UNSPECIFIED\", severity_text : String? = nil, body : ValueTypes? = nil, time : Time? = nil, observed_time : Time? = nil, trace_id : Slice(UInt8)? = nil, span_id : Slice(UInt8)? = nil, flags : TraceFlags = TraceFlags.new(0), exporter : Exporter? = nil)","args_html":"(severity : <a href=\"../String.html\">String</a> = <span class=\"s\">&quot;UNSPECIFIED&quot;</span>, severity_text : <a href=\"../String.html\">String</a>? = <span class=\"n\">nil</span>, body : <a href=\"../OpenTelemetry/ValueTypes.html\">ValueTypes</a>? = <span class=\"n\">nil</span>, time : Time? = <span class=\"n\">nil</span>, observed_time : Time? = <span class=\"n\">nil</span>, trace_id : Slice(UInt8)? = <span class=\"n\">nil</span>, span_id : Slice(UInt8)? = <span class=\"n\">nil</span>, flags : <a href=\"../OpenTelemetry/TraceFlags.html\">TraceFlags</a> = <span class=\"t\">TraceFlags</span>.<span class=\"k\">new</span>(<span class=\"n\">0</span>), exporter : <a href=\"../OpenTelemetry/Exporter.html\">Exporter</a>? = <span class=\"n\">nil</span>)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":128,"url":null},"def":{"name":"new","args":[{"name":"severity","default_value":"\"UNSPECIFIED\"","external_name":"severity","restriction":"String"},{"name":"severity_text","default_value":"nil","external_name":"severity_text","restriction":"String | ::Nil"},{"name":"body","default_value":"nil","external_name":"body","restriction":"ValueTypes | ::Nil"},{"name":"time","default_value":"nil","external_name":"time","restriction":"Time | ::Nil"},{"name":"observed_time","default_value":"nil","external_name":"observed_time","restriction":"Time | ::Nil"},{"name":"trace_id","default_value":"nil","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"span_id","default_value":"nil","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"flags","default_value":"TraceFlags.new(0)","external_name":"flags","restriction":"TraceFlags"},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":"Exporter | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(severity, severity_text, body, time, observed_time, trace_id, span_id, flags, exporter)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(severity:Int=0,severity_text:String?=nil,body:ValueTypes?=nil,time:Time?=nil,observed_time:Time?=nil,trace_id:Slice(UInt8)?=nil,span_id:Slice(UInt8)?=nil,flags:TraceFlags=TraceFlags.new(0),exporter:Exporter?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"severity","default_value":"0","external_name":"severity","restriction":"Int"},{"name":"severity_text","default_value":"nil","external_name":"severity_text","restriction":"String | ::Nil"},{"name":"body","default_value":"nil","external_name":"body","restriction":"ValueTypes | ::Nil"},{"name":"time","default_value":"nil","external_name":"time","restriction":"Time | ::Nil"},{"name":"observed_time","default_value":"nil","external_name":"observed_time","restriction":"Time | ::Nil"},{"name":"trace_id","default_value":"nil","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"span_id","default_value":"nil","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"flags","default_value":"TraceFlags.new(0)","external_name":"flags","restriction":"TraceFlags"},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":"Exporter | ::Nil"}],"args_string":"(severity : Int = 0, severity_text : String? = nil, body : ValueTypes? = nil, time : Time? = nil, observed_time : Time? = nil, trace_id : Slice(UInt8)? = nil, span_id : Slice(UInt8)? = nil, flags : TraceFlags = TraceFlags.new(0), exporter : Exporter? = nil)","args_html":"(severity : Int = <span class=\"n\">0</span>, severity_text : <a href=\"../String.html\">String</a>? = <span class=\"n\">nil</span>, body : <a href=\"../OpenTelemetry/ValueTypes.html\">ValueTypes</a>? = <span class=\"n\">nil</span>, time : Time? = <span class=\"n\">nil</span>, observed_time : Time? = <span class=\"n\">nil</span>, trace_id : Slice(UInt8)? = <span class=\"n\">nil</span>, span_id : Slice(UInt8)? = <span class=\"n\">nil</span>, flags : <a href=\"../OpenTelemetry/TraceFlags.html\">TraceFlags</a> = <span class=\"t\">TraceFlags</span>.<span class=\"k\">new</span>(<span class=\"n\">0</span>), exporter : <a href=\"../OpenTelemetry/Exporter.html\">Exporter</a>? = <span class=\"n\">nil</span>)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":151,"url":null},"def":{"name":"new","args":[{"name":"severity","default_value":"0","external_name":"severity","restriction":"Int"},{"name":"severity_text","default_value":"nil","external_name":"severity_text","restriction":"String | ::Nil"},{"name":"body","default_value":"nil","external_name":"body","restriction":"ValueTypes | ::Nil"},{"name":"time","default_value":"nil","external_name":"time","restriction":"Time | ::Nil"},{"name":"observed_time","default_value":"nil","external_name":"observed_time","restriction":"Time | ::Nil"},{"name":"trace_id","default_value":"nil","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"span_id","default_value":"nil","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"flags","default_value":"TraceFlags.new(0)","external_name":"flags","restriction":"TraceFlags"},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":"Exporter | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(severity, severity_text, body, time, observed_time, trace_id, span_id, flags, exporter)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":182,"url":null},"def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"attributes[key].value"}},{"html_id":"[]=(key,value)-instance-method","name":"[]=","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(key, value)","args_html":"(key, value)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":174,"url":null},"def":{"name":"[]=","args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"attributes[key] = AnyAttribute.new(key: key, value: value)"}},{"html_id":"attributes:Hash(String,AnyAttribute)-instance-method","name":"attributes","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":59,"url":null},"def":{"name":"attributes","return_type":"Hash(String, AnyAttribute)","visibility":"Public","body":"@attributes"}},{"html_id":"attributes=(attributes:Hash(String,AnyAttribute))-instance-method","name":"attributes=","abstract":false,"args":[{"name":"attributes","external_name":"attributes","restriction":"Hash(String, AnyAttribute)"}],"args_string":"(attributes : Hash(String, AnyAttribute))","args_html":"(attributes : Hash(<a href=\"../String.html\">String</a>, <a href=\"../OpenTelemetry/AnyAttribute.html\">AnyAttribute</a>))","location":{"filename":"src/opentelemetry-api/log.cr","line_number":59,"url":null},"def":{"name":"attributes=","args":[{"name":"attributes","external_name":"attributes","restriction":"Hash(String, AnyAttribute)"}],"visibility":"Public","body":"@attributes = attributes"}},{"html_id":"body-instance-method","name":"body","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":198,"url":null},"def":{"name":"body","visibility":"Public","body":"if b = @body\n  b.value\nelse\n  nil\nend"}},{"html_id":"body=(val)-instance-method","name":"body=","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":190,"url":null},"def":{"name":"body=","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"if val.nil?\n  @body = nil\nelse\n  @body = AnyValue.new(val)\nend"}},{"html_id":"dropped_attribute_count:UInt32-instance-method","name":"dropped_attribute_count","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":60,"url":null},"def":{"name":"dropped_attribute_count","return_type":"UInt32","visibility":"Public","body":"@dropped_attribute_count"}},{"html_id":"dropped_attribute_count=(dropped_attribute_count:UInt32)-instance-method","name":"dropped_attribute_count=","abstract":false,"args":[{"name":"dropped_attribute_count","external_name":"dropped_attribute_count","restriction":"UInt32"}],"args_string":"(dropped_attribute_count : UInt32)","args_html":"(dropped_attribute_count : UInt32)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":60,"url":null},"def":{"name":"dropped_attribute_count=","args":[{"name":"dropped_attribute_count","external_name":"dropped_attribute_count","restriction":"UInt32"}],"visibility":"Public","body":"@dropped_attribute_count = dropped_attribute_count"}},{"html_id":"export-instance-method","name":"export","doc":"Individual logs can export themselves. This is less efficient than using a LogProvider,\nand allowing the LogProvider to export larger chucks of logs, but this capability may\nbe useful if log volume is not large.","summary":"<p>Individual logs can export themselves.</p>","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":257,"url":null},"def":{"name":"export","visibility":"Public","body":""}},{"html_id":"exporter:Exporter?-instance-method","name":"exporter","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":48,"url":null},"def":{"name":"exporter","return_type":"Exporter | ::Nil","visibility":"Public","body":"@exporter"}},{"html_id":"exporter=(exporter:Exporter?)-instance-method","name":"exporter=","abstract":false,"args":[{"name":"exporter","external_name":"exporter","restriction":"Exporter | ::Nil"}],"args_string":"(exporter : Exporter?)","args_html":"(exporter : <a href=\"../OpenTelemetry/Exporter.html\">Exporter</a>?)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":48,"url":null},"def":{"name":"exporter=","args":[{"name":"exporter","external_name":"exporter","restriction":"Exporter | ::Nil"}],"visibility":"Public","body":"@exporter = exporter"}},{"html_id":"flags:TraceFlags-instance-method","name":"flags","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":55,"url":null},"def":{"name":"flags","return_type":"TraceFlags","visibility":"Public","body":"@flags"}},{"html_id":"flags=(flags:TraceFlags)-instance-method","name":"flags=","abstract":false,"args":[{"name":"flags","external_name":"flags","restriction":"TraceFlags"}],"args_string":"(flags : TraceFlags)","args_html":"(flags : <a href=\"../OpenTelemetry/TraceFlags.html\">TraceFlags</a>)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":55,"url":null},"def":{"name":"flags=","args":[{"name":"flags","external_name":"flags","restriction":"TraceFlags"}],"visibility":"Public","body":"@flags = flags"}},{"html_id":"get_attribute(key)-instance-method","name":"get_attribute","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":186,"url":null},"def":{"name":"get_attribute","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"attributes[key]"}},{"html_id":"merge_configuration_from_provider=(val)-instance-method","name":"merge_configuration_from_provider=","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":206,"url":null},"def":{"name":"merge_configuration_from_provider=","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"if self.schema_url.nil? || self.schema_url.empty?\n  self.schema_url = val.schema_url\nend\nif self.exporter.nil? || self.exporter.try(&.exporter).is_a?(Exporter::Abstract)\n  self.exporter = val.exporter\nend\n@provider = val\n"}},{"html_id":"name:String?-instance-method","name":"name","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":58,"url":null},"def":{"name":"name","return_type":"String | ::Nil","visibility":"Public","body":"@name"}},{"html_id":"name=(name:String?)-instance-method","name":"name=","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String | ::Nil"}],"args_string":"(name : String?)","args_html":"(name : <a href=\"../String.html\">String</a>?)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":58,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String | ::Nil"}],"visibility":"Public","body":"@name = name"}},{"html_id":"observed_time:Time?-instance-method","name":"observed_time","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":52,"url":null},"def":{"name":"observed_time","return_type":"Time | ::Nil","visibility":"Public","body":"@observed_time"}},{"html_id":"observed_time=(observed_time:Time?)-instance-method","name":"observed_time=","abstract":false,"args":[{"name":"observed_time","external_name":"observed_time","restriction":"Time | ::Nil"}],"args_string":"(observed_time : Time?)","args_html":"(observed_time : Time?)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":52,"url":null},"def":{"name":"observed_time=","args":[{"name":"observed_time","external_name":"observed_time","restriction":"Time | ::Nil"}],"visibility":"Public","body":"@observed_time = observed_time"}},{"html_id":"observed_time_unix_nano-instance-method","name":"observed_time_unix_nano","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":222,"url":null},"def":{"name":"observed_time_unix_nano","visibility":"Public","body":"if ot = observed_time\n  (ot - Time::UNIX_EPOCH).total_nanoseconds.to_u64\nelse\n  0\nend"}},{"html_id":"schema_url:String-instance-method","name":"schema_url","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":49,"url":null},"def":{"name":"schema_url","return_type":"String","visibility":"Public","body":"@schema_url"}},{"html_id":"schema_url=(schema_url:String)-instance-method","name":"schema_url=","abstract":false,"args":[{"name":"schema_url","external_name":"schema_url","restriction":"String"}],"args_string":"(schema_url : String)","args_html":"(schema_url : <a href=\"../String.html\">String</a>)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":49,"url":null},"def":{"name":"schema_url=","args":[{"name":"schema_url","external_name":"schema_url","restriction":"String"}],"visibility":"Public","body":"@schema_url = schema_url"}},{"html_id":"set_attribute(key,value)-instance-method","name":"set_attribute","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(key, value)","args_html":"(key, value)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":178,"url":null},"def":{"name":"set_attribute","args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"self[key] = value"}},{"html_id":"severity:Level-instance-method","name":"severity","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":56,"url":null},"def":{"name":"severity","return_type":"Level","visibility":"Public","body":"@severity"}},{"html_id":"severity=(severity:Level)-instance-method","name":"severity=","abstract":false,"args":[{"name":"severity","external_name":"severity","restriction":"Level"}],"args_string":"(severity : Level)","args_html":"(severity : <a href=\"../OpenTelemetry/LogRecord/Level.html\">Level</a>)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":56,"url":null},"def":{"name":"severity=","args":[{"name":"severity","external_name":"severity","restriction":"Level"}],"visibility":"Public","body":"@severity = severity"}},{"html_id":"severity_text:String?-instance-method","name":"severity_text","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":57,"url":null},"def":{"name":"severity_text","return_type":"String | ::Nil","visibility":"Public","body":"@severity_text"}},{"html_id":"severity_text=(severity_text:String?)-instance-method","name":"severity_text=","abstract":false,"args":[{"name":"severity_text","external_name":"severity_text","restriction":"String | ::Nil"}],"args_string":"(severity_text : String?)","args_html":"(severity_text : <a href=\"../String.html\">String</a>?)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":57,"url":null},"def":{"name":"severity_text=","args":[{"name":"severity_text","external_name":"severity_text","restriction":"String | ::Nil"}],"visibility":"Public","body":"@severity_text = severity_text"}},{"html_id":"span_id:Slice(UInt8)?-instance-method","name":"span_id","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":54,"url":null},"def":{"name":"span_id","return_type":"Slice(UInt8) | ::Nil","visibility":"Public","body":"@span_id"}},{"html_id":"span_id=(span_id:Slice(UInt8)?)-instance-method","name":"span_id=","abstract":false,"args":[{"name":"span_id","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"}],"args_string":"(span_id : Slice(UInt8)?)","args_html":"(span_id : Slice(UInt8)?)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":54,"url":null},"def":{"name":"span_id=","args":[{"name":"span_id","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"}],"visibility":"Public","body":"@span_id = span_id"}},{"html_id":"time:Time?-instance-method","name":"time","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":51,"url":null},"def":{"name":"time","return_type":"Time | ::Nil","visibility":"Public","body":"@time"}},{"html_id":"time=(time:Time?)-instance-method","name":"time=","abstract":false,"args":[{"name":"time","external_name":"time","restriction":"Time | ::Nil"}],"args_string":"(time : Time?)","args_html":"(time : Time?)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":51,"url":null},"def":{"name":"time=","args":[{"name":"time","external_name":"time","restriction":"Time | ::Nil"}],"visibility":"Public","body":"@time = time"}},{"html_id":"time_unix_nano-instance-method","name":"time_unix_nano","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":214,"url":null},"def":{"name":"time_unix_nano","visibility":"Public","body":"if t = time\n  (t - Time::UNIX_EPOCH).total_nanoseconds.to_u64\nelse\n  0\nend"}},{"html_id":"to_json-instance-method","name":"to_json","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":244,"url":null},"def":{"name":"to_json","visibility":"Public","body":"String.build do |json|\n  json << \"{\\n\"\n  if time_unix_nano\n    json << \"    \\\"time_unix_nano\\\":\\\"#{time_unix_nano}\\\"\\n\"\n  end\n  if observed_time_unix_nano\n    json << \"    \\\"time_unix_nano\\\":\\\"#{time_unix_nano}\\\"\\n\"\n  end\n  if severity_text\n    json << \"    \\\"severity_text\\\":\\\"#{severity_text}\\\"\\n\"\n  end\n  json << \"}\"\nend"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","doc":"The ProtoBuf differs a LOT from the current Spec. Methinks this has changed a bunch since I last updated it.","summary":"<p>The ProtoBuf differs a LOT from the current Spec.</p>","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":231,"url":null},"def":{"name":"to_protobuf","visibility":"Public","body":"Proto::Trace::V1::Log.new(time_unix_nano: time_unix_nano, observed_time_unix_nano: observed_time_unix_nano, severity_number: @severity.value, severity_text: @severity.to_s, body: body.value, trace_id: @trace_id, span_id: @span_id)"}},{"html_id":"trace_id:Slice(UInt8)?-instance-method","name":"trace_id","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":53,"url":null},"def":{"name":"trace_id","return_type":"Slice(UInt8) | ::Nil","visibility":"Public","body":"@trace_id"}},{"html_id":"trace_id=(trace_id:Slice(UInt8)?)-instance-method","name":"trace_id=","abstract":false,"args":[{"name":"trace_id","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"}],"args_string":"(trace_id : Slice(UInt8)?)","args_html":"(trace_id : Slice(UInt8)?)","location":{"filename":"src/opentelemetry-api/log.cr","line_number":53,"url":null},"def":{"name":"trace_id=","args":[{"name":"trace_id","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"}],"visibility":"Public","body":"@trace_id = trace_id"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/LogRecord/Level","path":"OpenTelemetry/LogRecord/Level.html","kind":"enum","full_name":"OpenTelemetry::LogRecord::Level","name":"Level","abstract":false,"ancestors":[{"html_id":"opentelemetry-api/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"opentelemetry-api/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/log.cr","line_number":20,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Unspecified","name":"Unspecified","value":"0"},{"id":"Trace","name":"Trace","value":"1"},{"id":"Trace2","name":"Trace2","value":"2"},{"id":"Trace3","name":"Trace3","value":"3"},{"id":"Trace4","name":"Trace4","value":"4"},{"id":"Debug","name":"Debug","value":"5"},{"id":"Debug2","name":"Debug2","value":"6"},{"id":"Debug3","name":"Debug3","value":"7"},{"id":"Debug4","name":"Debug4","value":"8"},{"id":"Info","name":"Info","value":"9"},{"id":"Info2","name":"Info2","value":"10"},{"id":"Info3","name":"Info3","value":"11"},{"id":"Info4","name":"Info4","value":"12"},{"id":"Warn","name":"Warn","value":"13"},{"id":"Warn2","name":"Warn2","value":"14"},{"id":"Warn3","name":"Warn3","value":"15"},{"id":"Warn4","name":"Warn4","value":"16"},{"id":"Error","name":"Error","value":"17"},{"id":"Error2","name":"Error2","value":"18"},{"id":"Error3","name":"Error3","value":"19"},{"id":"Error4","name":"Error4","value":"20"},{"id":"Fatal","name":"Fatal","value":"21"},{"id":"Fatal2","name":"Fatal2","value":"22"},{"id":"Fatal3","name":"Fatal3","value":"23"},{"id":"Fatal4","name":"Fatal4","value":"24"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/LogRecord","kind":"class","full_name":"OpenTelemetry::LogRecord","name":"LogRecord"},"instance_methods":[{"html_id":"debug2?-instance-method","name":"debug2?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":27,"url":null},"def":{"name":"debug2?","visibility":"Public","body":"self == Debug2"}},{"html_id":"debug3?-instance-method","name":"debug3?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":28,"url":null},"def":{"name":"debug3?","visibility":"Public","body":"self == Debug3"}},{"html_id":"debug4?-instance-method","name":"debug4?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":29,"url":null},"def":{"name":"debug4?","visibility":"Public","body":"self == Debug4"}},{"html_id":"debug?-instance-method","name":"debug?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":26,"url":null},"def":{"name":"debug?","visibility":"Public","body":"self == Debug"}},{"html_id":"error2?-instance-method","name":"error2?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":39,"url":null},"def":{"name":"error2?","visibility":"Public","body":"self == Error2"}},{"html_id":"error3?-instance-method","name":"error3?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":40,"url":null},"def":{"name":"error3?","visibility":"Public","body":"self == Error3"}},{"html_id":"error4?-instance-method","name":"error4?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":41,"url":null},"def":{"name":"error4?","visibility":"Public","body":"self == Error4"}},{"html_id":"error?-instance-method","name":"error?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":38,"url":null},"def":{"name":"error?","visibility":"Public","body":"self == Error"}},{"html_id":"fatal2?-instance-method","name":"fatal2?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":43,"url":null},"def":{"name":"fatal2?","visibility":"Public","body":"self == Fatal2"}},{"html_id":"fatal3?-instance-method","name":"fatal3?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":44,"url":null},"def":{"name":"fatal3?","visibility":"Public","body":"self == Fatal3"}},{"html_id":"fatal4?-instance-method","name":"fatal4?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":45,"url":null},"def":{"name":"fatal4?","visibility":"Public","body":"self == Fatal4"}},{"html_id":"fatal?-instance-method","name":"fatal?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":42,"url":null},"def":{"name":"fatal?","visibility":"Public","body":"self == Fatal"}},{"html_id":"info2?-instance-method","name":"info2?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":31,"url":null},"def":{"name":"info2?","visibility":"Public","body":"self == Info2"}},{"html_id":"info3?-instance-method","name":"info3?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":32,"url":null},"def":{"name":"info3?","visibility":"Public","body":"self == Info3"}},{"html_id":"info4?-instance-method","name":"info4?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":33,"url":null},"def":{"name":"info4?","visibility":"Public","body":"self == Info4"}},{"html_id":"info?-instance-method","name":"info?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":30,"url":null},"def":{"name":"info?","visibility":"Public","body":"self == Info"}},{"html_id":"trace2?-instance-method","name":"trace2?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":23,"url":null},"def":{"name":"trace2?","visibility":"Public","body":"self == Trace2"}},{"html_id":"trace3?-instance-method","name":"trace3?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":24,"url":null},"def":{"name":"trace3?","visibility":"Public","body":"self == Trace3"}},{"html_id":"trace4?-instance-method","name":"trace4?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":25,"url":null},"def":{"name":"trace4?","visibility":"Public","body":"self == Trace4"}},{"html_id":"trace?-instance-method","name":"trace?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":22,"url":null},"def":{"name":"trace?","visibility":"Public","body":"self == Trace"}},{"html_id":"unspecified?-instance-method","name":"unspecified?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":21,"url":null},"def":{"name":"unspecified?","visibility":"Public","body":"self == Unspecified"}},{"html_id":"warn2?-instance-method","name":"warn2?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":35,"url":null},"def":{"name":"warn2?","visibility":"Public","body":"self == Warn2"}},{"html_id":"warn3?-instance-method","name":"warn3?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":36,"url":null},"def":{"name":"warn3?","visibility":"Public","body":"self == Warn3"}},{"html_id":"warn4?-instance-method","name":"warn4?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":37,"url":null},"def":{"name":"warn4?","visibility":"Public","body":"self == Warn4"}},{"html_id":"warn?-instance-method","name":"warn?","abstract":false,"location":{"filename":"src/opentelemetry-api/log.cr","line_number":34,"url":null},"def":{"name":"warn?","visibility":"Public","body":"self == Warn"}}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Message","path":"OpenTelemetry/Message.html","kind":"struct","full_name":"OpenTelemetry::Message","name":"Message","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/message.cr","line_number":2,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/opentelemetry-api/message.cr","line_number":2,"url":null},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/opentelemetry-api/message.cr","line_number":2,"url":null},"def":{"name":"initialize","visibility":"Public","body":""}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Meter","path":"OpenTelemetry/Meter.html","kind":"class","full_name":"OpenTelemetry::Meter","name":"Meter","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/meter.cr","line_number":5,"url":null},{"filename":"src/opentelemetry-api/meter/exceptions.cr","line_number":2,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"constructors":[{"html_id":"new(service_name=nil,service_version=nil,schema_url=nil,exporter=nil,provider=nil)-class-method","name":"new","abstract":false,"args":[{"name":"service_name","default_value":"nil","external_name":"service_name","restriction":""},{"name":"service_version","default_value":"nil","external_name":"service_version","restriction":""},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":""},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":""},{"name":"provider","default_value":"nil","external_name":"provider","restriction":""}],"args_string":"(service_name = nil, service_version = nil, schema_url = nil, exporter = nil, provider = nil)","args_html":"(service_name = <span class=\"n\">nil</span>, service_version = <span class=\"n\">nil</span>, schema_url = <span class=\"n\">nil</span>, exporter = <span class=\"n\">nil</span>, provider = <span class=\"n\">nil</span>)","location":{"filename":"src/opentelemetry-api/meter.cr","line_number":16,"url":null},"def":{"name":"new","args":[{"name":"service_name","default_value":"nil","external_name":"service_name","restriction":""},{"name":"service_version","default_value":"nil","external_name":"service_version","restriction":""},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":""},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":""},{"name":"provider","default_value":"nil","external_name":"provider","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(service_name, service_version, schema_url, exporter, provider)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"exporter:Exporter?-instance-method","name":"exporter","abstract":false,"location":{"filename":"src/opentelemetry-api/meter.cr","line_number":10,"url":null},"def":{"name":"exporter","return_type":"Exporter | ::Nil","visibility":"Public","body":"@exporter"}},{"html_id":"exporter=(exporter:Exporter?)-instance-method","name":"exporter=","abstract":false,"args":[{"name":"exporter","external_name":"exporter","restriction":"Exporter | ::Nil"}],"args_string":"(exporter : Exporter?)","args_html":"(exporter : <a href=\"../OpenTelemetry/Exporter.html\">Exporter</a>?)","location":{"filename":"src/opentelemetry-api/meter.cr","line_number":10,"url":null},"def":{"name":"exporter=","args":[{"name":"exporter","external_name":"exporter","restriction":"Exporter | ::Nil"}],"visibility":"Public","body":"@exporter = exporter"}},{"html_id":"merge_configuration_from_provider=(val)-instance-method","name":"merge_configuration_from_provider=","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/opentelemetry-api/meter.cr","line_number":39,"url":null},"def":{"name":"merge_configuration_from_provider=","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"if self.service_name.nil? || self.service_name.empty?\n  self.service_name = val.service_name\nend\nif self.service_version.nil? || self.service_version.empty?\n  self.service_version = val.service_version\nend\nif self.schema_url.nil? || self.schema_url.empty?\n  self.schema_url = val.schema_url\nend\nif self.exporter.nil? || self.exporter.try(&.exporter).is_a?(Exporter::Abstract)\n  self.exporter = val.exporter\nend\n@provider = val\n"}},{"html_id":"meter_name:String-instance-method","name":"meter_name","abstract":false,"location":{"filename":"src/opentelemetry-api/meter.cr","line_number":6,"url":null},"def":{"name":"meter_name","return_type":"String","visibility":"Public","body":"@meter_name"}},{"html_id":"meter_name=(meter_name:String)-instance-method","name":"meter_name=","abstract":false,"args":[{"name":"meter_name","external_name":"meter_name","restriction":"String"}],"args_string":"(meter_name : String)","args_html":"(meter_name : <a href=\"../String.html\">String</a>)","location":{"filename":"src/opentelemetry-api/meter.cr","line_number":6,"url":null},"def":{"name":"meter_name=","args":[{"name":"meter_name","external_name":"meter_name","restriction":"String"}],"visibility":"Public","body":"@meter_name = meter_name"}},{"html_id":"provider:MeterProvider-instance-method","name":"provider","abstract":false,"location":{"filename":"src/opentelemetry-api/meter.cr","line_number":11,"url":null},"def":{"name":"provider","return_type":"MeterProvider","visibility":"Public","body":"@provider"}},{"html_id":"provider=(val)-instance-method","name":"provider=","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/opentelemetry-api/meter.cr","line_number":31,"url":null},"def":{"name":"provider=","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"self.service_name = @provider.service_name\nself.service_version = @provider.service_version\nself.schema_url = @provider.schema_url\nself.exporter = @provider.exporter\n@provider = val\n"}},{"html_id":"schema_url:String-instance-method","name":"schema_url","abstract":false,"location":{"filename":"src/opentelemetry-api/meter.cr","line_number":9,"url":null},"def":{"name":"schema_url","return_type":"String","visibility":"Public","body":"@schema_url"}},{"html_id":"schema_url=(schema_url:String)-instance-method","name":"schema_url=","abstract":false,"args":[{"name":"schema_url","external_name":"schema_url","restriction":"String"}],"args_string":"(schema_url : String)","args_html":"(schema_url : <a href=\"../String.html\">String</a>)","location":{"filename":"src/opentelemetry-api/meter.cr","line_number":9,"url":null},"def":{"name":"schema_url=","args":[{"name":"schema_url","external_name":"schema_url","restriction":"String"}],"visibility":"Public","body":"@schema_url = schema_url"}},{"html_id":"service_name:String-instance-method","name":"service_name","abstract":false,"location":{"filename":"src/opentelemetry-api/meter.cr","line_number":7,"url":null},"def":{"name":"service_name","return_type":"String","visibility":"Public","body":"@service_name"}},{"html_id":"service_name=(service_name:String)-instance-method","name":"service_name=","abstract":false,"args":[{"name":"service_name","external_name":"service_name","restriction":"String"}],"args_string":"(service_name : String)","args_html":"(service_name : <a href=\"../String.html\">String</a>)","location":{"filename":"src/opentelemetry-api/meter.cr","line_number":7,"url":null},"def":{"name":"service_name=","args":[{"name":"service_name","external_name":"service_name","restriction":"String"}],"visibility":"Public","body":"@service_name = service_name"}},{"html_id":"service_version:String-instance-method","name":"service_version","abstract":false,"location":{"filename":"src/opentelemetry-api/meter.cr","line_number":8,"url":null},"def":{"name":"service_version","return_type":"String","visibility":"Public","body":"@service_version"}},{"html_id":"service_version=(service_version:String)-instance-method","name":"service_version=","abstract":false,"args":[{"name":"service_version","external_name":"service_version","restriction":"String"}],"args_string":"(service_version : String)","args_html":"(service_version : <a href=\"../String.html\">String</a>)","location":{"filename":"src/opentelemetry-api/meter.cr","line_number":8,"url":null},"def":{"name":"service_version=","args":[{"name":"service_version","external_name":"service_version","restriction":"String"}],"visibility":"Public","body":"@service_version = service_version"}},{"html_id":"to_json-instance-method","name":"to_json","abstract":false,"location":{"filename":"src/opentelemetry-api/meter.cr","line_number":62,"url":null},"def":{"name":"to_json","visibility":"Public","body":"String.build do |json|\n  json << \"{\\n\"\n  json << \"  \\\"type\\\":\\\"trace\\\",\\n\"\n  json << \"  \\\"traceId\\\":\\\"#{trace_id.hexstring}\\\",\\n\"\n  json << \"  \\\"spans\\\":[\\n\"\n  json << (String.build do |span_list|\n    iterate_span_nodes(root_span) do |span|\n      span_list << \"    \"\n      if span\n        span_list << span.to_json\n      end\n      span_list << \",\\n\"\n    end\n  end.chomp(\",\\n\"))\n  json << \"\\n  ]\\n\"\n  json << \"}\"\nend"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","doc":"This method returns a ProtoBuf object containing all of the Trace information.","summary":"<p>This method returns a ProtoBuf object containing all of the Trace information.</p>","abstract":false,"location":{"filename":"src/opentelemetry-api/meter.cr","line_number":48,"url":null},"def":{"name":"to_protobuf","visibility":"Public","body":"Proto::Trace::V1::ResourceSpans.new(instrumentation_library_spans: [Proto::Trace::V1::InstrumentationLibrarySpans.new(instrumentation_library: Proto::Common::V1::InstrumentationLibrary.new(name: \"OpenTelemetry Crystal\", version: VERSION), spans: (iterate_span_nodes(root_span, [] of Span)).map(&.to_protobuf))])"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Meter/DuplicateInstrumentError","path":"OpenTelemetry/Meter/DuplicateInstrumentError.html","kind":"class","full_name":"OpenTelemetry::Meter::DuplicateInstrumentError","name":"DuplicateInstrumentError","abstract":false,"superclass":{"html_id":"opentelemetry-api/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"opentelemetry-api/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/meter/exceptions.cr","line_number":3,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Meter","kind":"class","full_name":"OpenTelemetry::Meter","name":"Meter"}},{"html_id":"opentelemetry-api/OpenTelemetry/Meter/InstrumentNameError","path":"OpenTelemetry/Meter/InstrumentNameError.html","kind":"class","full_name":"OpenTelemetry::Meter::InstrumentNameError","name":"InstrumentNameError","abstract":false,"superclass":{"html_id":"opentelemetry-api/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"opentelemetry-api/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/meter/exceptions.cr","line_number":6,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Meter","kind":"class","full_name":"OpenTelemetry::Meter","name":"Meter"}},{"html_id":"opentelemetry-api/OpenTelemetry/Meter/InstrumentUnitError","path":"OpenTelemetry/Meter/InstrumentUnitError.html","kind":"class","full_name":"OpenTelemetry::Meter::InstrumentUnitError","name":"InstrumentUnitError","abstract":false,"superclass":{"html_id":"opentelemetry-api/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"opentelemetry-api/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/meter/exceptions.cr","line_number":9,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Meter","kind":"class","full_name":"OpenTelemetry::Meter","name":"Meter"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/MeterProvider","path":"OpenTelemetry/MeterProvider.html","kind":"class","full_name":"OpenTelemetry::MeterProvider","name":"MeterProvider","abstract":false,"superclass":{"html_id":"opentelemetry-api/OpenTelemetry/Provider","kind":"class","full_name":"OpenTelemetry::Provider","name":"Provider"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/Provider","kind":"class","full_name":"OpenTelemetry::Provider","name":"Provider"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/meter_provider.cr","line_number":6,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"doc":"A MeterProvider encapsulates a set of meter configuration, and provides an interface for creating Meter instances.","summary":"<p>A MeterProvider encapsulates a set of meter configuration, and provides an interface for creating Meter instances.</p>","instance_methods":[{"html_id":"meter(service_name=nil,service_version=nil,schema_url=nil,exporter=nil,interval=nil)-instance-method","name":"meter","abstract":false,"args":[{"name":"service_name","default_value":"nil","external_name":"service_name","restriction":""},{"name":"service_version","default_value":"nil","external_name":"service_version","restriction":""},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":""},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":""},{"name":"interval","default_value":"nil","external_name":"interval","restriction":""}],"args_string":"(service_name = nil, service_version = nil, schema_url = nil, exporter = nil, interval = nil)","args_html":"(service_name = <span class=\"n\">nil</span>, service_version = <span class=\"n\">nil</span>, schema_url = <span class=\"n\">nil</span>, exporter = <span class=\"n\">nil</span>, interval = <span class=\"n\">nil</span>)","location":{"filename":"src/opentelemetry-api/meter_provider.cr","line_number":14,"url":null},"def":{"name":"meter","args":[{"name":"service_name","default_value":"nil","external_name":"service_name","restriction":""},{"name":"service_version","default_value":"nil","external_name":"service_version","restriction":""},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":""},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":""},{"name":"interval","default_value":"nil","external_name":"interval","restriction":""}],"visibility":"Public","body":"new_meter = Meter.new(service_name: service_name, service_version: service_version, schema_url: schema_url, exporter: exporter, interval: interval)\nnew_meter.merge_configuration_from_provider = self\nnew_meter\n"}},{"html_id":"meter(&)-instance-method","name":"meter","abstract":false,"location":{"filename":"src/opentelemetry-api/meter_provider.cr","line_number":33,"url":null},"def":{"name":"meter","yields":1,"visibility":"Public","body":"new_meter = meter\nnew_meter.provider = self\nyield new_meter\nnew_meter\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Propagation","path":"OpenTelemetry/Propagation.html","kind":"module","full_name":"OpenTelemetry::Propagation","name":"Propagation","abstract":false,"locations":[{"filename":"src/opentelemetry-api/propagation/text_map_getter.cr","line_number":2,"url":null},{"filename":"src/opentelemetry-api/propagation/text_map_setter.cr","line_number":2,"url":null},{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":7,"url":null},{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":2,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Propagation/TextMapGetter","path":"OpenTelemetry/Propagation/TextMapGetter.html","kind":"module","full_name":"OpenTelemetry::Propagation::TextMapGetter","name":"TextMapGetter","abstract":false,"locations":[{"filename":"src/opentelemetry-api/propagation/text_map_getter.cr","line_number":3,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Propagation","kind":"module","full_name":"OpenTelemetry::Propagation","name":"Propagation"},"class_methods":[{"html_id":"get(carrier,key)-class-method","name":"get","abstract":false,"args":[{"name":"carrier","external_name":"carrier","restriction":""},{"name":"key","external_name":"key","restriction":""}],"args_string":"(carrier, key)","args_html":"(carrier, key)","location":{"filename":"src/opentelemetry-api/propagation/text_map_getter.cr","line_number":4,"url":null},"def":{"name":"get","args":[{"name":"carrier","external_name":"carrier","restriction":""},{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"carrier[key]?.to_s"}}],"instance_methods":[{"html_id":"keys(carrier)-instance-method","name":"keys","abstract":false,"args":[{"name":"carrier","external_name":"carrier","restriction":""}],"args_string":"(carrier)","args_html":"(carrier)","location":{"filename":"src/opentelemetry-api/propagation/text_map_getter.cr","line_number":8,"url":null},"def":{"name":"keys","args":[{"name":"carrier","external_name":"carrier","restriction":""}],"visibility":"Public","body":"carrier.keys"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Propagation/TextMapSetter","path":"OpenTelemetry/Propagation/TextMapSetter.html","kind":"module","full_name":"OpenTelemetry::Propagation::TextMapSetter","name":"TextMapSetter","abstract":false,"locations":[{"filename":"src/opentelemetry-api/propagation/text_map_setter.cr","line_number":3,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Propagation","kind":"module","full_name":"OpenTelemetry::Propagation","name":"Propagation"},"class_methods":[{"html_id":"set(carrier,key,value)-class-method","name":"set","abstract":false,"args":[{"name":"carrier","external_name":"carrier","restriction":""},{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(carrier, key, value)","args_html":"(carrier, key, value)","location":{"filename":"src/opentelemetry-api/propagation/text_map_setter.cr","line_number":4,"url":null},"def":{"name":"set","args":[{"name":"carrier","external_name":"carrier","restriction":""},{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"carrier[key.to_s] = value.to_s"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Propagation/TraceContext","path":"OpenTelemetry/Propagation/TraceContext.html","kind":"class","full_name":"OpenTelemetry::Propagation::TraceContext","name":"TraceContext","abstract":false,"superclass":{"html_id":"opentelemetry-api/OpenTelemetry/TextMapPropagator","kind":"class","full_name":"OpenTelemetry::TextMapPropagator","name":"TextMapPropagator"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/TextMapPropagator","kind":"class","full_name":"OpenTelemetry::TextMapPropagator","name":"TextMapPropagator"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":8,"url":null},{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":3,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{\"traceparent\", \"tracestate\"}"},{"id":"TRACEPARENT_KEY","name":"TRACEPARENT_KEY","value":"\"traceparent\""},{"id":"TRACESTATE_KEY","name":"TRACESTATE_KEY","value":"\"tracestate\""}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Propagation","kind":"module","full_name":"OpenTelemetry::Propagation","name":"Propagation"},"constructors":[{"html_id":"new(trace_parent:TraceParent,context:Context=OpenTelemetry::Context.current)-class-method","name":"new","abstract":false,"args":[{"name":"trace_parent","external_name":"trace_parent","restriction":"TraceParent"},{"name":"context","default_value":"OpenTelemetry::Context.current","external_name":"context","restriction":"Context"}],"args_string":"(trace_parent : TraceParent, context : Context = OpenTelemetry::Context.current)","args_html":"(trace_parent : <a href=\"../../OpenTelemetry/Propagation/TraceContext/TraceParent.html\">TraceParent</a>, context : <a href=\"../../OpenTelemetry/Context.html\">Context</a> = <span class=\"t\">OpenTelemetry</span><span class=\"t\">::</span><span class=\"t\">Context</span>.current)","location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":19,"url":null},"def":{"name":"new","args":[{"name":"trace_parent","external_name":"trace_parent","restriction":"TraceParent"},{"name":"context","default_value":"OpenTelemetry::Context.current","external_name":"context","restriction":"Context"}],"visibility":"Public","body":"_ = allocate\n_.initialize(trace_parent, context)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(span_context:SpanContext,context:Context=OpenTelemetry::Context.current)-class-method","name":"new","abstract":false,"args":[{"name":"span_context","external_name":"span_context","restriction":"SpanContext"},{"name":"context","default_value":"OpenTelemetry::Context.current","external_name":"context","restriction":"Context"}],"args_string":"(span_context : SpanContext, context : Context = OpenTelemetry::Context.current)","args_html":"(span_context : <a href=\"../../OpenTelemetry/SpanContext.html\">SpanContext</a>, context : <a href=\"../../OpenTelemetry/Context.html\">Context</a> = <span class=\"t\">OpenTelemetry</span><span class=\"t\">::</span><span class=\"t\">Context</span>.current)","location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":24,"url":null},"def":{"name":"new","args":[{"name":"span_context","external_name":"span_context","restriction":"SpanContext"},{"name":"context","default_value":"OpenTelemetry::Context.current","external_name":"context","restriction":"Context"}],"visibility":"Public","body":"_ = allocate\n_.initialize(span_context, context)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":16,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"context:Context?-instance-method","name":"context","abstract":false,"location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":10,"url":null},"def":{"name":"context","return_type":"Context | ::Nil","visibility":"Public","body":"@context"}},{"html_id":"context=(context:Context?)-instance-method","name":"context=","abstract":false,"args":[{"name":"context","external_name":"context","restriction":"Context | ::Nil"}],"args_string":"(context : Context?)","args_html":"(context : <a href=\"../../OpenTelemetry/Context.html\">Context</a>?)","location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":10,"url":null},"def":{"name":"context=","args":[{"name":"context","external_name":"context","restriction":"Context | ::Nil"}],"visibility":"Public","body":"@context = context"}},{"html_id":"extract(carrier,context:Context?=nil,getter:TextMapGetter.class=TextMapGetter)-instance-method","name":"extract","abstract":false,"args":[{"name":"carrier","external_name":"carrier","restriction":""},{"name":"context","default_value":"nil","external_name":"context","restriction":"Context | ::Nil"},{"name":"getter","default_value":"TextMapGetter","external_name":"getter","restriction":"TextMapGetter.class"}],"args_string":"(carrier, context : Context? = nil, getter : TextMapGetter.class = TextMapGetter)","args_html":"(carrier, context : <a href=\"../../OpenTelemetry/Context.html\">Context</a>? = <span class=\"n\">nil</span>, getter : <span class=\"t\">TextMapGetter</span>.<span class=\"k\">class</span> = <span class=\"t\">TextMapGetter</span>)","location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":45,"url":null},"def":{"name":"extract","args":[{"name":"carrier","external_name":"carrier","restriction":""},{"name":"context","default_value":"nil","external_name":"context","restriction":"Context | ::Nil"},{"name":"getter","default_value":"TextMapGetter","external_name":"getter","restriction":"TextMapGetter.class"}],"visibility":"Public","body":"span = OpenTelemetry.current_span\nif span\n  span_context = span.context\nend\ntrace_parent_value = getter.get(carrier, TRACEPARENT_KEY)\nif trace_parent_value\nelse\n  return\nend\ntp = TraceParent.from_string(trace_parent_value)\nts = {} of String => String\n((getter.get(carrier, TRACESTATE_KEY)).split(/\\s*,\\s*/)).each do |entry|\n  if entry.index('=')\n  else\n    next\n  end\n  k, v = entry.split(/\\s*=\\s*/)\n  ts[k.to_s] = v.to_s\nend\ntarget = context ? context : span_context\nif target\n  ts.each do |key, value|\n    target[key] = value\n  end\nend\nif target.is_a?(SpanContext)\n  target.trace_id = tp.trace_id\n  target.span_id = tp.span_id\nend\ntarget\n"}},{"html_id":"fields-instance-method","name":"fields","abstract":false,"location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":78,"url":null},"def":{"name":"fields","visibility":"Public","body":"FIELDS"}},{"html_id":"inject(carrier,context:Context?=nil,setter:TextMapSetter.class=TextMapSetter)-instance-method","name":"inject","abstract":false,"args":[{"name":"carrier","external_name":"carrier","restriction":""},{"name":"context","default_value":"nil","external_name":"context","restriction":"Context | ::Nil"},{"name":"setter","default_value":"TextMapSetter","external_name":"setter","restriction":"TextMapSetter.class"}],"args_string":"(carrier, context : Context? = nil, setter : TextMapSetter.class = TextMapSetter)","args_html":"(carrier, context : <a href=\"../../OpenTelemetry/Context.html\">Context</a>? = <span class=\"n\">nil</span>, setter : <span class=\"t\">TextMapSetter</span>.<span class=\"k\">class</span> = <span class=\"t\">TextMapSetter</span>)","location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":33,"url":null},"def":{"name":"inject","args":[{"name":"carrier","external_name":"carrier","restriction":""},{"name":"context","default_value":"nil","external_name":"context","restriction":"Context | ::Nil"},{"name":"setter","default_value":"TextMapSetter","external_name":"setter","restriction":"TextMapSetter.class"}],"visibility":"Public","body":"span = OpenTelemetry.current_span\nif span\n  span_context = span.context\n  setter.set(carrier, TRACEPARENT_KEY, (TraceParent.from_span_context(span_context)).to_s)\n  setter.set(carrier, TRACESTATE_KEY, context ? tracestate(context) : tracestate)\nend\ncontext ? context : span_context\n"}},{"html_id":"span_id-instance-method","name":"span_id","abstract":false,"location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":108,"url":null},"def":{"name":"span_id","visibility":"Public","body":"trace_parent.span_id"}},{"html_id":"span_id=(value:Slice(UInt8))-instance-method","name":"span_id=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8)"}],"args_string":"(value : Slice(UInt8))","args_html":"(value : Slice(UInt8))","location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":112,"url":null},"def":{"name":"span_id=","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8)"}],"visibility":"Public","body":"trace_parent.span_id = value\n@trace_parent = self.trace_parent\n"}},{"html_id":"span_id=(value)-instance-method","name":"span_id=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":117,"url":null},"def":{"name":"span_id=","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"self.span_id = value.hexbytes"}},{"html_id":"trace_flags-instance-method","name":"trace_flags","abstract":false,"location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":121,"url":null},"def":{"name":"trace_flags","visibility":"Public","body":"trace_parent.trace_flags.value"}},{"html_id":"trace_flags=(value:Slice(UInt8))-instance-method","name":"trace_flags=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8)"}],"args_string":"(value : Slice(UInt8))","args_html":"(value : Slice(UInt8))","location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":125,"url":null},"def":{"name":"trace_flags=","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8)"}],"visibility":"Public","body":"self.trace_flags = value.hexstring.to_i(16)"}},{"html_id":"trace_flags=(value:String)-instance-method","name":"trace_flags=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":129,"url":null},"def":{"name":"trace_flags=","args":[{"name":"value","external_name":"value","restriction":"String"}],"visibility":"Public","body":"self.trace_flags = value.to_i(16)"}},{"html_id":"trace_flags=(value)-instance-method","name":"trace_flags=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":133,"url":null},"def":{"name":"trace_flags=","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"trace_parent.trace_flags = TraceFlags.new(value)\n@trace_parent = self.trace_parent\n"}},{"html_id":"trace_id-instance-method","name":"trace_id","abstract":false,"location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":95,"url":null},"def":{"name":"trace_id","visibility":"Public","body":"trace_parent.trace_id"}},{"html_id":"trace_id=(value:Slice(UInt8))-instance-method","name":"trace_id=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8)"}],"args_string":"(value : Slice(UInt8))","args_html":"(value : Slice(UInt8))","location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":99,"url":null},"def":{"name":"trace_id=","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8)"}],"visibility":"Public","body":"trace_parent.trace_id = value\n@trace_parent = self.trace_parent\n"}},{"html_id":"trace_id=(value)-instance-method","name":"trace_id=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":104,"url":null},"def":{"name":"trace_id=","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"self.trace_id = value.hexbytes"}},{"html_id":"trace_parent:TraceParent-instance-method","name":"trace_parent","abstract":false,"location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":9,"url":null},"def":{"name":"trace_parent","return_type":"TraceParent","visibility":"Public","body":"@trace_parent"}},{"html_id":"trace_parent=(trace_parent:TraceParent)-instance-method","name":"trace_parent=","abstract":false,"args":[{"name":"trace_parent","external_name":"trace_parent","restriction":"TraceParent"}],"args_string":"(trace_parent : TraceParent)","args_html":"(trace_parent : <a href=\"../../OpenTelemetry/Propagation/TraceContext/TraceParent.html\">TraceParent</a>)","location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":9,"url":null},"def":{"name":"trace_parent=","args":[{"name":"trace_parent","external_name":"trace_parent","restriction":"TraceParent"}],"visibility":"Public","body":"@trace_parent = trace_parent"}},{"html_id":"traceparent(io)-instance-method","name":"traceparent","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":142,"url":null},"def":{"name":"traceparent","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"trace_parent.to_s(io)"}},{"html_id":"traceparent-instance-method","name":"traceparent","abstract":false,"location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":138,"url":null},"def":{"name":"traceparent","visibility":"Public","body":"trace_parent.to_s"}},{"html_id":"tracestate(ctx:Context)-instance-method","name":"tracestate","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"Context"}],"args_string":"(ctx : Context)","args_html":"(ctx : <a href=\"../../OpenTelemetry/Context.html\">Context</a>)","location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":154,"url":null},"def":{"name":"tracestate","args":[{"name":"ctx","external_name":"ctx","restriction":"Context"}],"visibility":"Public","body":"ctx.entries.map do |key, value|\n  \"#{key}=#{value}\"\nend.join(\",\")"}},{"html_id":"tracestate(ctx:SpanContext)-instance-method","name":"tracestate","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"SpanContext"}],"args_string":"(ctx : SpanContext)","args_html":"(ctx : <a href=\"../../OpenTelemetry/SpanContext.html\">SpanContext</a>)","location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":160,"url":null},"def":{"name":"tracestate","args":[{"name":"ctx","external_name":"ctx","restriction":"SpanContext"}],"visibility":"Public","body":"ctx.trace_state.map do |key, value|\n  \"#{key}=#{value}\"\nend.join(\",\")"}},{"html_id":"tracestate-instance-method","name":"tracestate","abstract":false,"location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":146,"url":null},"def":{"name":"tracestate","visibility":"Public","body":"if ctx = @context\n  ctx.entries.map do |key, value|\n    \"#{key}=#{value}\"\n  end.join(\",\")\nend"}},{"html_id":"version-instance-method","name":"version","abstract":false,"location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":82,"url":null},"def":{"name":"version","visibility":"Public","body":"trace_parent.version"}},{"html_id":"version=(value:Slice(UInt8))-instance-method","name":"version=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8)"}],"args_string":"(value : Slice(UInt8))","args_html":"(value : Slice(UInt8))","location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":86,"url":null},"def":{"name":"version=","args":[{"name":"value","external_name":"value","restriction":"Slice(UInt8)"}],"visibility":"Public","body":"trace_parent.version = value\n@trace_parent = self.trace_parent\n"}},{"html_id":"version=(value)-instance-method","name":"version=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/opentelemetry-api/propagation/trace_context.cr","line_number":91,"url":null},"def":{"name":"version=","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"self.version = value.hexbytes"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Propagation/TraceContext/TraceParent","path":"OpenTelemetry/Propagation/TraceContext/TraceParent.html","kind":"struct","full_name":"OpenTelemetry::Propagation::TraceContext::TraceParent","name":"TraceParent","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":4,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MATCH","name":"MATCH","value":"/^(?<version>[A-Fa-f0-9]{2})-(?<trace_id>[A-Fa-f0-9]{32})-(?<span_id>[A-Fa-f0-9]{16})-(?<flags>[A-Fa-f0-9]{2})(?<ignored>-.*)?$/"},{"id":"VERSION_MATCH","name":"VERSION_MATCH","value":"/(?<version>[A-Fa-f0-9]{2})/"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Propagation/TraceContext","kind":"class","full_name":"OpenTelemetry::Propagation::TraceContext","name":"TraceContext"},"class_methods":[{"html_id":"from_span_context(ctx:SpanContext)-class-method","name":"from_span_context","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"SpanContext"}],"args_string":"(ctx : SpanContext)","args_html":"(ctx : <a href=\"../../../OpenTelemetry/SpanContext.html\">SpanContext</a>)","location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":43,"url":null},"def":{"name":"from_span_context","args":[{"name":"ctx","external_name":"ctx","restriction":"SpanContext"}],"visibility":"Public","body":"new(trace_id: ctx.trace_id, span_id: ctx.span_id, trace_flags: ctx.trace_flags)"}},{"html_id":"from_string(traceparent:String)-class-method","name":"from_string","abstract":false,"args":[{"name":"traceparent","external_name":"traceparent","restriction":"String"}],"args_string":"(traceparent : String)","args_html":"(traceparent : <a href=\"../../../String.html\">String</a>)","location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":59,"url":null},"def":{"name":"from_string","args":[{"name":"traceparent","external_name":"traceparent","restriction":"String"}],"visibility":"Public","body":"new(traceparent.split(/-/, 4))"}},{"html_id":"valid?(traceparent:String)-class-method","name":"valid?","abstract":false,"args":[{"name":"traceparent","external_name":"traceparent","restriction":"String"}],"args_string":"(traceparent : String)","args_html":"(traceparent : <a href=\"../../../String.html\">String</a>)","location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":110,"url":null},"def":{"name":"valid?","args":[{"name":"traceparent","external_name":"traceparent","restriction":"String"}],"visibility":"Public","body":"MATCH.match(traceparent)"}}],"constructors":[{"html_id":"new(version,trace_id,span_id,trace_flags)-class-method","name":"new","abstract":false,"args":[{"name":"version","external_name":"version","restriction":""},{"name":"trace_id","external_name":"trace_id","restriction":""},{"name":"span_id","external_name":"span_id","restriction":""},{"name":"trace_flags","external_name":"trace_flags","restriction":""}],"args_string":"(version, trace_id, span_id, trace_flags)","args_html":"(version, trace_id, span_id, trace_flags)","location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":71,"url":null},"def":{"name":"new","args":[{"name":"version","external_name":"version","restriction":""},{"name":"trace_id","external_name":"trace_id","restriction":""},{"name":"span_id","external_name":"span_id","restriction":""},{"name":"trace_flags","external_name":"trace_flags","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(version, trace_id, span_id, trace_flags)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(trace_id,span_id,trace_flags)-class-method","name":"new","abstract":false,"args":[{"name":"trace_id","external_name":"trace_id","restriction":""},{"name":"span_id","external_name":"span_id","restriction":""},{"name":"trace_flags","external_name":"trace_flags","restriction":""}],"args_string":"(trace_id, span_id, trace_flags)","args_html":"(trace_id, span_id, trace_flags)","location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":67,"url":null},"def":{"name":"new","args":[{"name":"trace_id","external_name":"trace_id","restriction":""},{"name":"span_id","external_name":"span_id","restriction":""},{"name":"trace_flags","external_name":"trace_flags","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(trace_id, span_id, trace_flags)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(parts:Array(String))-class-method","name":"new","abstract":false,"args":[{"name":"parts","external_name":"parts","restriction":"Array(String)"}],"args_string":"(parts : Array(String))","args_html":"(parts : Array(<a href=\"../../../String.html\">String</a>))","location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":63,"url":null},"def":{"name":"new","args":[{"name":"parts","external_name":"parts","restriction":"Array(String)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(parts)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":51,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"span_id:Bytes-instance-method","name":"span_id","abstract":false,"location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":37,"url":null},"def":{"name":"span_id","return_type":"Bytes","visibility":"Public","body":"@span_id"}},{"html_id":"span_id=(span_id:Bytes)-instance-method","name":"span_id=","abstract":false,"args":[{"name":"span_id","external_name":"span_id","restriction":"Bytes"}],"args_string":"(span_id : Bytes)","args_html":"(span_id : Bytes)","location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":37,"url":null},"def":{"name":"span_id=","args":[{"name":"span_id","external_name":"span_id","restriction":"Bytes"}],"visibility":"Public","body":"@span_id = span_id"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":118,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"#{@version.hexstring.lpad(2, '0')}-#{@trace_id.hexstring.lpad(32, '0')}-#{@span_id.hexstring.lpad(16, '0')}-#{@trace_flags.value.to_s.lpad(2, '0')}\""}},{"html_id":"trace_flags:TraceFlags-instance-method","name":"trace_flags","abstract":false,"location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":38,"url":null},"def":{"name":"trace_flags","return_type":"TraceFlags","visibility":"Public","body":"@trace_flags"}},{"html_id":"trace_flags=(trace_flags:TraceFlags)-instance-method","name":"trace_flags=","abstract":false,"args":[{"name":"trace_flags","external_name":"trace_flags","restriction":"TraceFlags"}],"args_string":"(trace_flags : TraceFlags)","args_html":"(trace_flags : <a href=\"../../../OpenTelemetry/TraceFlags.html\">TraceFlags</a>)","location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":38,"url":null},"def":{"name":"trace_flags=","args":[{"name":"trace_flags","external_name":"trace_flags","restriction":"TraceFlags"}],"visibility":"Public","body":"@trace_flags = trace_flags"}},{"html_id":"trace_id:Bytes-instance-method","name":"trace_id","abstract":false,"location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":36,"url":null},"def":{"name":"trace_id","return_type":"Bytes","visibility":"Public","body":"@trace_id"}},{"html_id":"trace_id=(trace_id:Bytes)-instance-method","name":"trace_id=","abstract":false,"args":[{"name":"trace_id","external_name":"trace_id","restriction":"Bytes"}],"args_string":"(trace_id : Bytes)","args_html":"(trace_id : Bytes)","location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":36,"url":null},"def":{"name":"trace_id=","args":[{"name":"trace_id","external_name":"trace_id","restriction":"Bytes"}],"visibility":"Public","body":"@trace_id = trace_id"}},{"html_id":"valid?-instance-method","name":"valid?","abstract":false,"location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":114,"url":null},"def":{"name":"valid?","visibility":"Public","body":"MATCH.match(to_s)"}},{"html_id":"version:Bytes-instance-method","name":"version","abstract":false,"location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":35,"url":null},"def":{"name":"version","return_type":"Bytes","visibility":"Public","body":"@version"}},{"html_id":"version=(version:Bytes)-instance-method","name":"version=","abstract":false,"args":[{"name":"version","external_name":"version","restriction":"Bytes"}],"args_string":"(version : Bytes)","args_html":"(version : Bytes)","location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":35,"url":null},"def":{"name":"version=","args":[{"name":"version","external_name":"version","restriction":"Bytes"}],"visibility":"Public","body":"@version = version"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Propagation/TraceContext/TraceParent/InvalidFormatError","path":"OpenTelemetry/Propagation/TraceContext/TraceParent/InvalidFormatError.html","kind":"class","full_name":"OpenTelemetry::Propagation::TraceContext::TraceParent::InvalidFormatError","name":"InvalidFormatError","abstract":false,"superclass":{"html_id":"opentelemetry-api/ArgumentError","kind":"class","full_name":"ArgumentError","name":"ArgumentError"},"ancestors":[{"html_id":"opentelemetry-api/ArgumentError","kind":"class","full_name":"ArgumentError","name":"ArgumentError"},{"html_id":"opentelemetry-api/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":5,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Propagation/TraceContext/TraceParent","kind":"struct","full_name":"OpenTelemetry::Propagation::TraceContext::TraceParent","name":"TraceParent"},"constructors":[{"html_id":"new(format)-class-method","name":"new","abstract":false,"args":[{"name":"format","external_name":"format","restriction":""}],"args_string":"(format)","args_html":"(format)","location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":6,"url":null},"def":{"name":"new","args":[{"name":"format","external_name":"format","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(format)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Propagation/TraceContext/TraceParent/InvalidSpanIdError","path":"OpenTelemetry/Propagation/TraceContext/TraceParent/InvalidSpanIdError.html","kind":"class","full_name":"OpenTelemetry::Propagation::TraceContext::TraceParent::InvalidSpanIdError","name":"InvalidSpanIdError","abstract":false,"superclass":{"html_id":"opentelemetry-api/ArgumentError","kind":"class","full_name":"ArgumentError","name":"ArgumentError"},"ancestors":[{"html_id":"opentelemetry-api/ArgumentError","kind":"class","full_name":"ArgumentError","name":"ArgumentError"},{"html_id":"opentelemetry-api/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":23,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Propagation/TraceContext/TraceParent","kind":"struct","full_name":"OpenTelemetry::Propagation::TraceContext::TraceParent","name":"TraceParent"},"constructors":[{"html_id":"new(span_id)-class-method","name":"new","abstract":false,"args":[{"name":"span_id","external_name":"span_id","restriction":""}],"args_string":"(span_id)","args_html":"(span_id)","location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":24,"url":null},"def":{"name":"new","args":[{"name":"span_id","external_name":"span_id","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(span_id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Propagation/TraceContext/TraceParent/InvalidTraceFlagsIdError","path":"OpenTelemetry/Propagation/TraceContext/TraceParent/InvalidTraceFlagsIdError.html","kind":"class","full_name":"OpenTelemetry::Propagation::TraceContext::TraceParent::InvalidTraceFlagsIdError","name":"InvalidTraceFlagsIdError","abstract":false,"superclass":{"html_id":"opentelemetry-api/ArgumentError","kind":"class","full_name":"ArgumentError","name":"ArgumentError"},"ancestors":[{"html_id":"opentelemetry-api/ArgumentError","kind":"class","full_name":"ArgumentError","name":"ArgumentError"},{"html_id":"opentelemetry-api/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":29,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Propagation/TraceContext/TraceParent","kind":"struct","full_name":"OpenTelemetry::Propagation::TraceContext::TraceParent","name":"TraceParent"},"constructors":[{"html_id":"new(trace_flags)-class-method","name":"new","abstract":false,"args":[{"name":"trace_flags","external_name":"trace_flags","restriction":""}],"args_string":"(trace_flags)","args_html":"(trace_flags)","location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":30,"url":null},"def":{"name":"new","args":[{"name":"trace_flags","external_name":"trace_flags","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(trace_flags)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Propagation/TraceContext/TraceParent/InvalidTraceIdError","path":"OpenTelemetry/Propagation/TraceContext/TraceParent/InvalidTraceIdError.html","kind":"class","full_name":"OpenTelemetry::Propagation::TraceContext::TraceParent::InvalidTraceIdError","name":"InvalidTraceIdError","abstract":false,"superclass":{"html_id":"opentelemetry-api/ArgumentError","kind":"class","full_name":"ArgumentError","name":"ArgumentError"},"ancestors":[{"html_id":"opentelemetry-api/ArgumentError","kind":"class","full_name":"ArgumentError","name":"ArgumentError"},{"html_id":"opentelemetry-api/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":17,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Propagation/TraceContext/TraceParent","kind":"struct","full_name":"OpenTelemetry::Propagation::TraceContext::TraceParent","name":"TraceParent"},"constructors":[{"html_id":"new(trace_id)-class-method","name":"new","abstract":false,"args":[{"name":"trace_id","external_name":"trace_id","restriction":""}],"args_string":"(trace_id)","args_html":"(trace_id)","location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":18,"url":null},"def":{"name":"new","args":[{"name":"trace_id","external_name":"trace_id","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(trace_id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Propagation/TraceContext/TraceParent/InvalidVersionError","path":"OpenTelemetry/Propagation/TraceContext/TraceParent/InvalidVersionError.html","kind":"class","full_name":"OpenTelemetry::Propagation::TraceContext::TraceParent::InvalidVersionError","name":"InvalidVersionError","abstract":false,"superclass":{"html_id":"opentelemetry-api/ArgumentError","kind":"class","full_name":"ArgumentError","name":"ArgumentError"},"ancestors":[{"html_id":"opentelemetry-api/ArgumentError","kind":"class","full_name":"ArgumentError","name":"ArgumentError"},{"html_id":"opentelemetry-api/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":11,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Propagation/TraceContext/TraceParent","kind":"struct","full_name":"OpenTelemetry::Propagation::TraceContext::TraceParent","name":"TraceParent"},"constructors":[{"html_id":"new(version)-class-method","name":"new","abstract":false,"args":[{"name":"version","external_name":"version","restriction":""}],"args_string":"(version)","args_html":"(version)","location":{"filename":"src/opentelemetry-api/propagation/trace_context/trace_parent.cr","line_number":12,"url":null},"def":{"name":"new","args":[{"name":"version","external_name":"version","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(version)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]}]}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto","path":"OpenTelemetry/Proto.html","kind":"module","full_name":"OpenTelemetry::Proto","name":"Proto","abstract":false,"locations":[{"filename":"src/proto/common.pb.cr","line_number":5,"url":null},{"filename":"src/proto/logs.pb.cr","line_number":8,"url":null},{"filename":"src/proto/logs_service.pb.cr","line_number":7,"url":null},{"filename":"src/proto/metrics.pb.cr","line_number":8,"url":null},{"filename":"src/proto/metrics_config_service.pb.cr","line_number":7,"url":null},{"filename":"src/proto/metrics_service.pb.cr","line_number":7,"url":null},{"filename":"src/proto/resource.pb.cr","line_number":7,"url":null},{"filename":"src/proto/trace.pb.cr","line_number":8,"url":null},{"filename":"src/proto/trace_config.pb.cr","line_number":5,"url":null},{"filename":"src/proto/trace_service.pb.cr","line_number":7,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector","path":"OpenTelemetry/Proto/Collector.html","kind":"module","full_name":"OpenTelemetry::Proto::Collector","name":"Collector","abstract":false,"locations":[{"filename":"src/proto/logs_service.pb.cr","line_number":8,"url":null},{"filename":"src/proto/metrics_service.pb.cr","line_number":8,"url":null},{"filename":"src/proto/trace_service.pb.cr","line_number":8,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto","kind":"module","full_name":"OpenTelemetry::Proto","name":"Proto"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Logs","path":"OpenTelemetry/Proto/Collector/Logs.html","kind":"module","full_name":"OpenTelemetry::Proto::Collector::Logs","name":"Logs","abstract":false,"locations":[{"filename":"src/proto/logs_service.pb.cr","line_number":9,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector","kind":"module","full_name":"OpenTelemetry::Proto::Collector","name":"Collector"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Logs/V1","path":"OpenTelemetry/Proto/Collector/Logs/V1.html","kind":"module","full_name":"OpenTelemetry::Proto::Collector::Logs::V1","name":"V1","abstract":false,"locations":[{"filename":"src/proto/logs_service.pb.cr","line_number":10,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Logs","kind":"module","full_name":"OpenTelemetry::Proto::Collector::Logs","name":"Logs"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Logs/V1/ExportLogsServiceRequest","path":"OpenTelemetry/Proto/Collector/Logs/V1/ExportLogsServiceRequest.html","kind":"struct","full_name":"OpenTelemetry::Proto::Collector::Logs::V1::ExportLogsServiceRequest","name":"ExportLogsServiceRequest","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/logs_service.pb.cr","line_number":11,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :resource_logs, pb_type: OpenTelemetry::Proto::Logs::V1::ResourceLogs, crystal_type: OpenTelemetry::Proto::Logs::V1::ResourceLogs, cast_type: Array(OpenTelemetry::Proto::Logs::V1::ResourceLogs)?, native: false, optional: true, repeated: true, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Logs/V1","kind":"module","full_name":"OpenTelemetry::Proto::Collector::Logs::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(resource_logs:Array(OpenTelemetry::Proto::Logs::V1::ResourceLogs)?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"resource_logs","default_value":"nil","external_name":"resource_logs","restriction":"Array(OpenTelemetry::Proto::Logs::V1::ResourceLogs) | ::Nil"}],"args_string":"(resource_logs : Array(OpenTelemetry::Proto::Logs::V1::ResourceLogs)? = nil)","args_html":"(resource_logs : Array(<a href=\"../../../../../OpenTelemetry/Proto/Logs/V1/ResourceLogs.html\">OpenTelemetry::Proto::Logs::V1::ResourceLogs</a>)? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"resource_logs","default_value":"nil","external_name":"resource_logs","restriction":"Array(OpenTelemetry::Proto::Logs::V1::ResourceLogs) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(resource_logs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"resource_logs\" == key\n  return self.resource_logs\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"resource_logs:Array(OpenTelemetry::Proto::Logs::V1::ResourceLogs)?-instance-method","name":"resource_logs","abstract":false,"def":{"name":"resource_logs","return_type":"Array(OpenTelemetry::Proto::Logs::V1::ResourceLogs) | ::Nil","visibility":"Public","body":"@resource_logs"}},{"html_id":"resource_logs=(resource_logs:Array(OpenTelemetry::Proto::Logs::V1::ResourceLogs)?)-instance-method","name":"resource_logs=","abstract":false,"args":[{"name":"resource_logs","external_name":"resource_logs","restriction":"Array(OpenTelemetry::Proto::Logs::V1::ResourceLogs) | ::Nil"}],"args_string":"(resource_logs : Array(OpenTelemetry::Proto::Logs::V1::ResourceLogs)?)","args_html":"(resource_logs : Array(<a href=\"../../../../../OpenTelemetry/Proto/Logs/V1/ResourceLogs.html\">OpenTelemetry::Proto::Logs::V1::ResourceLogs</a>)?)","def":{"name":"resource_logs=","args":[{"name":"resource_logs","external_name":"resource_logs","restriction":"Array(OpenTelemetry::Proto::Logs::V1::ResourceLogs) | ::Nil"}],"visibility":"Public","body":"@resource_logs = resource_logs"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_936 = @resource_logs\n__temp_937 = __temp_936.is_a?(Enum) || (__temp_936.is_a?(Array) && __temp_936.first?.is_a?(Enum))\n__temp_938 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Logs::V1::ResourceLogs, __temp_937 ? 0 : 2)\nif !@resource_logs.nil?\n  @resource_logs.not_nil!.each do |item|\n    buf.write_info(1, __temp_938)\n    buf.write_message(item)\n  end\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Logs/V1/ExportLogsServiceResponse","path":"OpenTelemetry/Proto/Collector/Logs/V1/ExportLogsServiceResponse.html","kind":"struct","full_name":"OpenTelemetry::Proto::Collector::Logs::V1::ExportLogsServiceResponse","name":"ExportLogsServiceResponse","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/logs_service.pb.cr","line_number":19,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Logs/V1","kind":"module","full_name":"OpenTelemetry::Proto::Collector::Logs::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new-class-method","name":"new","abstract":false,"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"raise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Metrics","path":"OpenTelemetry/Proto/Collector/Metrics.html","kind":"module","full_name":"OpenTelemetry::Proto::Collector::Metrics","name":"Metrics","abstract":false,"locations":[{"filename":"src/proto/metrics_service.pb.cr","line_number":9,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector","kind":"module","full_name":"OpenTelemetry::Proto::Collector","name":"Collector"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Metrics/V1","path":"OpenTelemetry/Proto/Collector/Metrics/V1.html","kind":"module","full_name":"OpenTelemetry::Proto::Collector::Metrics::V1","name":"V1","abstract":false,"locations":[{"filename":"src/proto/metrics_service.pb.cr","line_number":10,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Metrics","kind":"module","full_name":"OpenTelemetry::Proto::Collector::Metrics","name":"Metrics"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Metrics/V1/ExportMetricsServiceRequest","path":"OpenTelemetry/Proto/Collector/Metrics/V1/ExportMetricsServiceRequest.html","kind":"struct","full_name":"OpenTelemetry::Proto::Collector::Metrics::V1::ExportMetricsServiceRequest","name":"ExportMetricsServiceRequest","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics_service.pb.cr","line_number":11,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :resource_metrics, pb_type: OpenTelemetry::Proto::Metrics::V1::ResourceMetrics, crystal_type: OpenTelemetry::Proto::Metrics::V1::ResourceMetrics, cast_type: Array(OpenTelemetry::Proto::Metrics::V1::ResourceMetrics)?, native: false, optional: true, repeated: true, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Collector::Metrics::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(resource_metrics:Array(OpenTelemetry::Proto::Metrics::V1::ResourceMetrics)?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"resource_metrics","default_value":"nil","external_name":"resource_metrics","restriction":"Array(OpenTelemetry::Proto::Metrics::V1::ResourceMetrics) | ::Nil"}],"args_string":"(resource_metrics : Array(OpenTelemetry::Proto::Metrics::V1::ResourceMetrics)? = nil)","args_html":"(resource_metrics : Array(<a href=\"../../../../../OpenTelemetry/Proto/Metrics/V1/ResourceMetrics.html\">OpenTelemetry::Proto::Metrics::V1::ResourceMetrics</a>)? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"resource_metrics","default_value":"nil","external_name":"resource_metrics","restriction":"Array(OpenTelemetry::Proto::Metrics::V1::ResourceMetrics) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(resource_metrics)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"resource_metrics\" == key\n  return self.resource_metrics\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"resource_metrics:Array(OpenTelemetry::Proto::Metrics::V1::ResourceMetrics)?-instance-method","name":"resource_metrics","abstract":false,"def":{"name":"resource_metrics","return_type":"Array(OpenTelemetry::Proto::Metrics::V1::ResourceMetrics) | ::Nil","visibility":"Public","body":"@resource_metrics"}},{"html_id":"resource_metrics=(resource_metrics:Array(OpenTelemetry::Proto::Metrics::V1::ResourceMetrics)?)-instance-method","name":"resource_metrics=","abstract":false,"args":[{"name":"resource_metrics","external_name":"resource_metrics","restriction":"Array(OpenTelemetry::Proto::Metrics::V1::ResourceMetrics) | ::Nil"}],"args_string":"(resource_metrics : Array(OpenTelemetry::Proto::Metrics::V1::ResourceMetrics)?)","args_html":"(resource_metrics : Array(<a href=\"../../../../../OpenTelemetry/Proto/Metrics/V1/ResourceMetrics.html\">OpenTelemetry::Proto::Metrics::V1::ResourceMetrics</a>)?)","def":{"name":"resource_metrics=","args":[{"name":"resource_metrics","external_name":"resource_metrics","restriction":"Array(OpenTelemetry::Proto::Metrics::V1::ResourceMetrics) | ::Nil"}],"visibility":"Public","body":"@resource_metrics = resource_metrics"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1495 = @resource_metrics\n__temp_1496 = __temp_1495.is_a?(Enum) || (__temp_1495.is_a?(Array) && __temp_1495.first?.is_a?(Enum))\n__temp_1497 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Metrics::V1::ResourceMetrics, __temp_1496 ? 0 : 2)\nif !@resource_metrics.nil?\n  @resource_metrics.not_nil!.each do |item|\n    buf.write_info(1, __temp_1497)\n    buf.write_message(item)\n  end\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Metrics/V1/ExportMetricsServiceResponse","path":"OpenTelemetry/Proto/Collector/Metrics/V1/ExportMetricsServiceResponse.html","kind":"struct","full_name":"OpenTelemetry::Proto::Collector::Metrics::V1::ExportMetricsServiceResponse","name":"ExportMetricsServiceResponse","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics_service.pb.cr","line_number":19,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Collector::Metrics::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new-class-method","name":"new","abstract":false,"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"raise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Trace","path":"OpenTelemetry/Proto/Collector/Trace.html","kind":"module","full_name":"OpenTelemetry::Proto::Collector::Trace","name":"Trace","abstract":false,"locations":[{"filename":"src/proto/trace_service.pb.cr","line_number":9,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector","kind":"module","full_name":"OpenTelemetry::Proto::Collector","name":"Collector"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Trace/V1","path":"OpenTelemetry/Proto/Collector/Trace/V1.html","kind":"module","full_name":"OpenTelemetry::Proto::Collector::Trace::V1","name":"V1","abstract":false,"locations":[{"filename":"src/proto/trace_service.pb.cr","line_number":10,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Trace","kind":"module","full_name":"OpenTelemetry::Proto::Collector::Trace","name":"Trace"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Trace/V1/ExportTraceServiceRequest","path":"OpenTelemetry/Proto/Collector/Trace/V1/ExportTraceServiceRequest.html","kind":"struct","full_name":"OpenTelemetry::Proto::Collector::Trace::V1::ExportTraceServiceRequest","name":"ExportTraceServiceRequest","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/trace_service.pb.cr","line_number":11,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :resource_spans, pb_type: OpenTelemetry::Proto::Trace::V1::ResourceSpans, crystal_type: OpenTelemetry::Proto::Trace::V1::ResourceSpans, cast_type: Array(OpenTelemetry::Proto::Trace::V1::ResourceSpans)?, native: false, optional: true, repeated: true, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Trace/V1","kind":"module","full_name":"OpenTelemetry::Proto::Collector::Trace::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(resource_spans:Array(OpenTelemetry::Proto::Trace::V1::ResourceSpans)?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"resource_spans","default_value":"nil","external_name":"resource_spans","restriction":"Array(OpenTelemetry::Proto::Trace::V1::ResourceSpans) | ::Nil"}],"args_string":"(resource_spans : Array(OpenTelemetry::Proto::Trace::V1::ResourceSpans)? = nil)","args_html":"(resource_spans : Array(<a href=\"../../../../../OpenTelemetry/Proto/Trace/V1/ResourceSpans.html\">OpenTelemetry::Proto::Trace::V1::ResourceSpans</a>)? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"resource_spans","default_value":"nil","external_name":"resource_spans","restriction":"Array(OpenTelemetry::Proto::Trace::V1::ResourceSpans) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(resource_spans)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"resource_spans\" == key\n  return self.resource_spans\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"resource_spans:Array(OpenTelemetry::Proto::Trace::V1::ResourceSpans)?-instance-method","name":"resource_spans","abstract":false,"def":{"name":"resource_spans","return_type":"Array(OpenTelemetry::Proto::Trace::V1::ResourceSpans) | ::Nil","visibility":"Public","body":"@resource_spans"}},{"html_id":"resource_spans=(resource_spans:Array(OpenTelemetry::Proto::Trace::V1::ResourceSpans)?)-instance-method","name":"resource_spans=","abstract":false,"args":[{"name":"resource_spans","external_name":"resource_spans","restriction":"Array(OpenTelemetry::Proto::Trace::V1::ResourceSpans) | ::Nil"}],"args_string":"(resource_spans : Array(OpenTelemetry::Proto::Trace::V1::ResourceSpans)?)","args_html":"(resource_spans : Array(<a href=\"../../../../../OpenTelemetry/Proto/Trace/V1/ResourceSpans.html\">OpenTelemetry::Proto::Trace::V1::ResourceSpans</a>)?)","def":{"name":"resource_spans=","args":[{"name":"resource_spans","external_name":"resource_spans","restriction":"Array(OpenTelemetry::Proto::Trace::V1::ResourceSpans) | ::Nil"}],"visibility":"Public","body":"@resource_spans = resource_spans"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_735 = @resource_spans\n__temp_736 = __temp_735.is_a?(Enum) || (__temp_735.is_a?(Array) && __temp_735.first?.is_a?(Enum))\n__temp_737 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Trace::V1::ResourceSpans, __temp_736 ? 0 : 2)\nif !@resource_spans.nil?\n  @resource_spans.not_nil!.each do |item|\n    buf.write_info(1, __temp_737)\n    buf.write_message(item)\n  end\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Trace/V1/ExportTraceServiceResponse","path":"OpenTelemetry/Proto/Collector/Trace/V1/ExportTraceServiceResponse.html","kind":"struct","full_name":"OpenTelemetry::Proto::Collector::Trace::V1::ExportTraceServiceResponse","name":"ExportTraceServiceResponse","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/trace_service.pb.cr","line_number":19,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Collector/Trace/V1","kind":"module","full_name":"OpenTelemetry::Proto::Collector::Trace::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new-class-method","name":"new","abstract":false,"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"raise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]}]}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Common","path":"OpenTelemetry/Proto/Common.html","kind":"module","full_name":"OpenTelemetry::Proto::Common","name":"Common","abstract":false,"locations":[{"filename":"src/proto/common.pb.cr","line_number":6,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto","kind":"module","full_name":"OpenTelemetry::Proto","name":"Proto"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Common/V1","path":"OpenTelemetry/Proto/Common/V1.html","kind":"module","full_name":"OpenTelemetry::Proto::Common::V1","name":"V1","abstract":false,"locations":[{"filename":"src/proto/common.pb.cr","line_number":7,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Common","kind":"module","full_name":"OpenTelemetry::Proto::Common","name":"Common"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Common/V1/AnyValue","path":"OpenTelemetry/Proto/Common/V1/AnyValue.html","kind":"struct","full_name":"OpenTelemetry::Proto::Common::V1::AnyValue","name":"AnyValue","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/common.pb.cr","line_number":8,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :string_value, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :bool_value, pb_type: :bool, crystal_type: Bool, cast_type: Bool?, native: true, optional: true, repeated: false, default: nil, packed: false}, 3 => {name: :int_value, pb_type: :int64, crystal_type: Int64, cast_type: Int64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 4 => {name: :double_value, pb_type: :double, crystal_type: Float64, cast_type: Float64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 5 => {name: :array_value, pb_type: ArrayValue, crystal_type: ArrayValue, cast_type: ArrayValue?, native: false, optional: true, repeated: false, default: nil, packed: false}, 6 => {name: :kvlist_value, pb_type: KeyValueList, crystal_type: KeyValueList, cast_type: KeyValueList?, native: false, optional: true, repeated: false, default: nil, packed: false}, 7 => {name: :bytes_value, pb_type: :bytes, crystal_type: Slice(UInt8), cast_type: Slice(UInt8)?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Common/V1","kind":"module","full_name":"OpenTelemetry::Proto::Common::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(string_value:String?=nil,bool_value:Bool?=nil,int_value:Int64?=nil,double_value:Float64?=nil,array_value:ArrayValue?=nil,kvlist_value:KeyValueList?=nil,bytes_value:Slice(UInt8)?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"string_value","default_value":"nil","external_name":"string_value","restriction":"String | ::Nil"},{"name":"bool_value","default_value":"nil","external_name":"bool_value","restriction":"Bool | ::Nil"},{"name":"int_value","default_value":"nil","external_name":"int_value","restriction":"Int64 | ::Nil"},{"name":"double_value","default_value":"nil","external_name":"double_value","restriction":"Float64 | ::Nil"},{"name":"array_value","default_value":"nil","external_name":"array_value","restriction":"ArrayValue | ::Nil"},{"name":"kvlist_value","default_value":"nil","external_name":"kvlist_value","restriction":"KeyValueList | ::Nil"},{"name":"bytes_value","default_value":"nil","external_name":"bytes_value","restriction":"Slice(UInt8) | ::Nil"}],"args_string":"(string_value : String? = nil, bool_value : Bool? = nil, int_value : Int64? = nil, double_value : Float64? = nil, array_value : ArrayValue? = nil, kvlist_value : KeyValueList? = nil, bytes_value : Slice(UInt8)? = nil)","args_html":"(string_value : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>, bool_value : Bool? = <span class=\"n\">nil</span>, int_value : Int64? = <span class=\"n\">nil</span>, double_value : Float64? = <span class=\"n\">nil</span>, array_value : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/ArrayValue.html\">ArrayValue</a>? = <span class=\"n\">nil</span>, kvlist_value : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValueList.html\">KeyValueList</a>? = <span class=\"n\">nil</span>, bytes_value : Slice(UInt8)? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"string_value","default_value":"nil","external_name":"string_value","restriction":"String | ::Nil"},{"name":"bool_value","default_value":"nil","external_name":"bool_value","restriction":"Bool | ::Nil"},{"name":"int_value","default_value":"nil","external_name":"int_value","restriction":"Int64 | ::Nil"},{"name":"double_value","default_value":"nil","external_name":"double_value","restriction":"Float64 | ::Nil"},{"name":"array_value","default_value":"nil","external_name":"array_value","restriction":"ArrayValue | ::Nil"},{"name":"kvlist_value","default_value":"nil","external_name":"kvlist_value","restriction":"KeyValueList | ::Nil"},{"name":"bytes_value","default_value":"nil","external_name":"bytes_value","restriction":"Slice(UInt8) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(string_value, bool_value, int_value, double_value, array_value, kvlist_value, bytes_value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"string_value\" == key\n  return self.string_value\nend\nif \"bool_value\" == key\n  return self.bool_value\nend\nif \"int_value\" == key\n  return self.int_value\nend\nif \"double_value\" == key\n  return self.double_value\nend\nif \"array_value\" == key\n  return self.array_value\nend\nif \"kvlist_value\" == key\n  return self.kvlist_value\nend\nif \"bytes_value\" == key\n  return self.bytes_value\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"array_value:ArrayValue?-instance-method","name":"array_value","abstract":false,"def":{"name":"array_value","return_type":"ArrayValue | ::Nil","visibility":"Public","body":"@array_value"}},{"html_id":"array_value=(array_value:ArrayValue?)-instance-method","name":"array_value=","abstract":false,"args":[{"name":"array_value","external_name":"array_value","restriction":"ArrayValue | ::Nil"}],"args_string":"(array_value : ArrayValue?)","args_html":"(array_value : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/ArrayValue.html\">ArrayValue</a>?)","def":{"name":"array_value=","args":[{"name":"array_value","external_name":"array_value","restriction":"ArrayValue | ::Nil"}],"visibility":"Public","body":"@array_value = array_value"}},{"html_id":"bool_value:Bool?-instance-method","name":"bool_value","abstract":false,"def":{"name":"bool_value","return_type":"Bool | ::Nil","visibility":"Public","body":"@bool_value"}},{"html_id":"bool_value=(bool_value:Bool?)-instance-method","name":"bool_value=","abstract":false,"args":[{"name":"bool_value","external_name":"bool_value","restriction":"Bool | ::Nil"}],"args_string":"(bool_value : Bool?)","args_html":"(bool_value : Bool?)","def":{"name":"bool_value=","args":[{"name":"bool_value","external_name":"bool_value","restriction":"Bool | ::Nil"}],"visibility":"Public","body":"@bool_value = bool_value"}},{"html_id":"bytes_value:Slice(UInt8)?-instance-method","name":"bytes_value","abstract":false,"def":{"name":"bytes_value","return_type":"Slice(UInt8) | ::Nil","visibility":"Public","body":"@bytes_value"}},{"html_id":"bytes_value=(bytes_value:Slice(UInt8)?)-instance-method","name":"bytes_value=","abstract":false,"args":[{"name":"bytes_value","external_name":"bytes_value","restriction":"Slice(UInt8) | ::Nil"}],"args_string":"(bytes_value : Slice(UInt8)?)","args_html":"(bytes_value : Slice(UInt8)?)","def":{"name":"bytes_value=","args":[{"name":"bytes_value","external_name":"bytes_value","restriction":"Slice(UInt8) | ::Nil"}],"visibility":"Public","body":"@bytes_value = bytes_value"}},{"html_id":"double_value:Float64?-instance-method","name":"double_value","abstract":false,"def":{"name":"double_value","return_type":"Float64 | ::Nil","visibility":"Public","body":"@double_value"}},{"html_id":"double_value=(double_value:Float64?)-instance-method","name":"double_value=","abstract":false,"args":[{"name":"double_value","external_name":"double_value","restriction":"Float64 | ::Nil"}],"args_string":"(double_value : Float64?)","args_html":"(double_value : Float64?)","def":{"name":"double_value=","args":[{"name":"double_value","external_name":"double_value","restriction":"Float64 | ::Nil"}],"visibility":"Public","body":"@double_value = double_value"}},{"html_id":"int_value:Int64?-instance-method","name":"int_value","abstract":false,"def":{"name":"int_value","return_type":"Int64 | ::Nil","visibility":"Public","body":"@int_value"}},{"html_id":"int_value=(int_value:Int64?)-instance-method","name":"int_value=","abstract":false,"args":[{"name":"int_value","external_name":"int_value","restriction":"Int64 | ::Nil"}],"args_string":"(int_value : Int64?)","args_html":"(int_value : Int64?)","def":{"name":"int_value=","args":[{"name":"int_value","external_name":"int_value","restriction":"Int64 | ::Nil"}],"visibility":"Public","body":"@int_value = int_value"}},{"html_id":"kvlist_value:KeyValueList?-instance-method","name":"kvlist_value","abstract":false,"def":{"name":"kvlist_value","return_type":"KeyValueList | ::Nil","visibility":"Public","body":"@kvlist_value"}},{"html_id":"kvlist_value=(kvlist_value:KeyValueList?)-instance-method","name":"kvlist_value=","abstract":false,"args":[{"name":"kvlist_value","external_name":"kvlist_value","restriction":"KeyValueList | ::Nil"}],"args_string":"(kvlist_value : KeyValueList?)","args_html":"(kvlist_value : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValueList.html\">KeyValueList</a>?)","def":{"name":"kvlist_value=","args":[{"name":"kvlist_value","external_name":"kvlist_value","restriction":"KeyValueList | ::Nil"}],"visibility":"Public","body":"@kvlist_value = kvlist_value"}},{"html_id":"string_value:String?-instance-method","name":"string_value","abstract":false,"def":{"name":"string_value","return_type":"String | ::Nil","visibility":"Public","body":"@string_value"}},{"html_id":"string_value=(string_value:String?)-instance-method","name":"string_value=","abstract":false,"args":[{"name":"string_value","external_name":"string_value","restriction":"String | ::Nil"}],"args_string":"(string_value : String?)","args_html":"(string_value : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"string_value=","args":[{"name":"string_value","external_name":"string_value","restriction":"String | ::Nil"}],"visibility":"Public","body":"@string_value = string_value"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_408 = @string_value\n__temp_409 = __temp_408.is_a?(Enum) || (__temp_408.is_a?(Array) && __temp_408.first?.is_a?(Enum))\n__temp_410 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_409 ? 0 : 2)\nif !@string_value.nil?\n  buf.write_info(1, __temp_410)\n  buf.write_string(@string_value.not_nil!)\nend\n__temp_411 = @bool_value\n__temp_412 = __temp_411.is_a?(Enum) || (__temp_411.is_a?(Array) && __temp_411.first?.is_a?(Enum))\n__temp_413 = ::Protobuf::WIRE_TYPES.fetch(:bool, __temp_412 ? 0 : 2)\nif !@bool_value.nil?\n  buf.write_info(2, __temp_413)\n  buf.write_bool(@bool_value.not_nil!)\nend\n__temp_414 = @int_value\n__temp_415 = __temp_414.is_a?(Enum) || (__temp_414.is_a?(Array) && __temp_414.first?.is_a?(Enum))\n__temp_416 = ::Protobuf::WIRE_TYPES.fetch(:int64, __temp_415 ? 0 : 2)\nif !@int_value.nil?\n  buf.write_info(3, __temp_416)\n  buf.write_int64(@int_value.not_nil!)\nend\n__temp_417 = @double_value\n__temp_418 = __temp_417.is_a?(Enum) || (__temp_417.is_a?(Array) && __temp_417.first?.is_a?(Enum))\n__temp_419 = ::Protobuf::WIRE_TYPES.fetch(:double, __temp_418 ? 0 : 2)\nif !@double_value.nil?\n  buf.write_info(4, __temp_419)\n  buf.write_double(@double_value.not_nil!)\nend\n__temp_420 = @array_value\n__temp_421 = __temp_420.is_a?(Enum) || (__temp_420.is_a?(Array) && __temp_420.first?.is_a?(Enum))\n__temp_422 = ::Protobuf::WIRE_TYPES.fetch(ArrayValue, __temp_421 ? 0 : 2)\nif !@array_value.nil?\n  buf.write_info(5, __temp_422)\n  buf.write_message(@array_value.not_nil!)\nend\n__temp_423 = @kvlist_value\n__temp_424 = __temp_423.is_a?(Enum) || (__temp_423.is_a?(Array) && __temp_423.first?.is_a?(Enum))\n__temp_425 = ::Protobuf::WIRE_TYPES.fetch(KeyValueList, __temp_424 ? 0 : 2)\nif !@kvlist_value.nil?\n  buf.write_info(6, __temp_425)\n  buf.write_message(@kvlist_value.not_nil!)\nend\n__temp_426 = @bytes_value\n__temp_427 = __temp_426.is_a?(Enum) || (__temp_426.is_a?(Array) && __temp_426.first?.is_a?(Enum))\n__temp_428 = ::Protobuf::WIRE_TYPES.fetch(:bytes, __temp_427 ? 0 : 2)\nif !@bytes_value.nil?\n  buf.write_info(7, __temp_428)\n  buf.write_bytes(@bytes_value.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Common/V1/ArrayValue","path":"OpenTelemetry/Proto/Common/V1/ArrayValue.html","kind":"struct","full_name":"OpenTelemetry::Proto::Common::V1::ArrayValue","name":"ArrayValue","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/common.pb.cr","line_number":22,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :values, pb_type: AnyValue, crystal_type: AnyValue, cast_type: Array(AnyValue)?, native: false, optional: true, repeated: true, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Common/V1","kind":"module","full_name":"OpenTelemetry::Proto::Common::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(values:Array(AnyValue)?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"values","default_value":"nil","external_name":"values","restriction":"Array(AnyValue) | ::Nil"}],"args_string":"(values : Array(AnyValue)? = nil)","args_html":"(values : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/AnyValue.html\">AnyValue</a>)? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"values","default_value":"nil","external_name":"values","restriction":"Array(AnyValue) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(values)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"values\" == key\n  return self.values\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_433 = @values\n__temp_434 = __temp_433.is_a?(Enum) || (__temp_433.is_a?(Array) && __temp_433.first?.is_a?(Enum))\n__temp_435 = ::Protobuf::WIRE_TYPES.fetch(AnyValue, __temp_434 ? 0 : 2)\nif !@values.nil?\n  @values.not_nil!.each do |item|\n    buf.write_info(1, __temp_435)\n    buf.write_message(item)\n  end\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}},{"html_id":"values:Array(AnyValue)?-instance-method","name":"values","abstract":false,"def":{"name":"values","return_type":"Array(AnyValue) | ::Nil","visibility":"Public","body":"@values"}},{"html_id":"values=(values:Array(AnyValue)?)-instance-method","name":"values=","abstract":false,"args":[{"name":"values","external_name":"values","restriction":"Array(AnyValue) | ::Nil"}],"args_string":"(values : Array(AnyValue)?)","args_html":"(values : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/AnyValue.html\">AnyValue</a>)?)","def":{"name":"values=","args":[{"name":"values","external_name":"values","restriction":"Array(AnyValue) | ::Nil"}],"visibility":"Public","body":"@values = values"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Common/V1/InstrumentationLibrary","path":"OpenTelemetry/Proto/Common/V1/InstrumentationLibrary.html","kind":"struct","full_name":"OpenTelemetry::Proto::Common::V1::InstrumentationLibrary","name":"InstrumentationLibrary","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/common.pb.cr","line_number":47,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :name, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :version, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Common/V1","kind":"module","full_name":"OpenTelemetry::Proto::Common::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(name:String?=nil,version:String?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"name","default_value":"nil","external_name":"name","restriction":"String | ::Nil"},{"name":"version","default_value":"nil","external_name":"version","restriction":"String | ::Nil"}],"args_string":"(name : String? = nil, version : String? = nil)","args_html":"(name : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>, version : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"name","default_value":"nil","external_name":"name","restriction":"String | ::Nil"},{"name":"version","default_value":"nil","external_name":"version","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(name, version)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"name\" == key\n  return self.name\nend\nif \"version\" == key\n  return self.version\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"name:String?-instance-method","name":"name","abstract":false,"def":{"name":"name","return_type":"String | ::Nil","visibility":"Public","body":"@name"}},{"html_id":"name=(name:String?)-instance-method","name":"name=","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String | ::Nil"}],"args_string":"(name : String?)","args_html":"(name : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String | ::Nil"}],"visibility":"Public","body":"@name = name"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_462 = @name\n__temp_463 = __temp_462.is_a?(Enum) || (__temp_462.is_a?(Array) && __temp_462.first?.is_a?(Enum))\n__temp_464 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_463 ? 0 : 2)\nif !@name.nil?\n  buf.write_info(1, __temp_464)\n  buf.write_string(@name.not_nil!)\nend\n__temp_465 = @version\n__temp_466 = __temp_465.is_a?(Enum) || (__temp_465.is_a?(Array) && __temp_465.first?.is_a?(Enum))\n__temp_467 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_466 ? 0 : 2)\nif !@version.nil?\n  buf.write_info(2, __temp_467)\n  buf.write_string(@version.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}},{"html_id":"version:String?-instance-method","name":"version","abstract":false,"def":{"name":"version","return_type":"String | ::Nil","visibility":"Public","body":"@version"}},{"html_id":"version=(version:String?)-instance-method","name":"version=","abstract":false,"args":[{"name":"version","external_name":"version","restriction":"String | ::Nil"}],"args_string":"(version : String?)","args_html":"(version : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"version=","args":[{"name":"version","external_name":"version","restriction":"String | ::Nil"}],"visibility":"Public","body":"@version = version"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Common/V1/InstrumentationScope","path":"OpenTelemetry/Proto/Common/V1/InstrumentationScope.html","kind":"struct","full_name":"OpenTelemetry::Proto::Common::V1::InstrumentationScope","name":"InstrumentationScope","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/common.pb.cr","line_number":56,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :name, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :version, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Common/V1","kind":"module","full_name":"OpenTelemetry::Proto::Common::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(name:String?=nil,version:String?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"name","default_value":"nil","external_name":"name","restriction":"String | ::Nil"},{"name":"version","default_value":"nil","external_name":"version","restriction":"String | ::Nil"}],"args_string":"(name : String? = nil, version : String? = nil)","args_html":"(name : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>, version : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"name","default_value":"nil","external_name":"name","restriction":"String | ::Nil"},{"name":"version","default_value":"nil","external_name":"version","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(name, version)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"name\" == key\n  return self.name\nend\nif \"version\" == key\n  return self.version\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"name:String?-instance-method","name":"name","abstract":false,"def":{"name":"name","return_type":"String | ::Nil","visibility":"Public","body":"@name"}},{"html_id":"name=(name:String?)-instance-method","name":"name=","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String | ::Nil"}],"args_string":"(name : String?)","args_html":"(name : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String | ::Nil"}],"visibility":"Public","body":"@name = name"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_474 = @name\n__temp_475 = __temp_474.is_a?(Enum) || (__temp_474.is_a?(Array) && __temp_474.first?.is_a?(Enum))\n__temp_476 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_475 ? 0 : 2)\nif !@name.nil?\n  buf.write_info(1, __temp_476)\n  buf.write_string(@name.not_nil!)\nend\n__temp_477 = @version\n__temp_478 = __temp_477.is_a?(Enum) || (__temp_477.is_a?(Array) && __temp_477.first?.is_a?(Enum))\n__temp_479 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_478 ? 0 : 2)\nif !@version.nil?\n  buf.write_info(2, __temp_479)\n  buf.write_string(@version.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}},{"html_id":"version:String?-instance-method","name":"version","abstract":false,"def":{"name":"version","return_type":"String | ::Nil","visibility":"Public","body":"@version"}},{"html_id":"version=(version:String?)-instance-method","name":"version=","abstract":false,"args":[{"name":"version","external_name":"version","restriction":"String | ::Nil"}],"args_string":"(version : String?)","args_html":"(version : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"version=","args":[{"name":"version","external_name":"version","restriction":"String | ::Nil"}],"visibility":"Public","body":"@version = version"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Common/V1/KeyValue","path":"OpenTelemetry/Proto/Common/V1/KeyValue.html","kind":"struct","full_name":"OpenTelemetry::Proto::Common::V1::KeyValue","name":"KeyValue","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/common.pb.cr","line_number":38,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :key, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :value, pb_type: AnyValue, crystal_type: AnyValue, cast_type: AnyValue?, native: false, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Common/V1","kind":"module","full_name":"OpenTelemetry::Proto::Common::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(key:String?=nil,value:AnyValue?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"key","default_value":"nil","external_name":"key","restriction":"String | ::Nil"},{"name":"value","default_value":"nil","external_name":"value","restriction":"AnyValue | ::Nil"}],"args_string":"(key : String? = nil, value : AnyValue? = nil)","args_html":"(key : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>, value : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/AnyValue.html\">AnyValue</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"key","default_value":"nil","external_name":"key","restriction":"String | ::Nil"},{"name":"value","default_value":"nil","external_name":"value","restriction":"AnyValue | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(key, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"key\" == key\n  return self.key\nend\nif \"value\" == key\n  return self.value\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"key:String?-instance-method","name":"key","abstract":false,"def":{"name":"key","return_type":"String | ::Nil","visibility":"Public","body":"@key"}},{"html_id":"key=(key:String?)-instance-method","name":"key=","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String | ::Nil"}],"args_string":"(key : String?)","args_html":"(key : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"key=","args":[{"name":"key","external_name":"key","restriction":"String | ::Nil"}],"visibility":"Public","body":"@key = key"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_450 = @key\n__temp_451 = __temp_450.is_a?(Enum) || (__temp_450.is_a?(Array) && __temp_450.first?.is_a?(Enum))\n__temp_452 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_451 ? 0 : 2)\nif !@key.nil?\n  buf.write_info(1, __temp_452)\n  buf.write_string(@key.not_nil!)\nend\n__temp_453 = @value\n__temp_454 = __temp_453.is_a?(Enum) || (__temp_453.is_a?(Array) && __temp_453.first?.is_a?(Enum))\n__temp_455 = ::Protobuf::WIRE_TYPES.fetch(AnyValue, __temp_454 ? 0 : 2)\nif !@value.nil?\n  buf.write_info(2, __temp_455)\n  buf.write_message(@value.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}},{"html_id":"value:AnyValue?-instance-method","name":"value","abstract":false,"def":{"name":"value","return_type":"AnyValue | ::Nil","visibility":"Public","body":"@value"}},{"html_id":"value=(value:AnyValue?)-instance-method","name":"value=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"AnyValue | ::Nil"}],"args_string":"(value : AnyValue?)","args_html":"(value : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/AnyValue.html\">AnyValue</a>?)","def":{"name":"value=","args":[{"name":"value","external_name":"value","restriction":"AnyValue | ::Nil"}],"visibility":"Public","body":"@value = value"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Common/V1/KeyValueList","path":"OpenTelemetry/Proto/Common/V1/KeyValueList.html","kind":"struct","full_name":"OpenTelemetry::Proto::Common::V1::KeyValueList","name":"KeyValueList","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/common.pb.cr","line_number":30,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :values, pb_type: KeyValue, crystal_type: KeyValue, cast_type: Array(KeyValue)?, native: false, optional: true, repeated: true, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Common/V1","kind":"module","full_name":"OpenTelemetry::Proto::Common::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(values:Array(KeyValue)?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"values","default_value":"nil","external_name":"values","restriction":"Array(KeyValue) | ::Nil"}],"args_string":"(values : Array(KeyValue)? = nil)","args_html":"(values : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">KeyValue</a>)? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"values","default_value":"nil","external_name":"values","restriction":"Array(KeyValue) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(values)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"values\" == key\n  return self.values\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_440 = @values\n__temp_441 = __temp_440.is_a?(Enum) || (__temp_440.is_a?(Array) && __temp_440.first?.is_a?(Enum))\n__temp_442 = ::Protobuf::WIRE_TYPES.fetch(KeyValue, __temp_441 ? 0 : 2)\nif !@values.nil?\n  @values.not_nil!.each do |item|\n    buf.write_info(1, __temp_442)\n    buf.write_message(item)\n  end\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}},{"html_id":"values:Array(KeyValue)?-instance-method","name":"values","abstract":false,"def":{"name":"values","return_type":"Array(KeyValue) | ::Nil","visibility":"Public","body":"@values"}},{"html_id":"values=(values:Array(KeyValue)?)-instance-method","name":"values=","abstract":false,"args":[{"name":"values","external_name":"values","restriction":"Array(KeyValue) | ::Nil"}],"args_string":"(values : Array(KeyValue)?)","args_html":"(values : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">KeyValue</a>)?)","def":{"name":"values=","args":[{"name":"values","external_name":"values","restriction":"Array(KeyValue) | ::Nil"}],"visibility":"Public","body":"@values = values"}}]}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Logs","path":"OpenTelemetry/Proto/Logs.html","kind":"module","full_name":"OpenTelemetry::Proto::Logs","name":"Logs","abstract":false,"locations":[{"filename":"src/proto/logs.pb.cr","line_number":9,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto","kind":"module","full_name":"OpenTelemetry::Proto","name":"Proto"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Logs/V1","path":"OpenTelemetry/Proto/Logs/V1.html","kind":"module","full_name":"OpenTelemetry::Proto::Logs::V1","name":"V1","abstract":false,"locations":[{"filename":"src/proto/logs.pb.cr","line_number":10,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Logs","kind":"module","full_name":"OpenTelemetry::Proto::Logs","name":"Logs"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Logs/V1/InstrumentationLibraryLogs","path":"OpenTelemetry/Proto/Logs/V1/InstrumentationLibraryLogs.html","kind":"struct","full_name":"OpenTelemetry::Proto::Logs::V1::InstrumentationLibraryLogs","name":"InstrumentationLibraryLogs","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/logs.pb.cr","line_number":72,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :instrumentation_library, pb_type: OpenTelemetry::Proto::Common::V1::InstrumentationLibrary, crystal_type: OpenTelemetry::Proto::Common::V1::InstrumentationLibrary, cast_type: OpenTelemetry::Proto::Common::V1::InstrumentationLibrary?, native: false, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :log_records, pb_type: LogRecord, crystal_type: LogRecord, cast_type: Array(LogRecord)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 3 => {name: :schema_url, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Logs/V1","kind":"module","full_name":"OpenTelemetry::Proto::Logs::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(instrumentation_library:OpenTelemetry::Proto::Common::V1::InstrumentationLibrary?=nil,log_records:Array(LogRecord)?=nil,schema_url:String?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"instrumentation_library","default_value":"nil","external_name":"instrumentation_library","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationLibrary | ::Nil"},{"name":"log_records","default_value":"nil","external_name":"log_records","restriction":"Array(LogRecord) | ::Nil"},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":"String | ::Nil"}],"args_string":"(instrumentation_library : OpenTelemetry::Proto::Common::V1::InstrumentationLibrary? = nil, log_records : Array(LogRecord)? = nil, schema_url : String? = nil)","args_html":"(instrumentation_library : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/InstrumentationLibrary.html\">OpenTelemetry::Proto::Common::V1::InstrumentationLibrary</a>? = <span class=\"n\">nil</span>, log_records : Array(<a href=\"../../../../OpenTelemetry/Proto/Logs/V1/LogRecord.html\">LogRecord</a>)? = <span class=\"n\">nil</span>, schema_url : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"instrumentation_library","default_value":"nil","external_name":"instrumentation_library","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationLibrary | ::Nil"},{"name":"log_records","default_value":"nil","external_name":"log_records","restriction":"Array(LogRecord) | ::Nil"},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(instrumentation_library, log_records, schema_url)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"instrumentation_library\" == key\n  return self.instrumentation_library\nend\nif \"log_records\" == key\n  return self.log_records\nend\nif \"schema_url\" == key\n  return self.schema_url\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"instrumentation_library:OpenTelemetry::Proto::Common::V1::InstrumentationLibrary?-instance-method","name":"instrumentation_library","abstract":false,"def":{"name":"instrumentation_library","return_type":"OpenTelemetry::Proto::Common::V1::InstrumentationLibrary | ::Nil","visibility":"Public","body":"@instrumentation_library"}},{"html_id":"instrumentation_library=(instrumentation_library:OpenTelemetry::Proto::Common::V1::InstrumentationLibrary?)-instance-method","name":"instrumentation_library=","abstract":false,"args":[{"name":"instrumentation_library","external_name":"instrumentation_library","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationLibrary | ::Nil"}],"args_string":"(instrumentation_library : OpenTelemetry::Proto::Common::V1::InstrumentationLibrary?)","args_html":"(instrumentation_library : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/InstrumentationLibrary.html\">OpenTelemetry::Proto::Common::V1::InstrumentationLibrary</a>?)","def":{"name":"instrumentation_library=","args":[{"name":"instrumentation_library","external_name":"instrumentation_library","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationLibrary | ::Nil"}],"visibility":"Public","body":"@instrumentation_library = instrumentation_library"}},{"html_id":"log_records:Array(LogRecord)?-instance-method","name":"log_records","abstract":false,"def":{"name":"log_records","return_type":"Array(LogRecord) | ::Nil","visibility":"Public","body":"@log_records"}},{"html_id":"log_records=(log_records:Array(LogRecord)?)-instance-method","name":"log_records=","abstract":false,"args":[{"name":"log_records","external_name":"log_records","restriction":"Array(LogRecord) | ::Nil"}],"args_string":"(log_records : Array(LogRecord)?)","args_html":"(log_records : Array(<a href=\"../../../../OpenTelemetry/Proto/Logs/V1/LogRecord.html\">LogRecord</a>)?)","def":{"name":"log_records=","args":[{"name":"log_records","external_name":"log_records","restriction":"Array(LogRecord) | ::Nil"}],"visibility":"Public","body":"@log_records = log_records"}},{"html_id":"schema_url:String?-instance-method","name":"schema_url","abstract":false,"def":{"name":"schema_url","return_type":"String | ::Nil","visibility":"Public","body":"@schema_url"}},{"html_id":"schema_url=(schema_url:String?)-instance-method","name":"schema_url=","abstract":false,"args":[{"name":"schema_url","external_name":"schema_url","restriction":"String | ::Nil"}],"args_string":"(schema_url : String?)","args_html":"(schema_url : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"schema_url=","args":[{"name":"schema_url","external_name":"schema_url","restriction":"String | ::Nil"}],"visibility":"Public","body":"@schema_url = schema_url"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_860 = @instrumentation_library\n__temp_861 = __temp_860.is_a?(Enum) || (__temp_860.is_a?(Array) && __temp_860.first?.is_a?(Enum))\n__temp_862 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Common::V1::InstrumentationLibrary, __temp_861 ? 0 : 2)\nif !@instrumentation_library.nil?\n  buf.write_info(1, __temp_862)\n  buf.write_message(@instrumentation_library.not_nil!)\nend\n__temp_863 = @log_records\n__temp_864 = __temp_863.is_a?(Enum) || (__temp_863.is_a?(Array) && __temp_863.first?.is_a?(Enum))\n__temp_865 = ::Protobuf::WIRE_TYPES.fetch(LogRecord, __temp_864 ? 0 : 2)\nif !@log_records.nil?\n  @log_records.not_nil!.each do |item|\n    buf.write_info(2, __temp_865)\n    buf.write_message(item)\n  end\nend\n__temp_866 = @schema_url\n__temp_867 = __temp_866.is_a?(Enum) || (__temp_866.is_a?(Array) && __temp_866.first?.is_a?(Enum))\n__temp_868 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_867 ? 0 : 2)\nif !@schema_url.nil?\n  buf.write_info(3, __temp_868)\n  buf.write_string(@schema_url.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Logs/V1/LogRecord","path":"OpenTelemetry/Proto/Logs/V1/LogRecord.html","kind":"struct","full_name":"OpenTelemetry::Proto::Logs::V1::LogRecord","name":"LogRecord","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/logs.pb.cr","line_number":82,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :time_unix_nano, pb_type: :fixed64, crystal_type: UInt64, cast_type: UInt64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 11 => {name: :observed_time_unix_nano, pb_type: :fixed64, crystal_type: UInt64, cast_type: UInt64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :severity_number, pb_type: SeverityNumber, crystal_type: SeverityNumber, cast_type: SeverityNumber?, native: false, optional: true, repeated: false, default: nil, packed: false}, 3 => {name: :severity_text, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}, 5 => {name: :body, pb_type: OpenTelemetry::Proto::Common::V1::AnyValue, crystal_type: OpenTelemetry::Proto::Common::V1::AnyValue, cast_type: OpenTelemetry::Proto::Common::V1::AnyValue?, native: false, optional: true, repeated: false, default: nil, packed: false}, 6 => {name: :attributes, pb_type: OpenTelemetry::Proto::Common::V1::KeyValue, crystal_type: OpenTelemetry::Proto::Common::V1::KeyValue, cast_type: Array(OpenTelemetry::Proto::Common::V1::KeyValue)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 7 => {name: :dropped_attributes_count, pb_type: :uint32, crystal_type: UInt32, cast_type: UInt32?, native: true, optional: true, repeated: false, default: nil, packed: false}, 8 => {name: :flags, pb_type: :fixed32, crystal_type: UInt32, cast_type: UInt32?, native: true, optional: true, repeated: false, default: nil, packed: false}, 9 => {name: :trace_id, pb_type: :bytes, crystal_type: Slice(UInt8), cast_type: Slice(UInt8)?, native: true, optional: true, repeated: false, default: nil, packed: false}, 10 => {name: :span_id, pb_type: :bytes, crystal_type: Slice(UInt8), cast_type: Slice(UInt8)?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Logs/V1","kind":"module","full_name":"OpenTelemetry::Proto::Logs::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(time_unix_nano:UInt64?=nil,observed_time_unix_nano:UInt64?=nil,severity_number:SeverityNumber?=nil,severity_text:String?=nil,body:OpenTelemetry::Proto::Common::V1::AnyValue?=nil,attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?=nil,dropped_attributes_count:UInt32?=nil,flags:UInt32?=nil,trace_id:Slice(UInt8)?=nil,span_id:Slice(UInt8)?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"time_unix_nano","default_value":"nil","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"observed_time_unix_nano","default_value":"nil","external_name":"observed_time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"severity_number","default_value":"nil","external_name":"severity_number","restriction":"SeverityNumber | ::Nil"},{"name":"severity_text","default_value":"nil","external_name":"severity_text","restriction":"String | ::Nil"},{"name":"body","default_value":"nil","external_name":"body","restriction":"OpenTelemetry::Proto::Common::V1::AnyValue | ::Nil"},{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"dropped_attributes_count","default_value":"nil","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"},{"name":"flags","default_value":"nil","external_name":"flags","restriction":"UInt32 | ::Nil"},{"name":"trace_id","default_value":"nil","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"span_id","default_value":"nil","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"}],"args_string":"(time_unix_nano : UInt64? = nil, observed_time_unix_nano : UInt64? = nil, severity_number : SeverityNumber? = nil, severity_text : String? = nil, body : OpenTelemetry::Proto::Common::V1::AnyValue? = nil, attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)? = nil, dropped_attributes_count : UInt32? = nil, flags : UInt32? = nil, trace_id : Slice(UInt8)? = nil, span_id : Slice(UInt8)? = nil)","args_html":"(time_unix_nano : UInt64? = <span class=\"n\">nil</span>, observed_time_unix_nano : UInt64? = <span class=\"n\">nil</span>, severity_number : <a href=\"../../../../OpenTelemetry/Proto/Logs/V1/SeverityNumber.html\">SeverityNumber</a>? = <span class=\"n\">nil</span>, severity_text : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>, body : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/AnyValue.html\">OpenTelemetry::Proto::Common::V1::AnyValue</a>? = <span class=\"n\">nil</span>, attributes : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)? = <span class=\"n\">nil</span>, dropped_attributes_count : UInt32? = <span class=\"n\">nil</span>, flags : UInt32? = <span class=\"n\">nil</span>, trace_id : Slice(UInt8)? = <span class=\"n\">nil</span>, span_id : Slice(UInt8)? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"time_unix_nano","default_value":"nil","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"observed_time_unix_nano","default_value":"nil","external_name":"observed_time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"severity_number","default_value":"nil","external_name":"severity_number","restriction":"SeverityNumber | ::Nil"},{"name":"severity_text","default_value":"nil","external_name":"severity_text","restriction":"String | ::Nil"},{"name":"body","default_value":"nil","external_name":"body","restriction":"OpenTelemetry::Proto::Common::V1::AnyValue | ::Nil"},{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"dropped_attributes_count","default_value":"nil","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"},{"name":"flags","default_value":"nil","external_name":"flags","restriction":"UInt32 | ::Nil"},{"name":"trace_id","default_value":"nil","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"span_id","default_value":"nil","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(time_unix_nano, observed_time_unix_nano, severity_number, severity_text, body, attributes, dropped_attributes_count, flags, trace_id, span_id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"time_unix_nano\" == key\n  return self.time_unix_nano\nend\nif \"observed_time_unix_nano\" == key\n  return self.observed_time_unix_nano\nend\nif \"severity_number\" == key\n  return self.severity_number\nend\nif \"severity_text\" == key\n  return self.severity_text\nend\nif \"body\" == key\n  return self.body\nend\nif \"attributes\" == key\n  return self.attributes\nend\nif \"dropped_attributes_count\" == key\n  return self.dropped_attributes_count\nend\nif \"flags\" == key\n  return self.flags\nend\nif \"trace_id\" == key\n  return self.trace_id\nend\nif \"span_id\" == key\n  return self.span_id\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?-instance-method","name":"attributes","abstract":false,"def":{"name":"attributes","return_type":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil","visibility":"Public","body":"@attributes"}},{"html_id":"attributes=(attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)-instance-method","name":"attributes=","abstract":false,"args":[{"name":"attributes","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"args_string":"(attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)","args_html":"(attributes : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)?)","def":{"name":"attributes=","args":[{"name":"attributes","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"visibility":"Public","body":"@attributes = attributes"}},{"html_id":"body:OpenTelemetry::Proto::Common::V1::AnyValue?-instance-method","name":"body","abstract":false,"def":{"name":"body","return_type":"OpenTelemetry::Proto::Common::V1::AnyValue | ::Nil","visibility":"Public","body":"@body"}},{"html_id":"body=(body:OpenTelemetry::Proto::Common::V1::AnyValue?)-instance-method","name":"body=","abstract":false,"args":[{"name":"body","external_name":"body","restriction":"OpenTelemetry::Proto::Common::V1::AnyValue | ::Nil"}],"args_string":"(body : OpenTelemetry::Proto::Common::V1::AnyValue?)","args_html":"(body : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/AnyValue.html\">OpenTelemetry::Proto::Common::V1::AnyValue</a>?)","def":{"name":"body=","args":[{"name":"body","external_name":"body","restriction":"OpenTelemetry::Proto::Common::V1::AnyValue | ::Nil"}],"visibility":"Public","body":"@body = body"}},{"html_id":"dropped_attributes_count:UInt32?-instance-method","name":"dropped_attributes_count","abstract":false,"def":{"name":"dropped_attributes_count","return_type":"UInt32 | ::Nil","visibility":"Public","body":"@dropped_attributes_count"}},{"html_id":"dropped_attributes_count=(dropped_attributes_count:UInt32?)-instance-method","name":"dropped_attributes_count=","abstract":false,"args":[{"name":"dropped_attributes_count","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"}],"args_string":"(dropped_attributes_count : UInt32?)","args_html":"(dropped_attributes_count : UInt32?)","def":{"name":"dropped_attributes_count=","args":[{"name":"dropped_attributes_count","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"}],"visibility":"Public","body":"@dropped_attributes_count = dropped_attributes_count"}},{"html_id":"flags:UInt32?-instance-method","name":"flags","abstract":false,"def":{"name":"flags","return_type":"UInt32 | ::Nil","visibility":"Public","body":"@flags"}},{"html_id":"flags=(flags:UInt32?)-instance-method","name":"flags=","abstract":false,"args":[{"name":"flags","external_name":"flags","restriction":"UInt32 | ::Nil"}],"args_string":"(flags : UInt32?)","args_html":"(flags : UInt32?)","def":{"name":"flags=","args":[{"name":"flags","external_name":"flags","restriction":"UInt32 | ::Nil"}],"visibility":"Public","body":"@flags = flags"}},{"html_id":"observed_time_unix_nano:UInt64?-instance-method","name":"observed_time_unix_nano","abstract":false,"def":{"name":"observed_time_unix_nano","return_type":"UInt64 | ::Nil","visibility":"Public","body":"@observed_time_unix_nano"}},{"html_id":"observed_time_unix_nano=(observed_time_unix_nano:UInt64?)-instance-method","name":"observed_time_unix_nano=","abstract":false,"args":[{"name":"observed_time_unix_nano","external_name":"observed_time_unix_nano","restriction":"UInt64 | ::Nil"}],"args_string":"(observed_time_unix_nano : UInt64?)","args_html":"(observed_time_unix_nano : UInt64?)","def":{"name":"observed_time_unix_nano=","args":[{"name":"observed_time_unix_nano","external_name":"observed_time_unix_nano","restriction":"UInt64 | ::Nil"}],"visibility":"Public","body":"@observed_time_unix_nano = observed_time_unix_nano"}},{"html_id":"severity_number:SeverityNumber?-instance-method","name":"severity_number","abstract":false,"def":{"name":"severity_number","return_type":"SeverityNumber | ::Nil","visibility":"Public","body":"@severity_number"}},{"html_id":"severity_number=(severity_number:SeverityNumber?)-instance-method","name":"severity_number=","abstract":false,"args":[{"name":"severity_number","external_name":"severity_number","restriction":"SeverityNumber | ::Nil"}],"args_string":"(severity_number : SeverityNumber?)","args_html":"(severity_number : <a href=\"../../../../OpenTelemetry/Proto/Logs/V1/SeverityNumber.html\">SeverityNumber</a>?)","def":{"name":"severity_number=","args":[{"name":"severity_number","external_name":"severity_number","restriction":"SeverityNumber | ::Nil"}],"visibility":"Public","body":"@severity_number = severity_number"}},{"html_id":"severity_text:String?-instance-method","name":"severity_text","abstract":false,"def":{"name":"severity_text","return_type":"String | ::Nil","visibility":"Public","body":"@severity_text"}},{"html_id":"severity_text=(severity_text:String?)-instance-method","name":"severity_text=","abstract":false,"args":[{"name":"severity_text","external_name":"severity_text","restriction":"String | ::Nil"}],"args_string":"(severity_text : String?)","args_html":"(severity_text : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"severity_text=","args":[{"name":"severity_text","external_name":"severity_text","restriction":"String | ::Nil"}],"visibility":"Public","body":"@severity_text = severity_text"}},{"html_id":"span_id:Slice(UInt8)?-instance-method","name":"span_id","abstract":false,"def":{"name":"span_id","return_type":"Slice(UInt8) | ::Nil","visibility":"Public","body":"@span_id"}},{"html_id":"span_id=(span_id:Slice(UInt8)?)-instance-method","name":"span_id=","abstract":false,"args":[{"name":"span_id","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"}],"args_string":"(span_id : Slice(UInt8)?)","args_html":"(span_id : Slice(UInt8)?)","def":{"name":"span_id=","args":[{"name":"span_id","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"}],"visibility":"Public","body":"@span_id = span_id"}},{"html_id":"time_unix_nano:UInt64?-instance-method","name":"time_unix_nano","abstract":false,"def":{"name":"time_unix_nano","return_type":"UInt64 | ::Nil","visibility":"Public","body":"@time_unix_nano"}},{"html_id":"time_unix_nano=(time_unix_nano:UInt64?)-instance-method","name":"time_unix_nano=","abstract":false,"args":[{"name":"time_unix_nano","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"}],"args_string":"(time_unix_nano : UInt64?)","args_html":"(time_unix_nano : UInt64?)","def":{"name":"time_unix_nano=","args":[{"name":"time_unix_nano","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"}],"visibility":"Public","body":"@time_unix_nano = time_unix_nano"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_902 = @time_unix_nano\n__temp_903 = __temp_902.is_a?(Enum) || (__temp_902.is_a?(Array) && __temp_902.first?.is_a?(Enum))\n__temp_904 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_903 ? 0 : 2)\nif !@time_unix_nano.nil?\n  buf.write_info(1, __temp_904)\n  buf.write_fixed64(@time_unix_nano.not_nil!)\nend\n__temp_905 = @observed_time_unix_nano\n__temp_906 = __temp_905.is_a?(Enum) || (__temp_905.is_a?(Array) && __temp_905.first?.is_a?(Enum))\n__temp_907 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_906 ? 0 : 2)\nif !@observed_time_unix_nano.nil?\n  buf.write_info(11, __temp_907)\n  buf.write_fixed64(@observed_time_unix_nano.not_nil!)\nend\n__temp_908 = @severity_number\n__temp_909 = __temp_908.is_a?(Enum) || (__temp_908.is_a?(Array) && __temp_908.first?.is_a?(Enum))\n__temp_910 = ::Protobuf::WIRE_TYPES.fetch(SeverityNumber, __temp_909 ? 0 : 2)\nif !@severity_number.nil?\n  buf.write_info(2, __temp_910)\n  buf.write_message(@severity_number.not_nil!)\nend\n__temp_911 = @severity_text\n__temp_912 = __temp_911.is_a?(Enum) || (__temp_911.is_a?(Array) && __temp_911.first?.is_a?(Enum))\n__temp_913 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_912 ? 0 : 2)\nif !@severity_text.nil?\n  buf.write_info(3, __temp_913)\n  buf.write_string(@severity_text.not_nil!)\nend\n__temp_914 = @body\n__temp_915 = __temp_914.is_a?(Enum) || (__temp_914.is_a?(Array) && __temp_914.first?.is_a?(Enum))\n__temp_916 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Common::V1::AnyValue, __temp_915 ? 0 : 2)\nif !@body.nil?\n  buf.write_info(5, __temp_916)\n  buf.write_message(@body.not_nil!)\nend\n__temp_917 = @attributes\n__temp_918 = __temp_917.is_a?(Enum) || (__temp_917.is_a?(Array) && __temp_917.first?.is_a?(Enum))\n__temp_919 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Common::V1::KeyValue, __temp_918 ? 0 : 2)\nif !@attributes.nil?\n  @attributes.not_nil!.each do |item|\n    buf.write_info(6, __temp_919)\n    buf.write_message(item)\n  end\nend\n__temp_920 = @dropped_attributes_count\n__temp_921 = __temp_920.is_a?(Enum) || (__temp_920.is_a?(Array) && __temp_920.first?.is_a?(Enum))\n__temp_922 = ::Protobuf::WIRE_TYPES.fetch(:uint32, __temp_921 ? 0 : 2)\nif !@dropped_attributes_count.nil?\n  buf.write_info(7, __temp_922)\n  buf.write_uint32(@dropped_attributes_count.not_nil!)\nend\n__temp_923 = @flags\n__temp_924 = __temp_923.is_a?(Enum) || (__temp_923.is_a?(Array) && __temp_923.first?.is_a?(Enum))\n__temp_925 = ::Protobuf::WIRE_TYPES.fetch(:fixed32, __temp_924 ? 0 : 2)\nif !@flags.nil?\n  buf.write_info(8, __temp_925)\n  buf.write_fixed32(@flags.not_nil!)\nend\n__temp_926 = @trace_id\n__temp_927 = __temp_926.is_a?(Enum) || (__temp_926.is_a?(Array) && __temp_926.first?.is_a?(Enum))\n__temp_928 = ::Protobuf::WIRE_TYPES.fetch(:bytes, __temp_927 ? 0 : 2)\nif !@trace_id.nil?\n  buf.write_info(9, __temp_928)\n  buf.write_bytes(@trace_id.not_nil!)\nend\n__temp_929 = @span_id\n__temp_930 = __temp_929.is_a?(Enum) || (__temp_929.is_a?(Array) && __temp_929.first?.is_a?(Enum))\n__temp_931 = ::Protobuf::WIRE_TYPES.fetch(:bytes, __temp_930 ? 0 : 2)\nif !@span_id.nil?\n  buf.write_info(10, __temp_931)\n  buf.write_bytes(@span_id.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}},{"html_id":"trace_id:Slice(UInt8)?-instance-method","name":"trace_id","abstract":false,"def":{"name":"trace_id","return_type":"Slice(UInt8) | ::Nil","visibility":"Public","body":"@trace_id"}},{"html_id":"trace_id=(trace_id:Slice(UInt8)?)-instance-method","name":"trace_id=","abstract":false,"args":[{"name":"trace_id","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"}],"args_string":"(trace_id : Slice(UInt8)?)","args_html":"(trace_id : Slice(UInt8)?)","def":{"name":"trace_id=","args":[{"name":"trace_id","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"}],"visibility":"Public","body":"@trace_id = trace_id"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Logs/V1/LogRecordFlags","path":"OpenTelemetry/Proto/Logs/V1/LogRecordFlags.html","kind":"enum","full_name":"OpenTelemetry::Proto::Logs::V1::LogRecordFlags","name":"LogRecordFlags","abstract":false,"ancestors":[{"html_id":"opentelemetry-api/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"opentelemetry-api/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/logs.pb.cr","line_number":38,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"LOGRECORDFLAGUNSPECIFIED","name":"LOGRECORDFLAGUNSPECIFIED","value":"0"},{"id":"LOGRECORDFLAGTRACEFLAGSMASK","name":"LOGRECORDFLAGTRACEFLAGSMASK","value":"255"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Logs/V1","kind":"module","full_name":"OpenTelemetry::Proto::Logs::V1","name":"V1"},"instance_methods":[{"html_id":"logrecordflagtraceflagsmask?-instance-method","name":"logrecordflagtraceflagsmask?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":40,"url":null},"def":{"name":"logrecordflagtraceflagsmask?","visibility":"Public","body":"self == LOGRECORDFLAGTRACEFLAGSMASK"}},{"html_id":"logrecordflagunspecified?-instance-method","name":"logrecordflagunspecified?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":39,"url":null},"def":{"name":"logrecordflagunspecified?","visibility":"Public","body":"self == LOGRECORDFLAGUNSPECIFIED"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Logs/V1/LogsData","path":"OpenTelemetry/Proto/Logs/V1/LogsData.html","kind":"struct","full_name":"OpenTelemetry::Proto::Logs::V1::LogsData","name":"LogsData","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/logs.pb.cr","line_number":43,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :resource_logs, pb_type: ResourceLogs, crystal_type: ResourceLogs, cast_type: Array(ResourceLogs)?, native: false, optional: true, repeated: true, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Logs/V1","kind":"module","full_name":"OpenTelemetry::Proto::Logs::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(resource_logs:Array(ResourceLogs)?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"resource_logs","default_value":"nil","external_name":"resource_logs","restriction":"Array(ResourceLogs) | ::Nil"}],"args_string":"(resource_logs : Array(ResourceLogs)? = nil)","args_html":"(resource_logs : Array(<a href=\"../../../../OpenTelemetry/Proto/Logs/V1/ResourceLogs.html\">ResourceLogs</a>)? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"resource_logs","default_value":"nil","external_name":"resource_logs","restriction":"Array(ResourceLogs) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(resource_logs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"resource_logs\" == key\n  return self.resource_logs\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"resource_logs:Array(ResourceLogs)?-instance-method","name":"resource_logs","abstract":false,"def":{"name":"resource_logs","return_type":"Array(ResourceLogs) | ::Nil","visibility":"Public","body":"@resource_logs"}},{"html_id":"resource_logs=(resource_logs:Array(ResourceLogs)?)-instance-method","name":"resource_logs=","abstract":false,"args":[{"name":"resource_logs","external_name":"resource_logs","restriction":"Array(ResourceLogs) | ::Nil"}],"args_string":"(resource_logs : Array(ResourceLogs)?)","args_html":"(resource_logs : Array(<a href=\"../../../../OpenTelemetry/Proto/Logs/V1/ResourceLogs.html\">ResourceLogs</a>)?)","def":{"name":"resource_logs=","args":[{"name":"resource_logs","external_name":"resource_logs","restriction":"Array(ResourceLogs) | ::Nil"}],"visibility":"Public","body":"@resource_logs = resource_logs"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_799 = @resource_logs\n__temp_800 = __temp_799.is_a?(Enum) || (__temp_799.is_a?(Array) && __temp_799.first?.is_a?(Enum))\n__temp_801 = ::Protobuf::WIRE_TYPES.fetch(ResourceLogs, __temp_800 ? 0 : 2)\nif !@resource_logs.nil?\n  @resource_logs.not_nil!.each do |item|\n    buf.write_info(1, __temp_801)\n    buf.write_message(item)\n  end\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Logs/V1/ResourceLogs","path":"OpenTelemetry/Proto/Logs/V1/ResourceLogs.html","kind":"struct","full_name":"OpenTelemetry::Proto::Logs::V1::ResourceLogs","name":"ResourceLogs","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/logs.pb.cr","line_number":51,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :resource, pb_type: OpenTelemetry::Proto::Resource::V1::Resource, crystal_type: OpenTelemetry::Proto::Resource::V1::Resource, cast_type: OpenTelemetry::Proto::Resource::V1::Resource?, native: false, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :scope_logs, pb_type: ScopeLogs, crystal_type: ScopeLogs, cast_type: Array(ScopeLogs)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 1000 => {name: :instrumentation_library_logs, pb_type: InstrumentationLibraryLogs, crystal_type: InstrumentationLibraryLogs, cast_type: Array(InstrumentationLibraryLogs)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 3 => {name: :schema_url, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Logs/V1","kind":"module","full_name":"OpenTelemetry::Proto::Logs::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(resource:OpenTelemetry::Proto::Resource::V1::Resource?=nil,scope_logs:Array(ScopeLogs)?=nil,instrumentation_library_logs:Array(InstrumentationLibraryLogs)?=nil,schema_url:String?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"resource","default_value":"nil","external_name":"resource","restriction":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil"},{"name":"scope_logs","default_value":"nil","external_name":"scope_logs","restriction":"Array(ScopeLogs) | ::Nil"},{"name":"instrumentation_library_logs","default_value":"nil","external_name":"instrumentation_library_logs","restriction":"Array(InstrumentationLibraryLogs) | ::Nil"},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":"String | ::Nil"}],"args_string":"(resource : OpenTelemetry::Proto::Resource::V1::Resource? = nil, scope_logs : Array(ScopeLogs)? = nil, instrumentation_library_logs : Array(InstrumentationLibraryLogs)? = nil, schema_url : String? = nil)","args_html":"(resource : <a href=\"../../../../OpenTelemetry/Proto/Resource/V1/Resource.html\">OpenTelemetry::Proto::Resource::V1::Resource</a>? = <span class=\"n\">nil</span>, scope_logs : Array(<a href=\"../../../../OpenTelemetry/Proto/Logs/V1/ScopeLogs.html\">ScopeLogs</a>)? = <span class=\"n\">nil</span>, instrumentation_library_logs : Array(<a href=\"../../../../OpenTelemetry/Proto/Logs/V1/InstrumentationLibraryLogs.html\">InstrumentationLibraryLogs</a>)? = <span class=\"n\">nil</span>, schema_url : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"resource","default_value":"nil","external_name":"resource","restriction":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil"},{"name":"scope_logs","default_value":"nil","external_name":"scope_logs","restriction":"Array(ScopeLogs) | ::Nil"},{"name":"instrumentation_library_logs","default_value":"nil","external_name":"instrumentation_library_logs","restriction":"Array(InstrumentationLibraryLogs) | ::Nil"},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(resource, scope_logs, instrumentation_library_logs, schema_url)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"resource\" == key\n  return self.resource\nend\nif \"scope_logs\" == key\n  return self.scope_logs\nend\nif \"instrumentation_library_logs\" == key\n  return self.instrumentation_library_logs\nend\nif \"schema_url\" == key\n  return self.schema_url\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"instrumentation_library_logs:Array(InstrumentationLibraryLogs)?-instance-method","name":"instrumentation_library_logs","abstract":false,"def":{"name":"instrumentation_library_logs","return_type":"Array(InstrumentationLibraryLogs) | ::Nil","visibility":"Public","body":"@instrumentation_library_logs"}},{"html_id":"instrumentation_library_logs=(instrumentation_library_logs:Array(InstrumentationLibraryLogs)?)-instance-method","name":"instrumentation_library_logs=","abstract":false,"args":[{"name":"instrumentation_library_logs","external_name":"instrumentation_library_logs","restriction":"Array(InstrumentationLibraryLogs) | ::Nil"}],"args_string":"(instrumentation_library_logs : Array(InstrumentationLibraryLogs)?)","args_html":"(instrumentation_library_logs : Array(<a href=\"../../../../OpenTelemetry/Proto/Logs/V1/InstrumentationLibraryLogs.html\">InstrumentationLibraryLogs</a>)?)","def":{"name":"instrumentation_library_logs=","args":[{"name":"instrumentation_library_logs","external_name":"instrumentation_library_logs","restriction":"Array(InstrumentationLibraryLogs) | ::Nil"}],"visibility":"Public","body":"@instrumentation_library_logs = instrumentation_library_logs"}},{"html_id":"resource:OpenTelemetry::Proto::Resource::V1::Resource?-instance-method","name":"resource","abstract":false,"def":{"name":"resource","return_type":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil","visibility":"Public","body":"@resource"}},{"html_id":"resource=(resource:OpenTelemetry::Proto::Resource::V1::Resource?)-instance-method","name":"resource=","abstract":false,"args":[{"name":"resource","external_name":"resource","restriction":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil"}],"args_string":"(resource : OpenTelemetry::Proto::Resource::V1::Resource?)","args_html":"(resource : <a href=\"../../../../OpenTelemetry/Proto/Resource/V1/Resource.html\">OpenTelemetry::Proto::Resource::V1::Resource</a>?)","def":{"name":"resource=","args":[{"name":"resource","external_name":"resource","restriction":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil"}],"visibility":"Public","body":"@resource = resource"}},{"html_id":"schema_url:String?-instance-method","name":"schema_url","abstract":false,"def":{"name":"schema_url","return_type":"String | ::Nil","visibility":"Public","body":"@schema_url"}},{"html_id":"schema_url=(schema_url:String?)-instance-method","name":"schema_url=","abstract":false,"args":[{"name":"schema_url","external_name":"schema_url","restriction":"String | ::Nil"}],"args_string":"(schema_url : String?)","args_html":"(schema_url : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"schema_url=","args":[{"name":"schema_url","external_name":"schema_url","restriction":"String | ::Nil"}],"visibility":"Public","body":"@schema_url = schema_url"}},{"html_id":"scope_logs:Array(ScopeLogs)?-instance-method","name":"scope_logs","abstract":false,"def":{"name":"scope_logs","return_type":"Array(ScopeLogs) | ::Nil","visibility":"Public","body":"@scope_logs"}},{"html_id":"scope_logs=(scope_logs:Array(ScopeLogs)?)-instance-method","name":"scope_logs=","abstract":false,"args":[{"name":"scope_logs","external_name":"scope_logs","restriction":"Array(ScopeLogs) | ::Nil"}],"args_string":"(scope_logs : Array(ScopeLogs)?)","args_html":"(scope_logs : Array(<a href=\"../../../../OpenTelemetry/Proto/Logs/V1/ScopeLogs.html\">ScopeLogs</a>)?)","def":{"name":"scope_logs=","args":[{"name":"scope_logs","external_name":"scope_logs","restriction":"Array(ScopeLogs) | ::Nil"}],"visibility":"Public","body":"@scope_logs = scope_logs"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_817 = @resource\n__temp_818 = __temp_817.is_a?(Enum) || (__temp_817.is_a?(Array) && __temp_817.first?.is_a?(Enum))\n__temp_819 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Resource::V1::Resource, __temp_818 ? 0 : 2)\nif !@resource.nil?\n  buf.write_info(1, __temp_819)\n  buf.write_message(@resource.not_nil!)\nend\n__temp_820 = @scope_logs\n__temp_821 = __temp_820.is_a?(Enum) || (__temp_820.is_a?(Array) && __temp_820.first?.is_a?(Enum))\n__temp_822 = ::Protobuf::WIRE_TYPES.fetch(ScopeLogs, __temp_821 ? 0 : 2)\nif !@scope_logs.nil?\n  @scope_logs.not_nil!.each do |item|\n    buf.write_info(2, __temp_822)\n    buf.write_message(item)\n  end\nend\n__temp_823 = @instrumentation_library_logs\n__temp_824 = __temp_823.is_a?(Enum) || (__temp_823.is_a?(Array) && __temp_823.first?.is_a?(Enum))\n__temp_825 = ::Protobuf::WIRE_TYPES.fetch(InstrumentationLibraryLogs, __temp_824 ? 0 : 2)\nif !@instrumentation_library_logs.nil?\n  @instrumentation_library_logs.not_nil!.each do |item|\n    buf.write_info(1000, __temp_825)\n    buf.write_message(item)\n  end\nend\n__temp_826 = @schema_url\n__temp_827 = __temp_826.is_a?(Enum) || (__temp_826.is_a?(Array) && __temp_826.first?.is_a?(Enum))\n__temp_828 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_827 ? 0 : 2)\nif !@schema_url.nil?\n  buf.write_info(3, __temp_828)\n  buf.write_string(@schema_url.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Logs/V1/ScopeLogs","path":"OpenTelemetry/Proto/Logs/V1/ScopeLogs.html","kind":"struct","full_name":"OpenTelemetry::Proto::Logs::V1::ScopeLogs","name":"ScopeLogs","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/logs.pb.cr","line_number":62,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :scope, pb_type: OpenTelemetry::Proto::Common::V1::InstrumentationScope, crystal_type: OpenTelemetry::Proto::Common::V1::InstrumentationScope, cast_type: OpenTelemetry::Proto::Common::V1::InstrumentationScope?, native: false, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :log_records, pb_type: LogRecord, crystal_type: LogRecord, cast_type: Array(LogRecord)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 3 => {name: :schema_url, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Logs/V1","kind":"module","full_name":"OpenTelemetry::Proto::Logs::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(scope:OpenTelemetry::Proto::Common::V1::InstrumentationScope?=nil,log_records:Array(LogRecord)?=nil,schema_url:String?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"scope","default_value":"nil","external_name":"scope","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationScope | ::Nil"},{"name":"log_records","default_value":"nil","external_name":"log_records","restriction":"Array(LogRecord) | ::Nil"},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":"String | ::Nil"}],"args_string":"(scope : OpenTelemetry::Proto::Common::V1::InstrumentationScope? = nil, log_records : Array(LogRecord)? = nil, schema_url : String? = nil)","args_html":"(scope : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/InstrumentationScope.html\">OpenTelemetry::Proto::Common::V1::InstrumentationScope</a>? = <span class=\"n\">nil</span>, log_records : Array(<a href=\"../../../../OpenTelemetry/Proto/Logs/V1/LogRecord.html\">LogRecord</a>)? = <span class=\"n\">nil</span>, schema_url : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"scope","default_value":"nil","external_name":"scope","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationScope | ::Nil"},{"name":"log_records","default_value":"nil","external_name":"log_records","restriction":"Array(LogRecord) | ::Nil"},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(scope, log_records, schema_url)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"scope\" == key\n  return self.scope\nend\nif \"log_records\" == key\n  return self.log_records\nend\nif \"schema_url\" == key\n  return self.schema_url\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"log_records:Array(LogRecord)?-instance-method","name":"log_records","abstract":false,"def":{"name":"log_records","return_type":"Array(LogRecord) | ::Nil","visibility":"Public","body":"@log_records"}},{"html_id":"log_records=(log_records:Array(LogRecord)?)-instance-method","name":"log_records=","abstract":false,"args":[{"name":"log_records","external_name":"log_records","restriction":"Array(LogRecord) | ::Nil"}],"args_string":"(log_records : Array(LogRecord)?)","args_html":"(log_records : Array(<a href=\"../../../../OpenTelemetry/Proto/Logs/V1/LogRecord.html\">LogRecord</a>)?)","def":{"name":"log_records=","args":[{"name":"log_records","external_name":"log_records","restriction":"Array(LogRecord) | ::Nil"}],"visibility":"Public","body":"@log_records = log_records"}},{"html_id":"schema_url:String?-instance-method","name":"schema_url","abstract":false,"def":{"name":"schema_url","return_type":"String | ::Nil","visibility":"Public","body":"@schema_url"}},{"html_id":"schema_url=(schema_url:String?)-instance-method","name":"schema_url=","abstract":false,"args":[{"name":"schema_url","external_name":"schema_url","restriction":"String | ::Nil"}],"args_string":"(schema_url : String?)","args_html":"(schema_url : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"schema_url=","args":[{"name":"schema_url","external_name":"schema_url","restriction":"String | ::Nil"}],"visibility":"Public","body":"@schema_url = schema_url"}},{"html_id":"scope:OpenTelemetry::Proto::Common::V1::InstrumentationScope?-instance-method","name":"scope","abstract":false,"def":{"name":"scope","return_type":"OpenTelemetry::Proto::Common::V1::InstrumentationScope | ::Nil","visibility":"Public","body":"@scope"}},{"html_id":"scope=(scope:OpenTelemetry::Proto::Common::V1::InstrumentationScope?)-instance-method","name":"scope=","abstract":false,"args":[{"name":"scope","external_name":"scope","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationScope | ::Nil"}],"args_string":"(scope : OpenTelemetry::Proto::Common::V1::InstrumentationScope?)","args_html":"(scope : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/InstrumentationScope.html\">OpenTelemetry::Proto::Common::V1::InstrumentationScope</a>?)","def":{"name":"scope=","args":[{"name":"scope","external_name":"scope","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationScope | ::Nil"}],"visibility":"Public","body":"@scope = scope"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_840 = @scope\n__temp_841 = __temp_840.is_a?(Enum) || (__temp_840.is_a?(Array) && __temp_840.first?.is_a?(Enum))\n__temp_842 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Common::V1::InstrumentationScope, __temp_841 ? 0 : 2)\nif !@scope.nil?\n  buf.write_info(1, __temp_842)\n  buf.write_message(@scope.not_nil!)\nend\n__temp_843 = @log_records\n__temp_844 = __temp_843.is_a?(Enum) || (__temp_843.is_a?(Array) && __temp_843.first?.is_a?(Enum))\n__temp_845 = ::Protobuf::WIRE_TYPES.fetch(LogRecord, __temp_844 ? 0 : 2)\nif !@log_records.nil?\n  @log_records.not_nil!.each do |item|\n    buf.write_info(2, __temp_845)\n    buf.write_message(item)\n  end\nend\n__temp_846 = @schema_url\n__temp_847 = __temp_846.is_a?(Enum) || (__temp_846.is_a?(Array) && __temp_846.first?.is_a?(Enum))\n__temp_848 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_847 ? 0 : 2)\nif !@schema_url.nil?\n  buf.write_info(3, __temp_848)\n  buf.write_string(@schema_url.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Logs/V1/SeverityNumber","path":"OpenTelemetry/Proto/Logs/V1/SeverityNumber.html","kind":"enum","full_name":"OpenTelemetry::Proto::Logs::V1::SeverityNumber","name":"SeverityNumber","abstract":false,"ancestors":[{"html_id":"opentelemetry-api/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"opentelemetry-api/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/logs.pb.cr","line_number":11,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"SEVERITYNUMBERUNSPECIFIED","name":"SEVERITYNUMBERUNSPECIFIED","value":"0"},{"id":"SEVERITYNUMBERTRACE","name":"SEVERITYNUMBERTRACE","value":"1"},{"id":"SEVERITYNUMBERTRACE2","name":"SEVERITYNUMBERTRACE2","value":"2"},{"id":"SEVERITYNUMBERTRACE3","name":"SEVERITYNUMBERTRACE3","value":"3"},{"id":"SEVERITYNUMBERTRACE4","name":"SEVERITYNUMBERTRACE4","value":"4"},{"id":"SEVERITYNUMBERDEBUG","name":"SEVERITYNUMBERDEBUG","value":"5"},{"id":"SEVERITYNUMBERDEBUG2","name":"SEVERITYNUMBERDEBUG2","value":"6"},{"id":"SEVERITYNUMBERDEBUG3","name":"SEVERITYNUMBERDEBUG3","value":"7"},{"id":"SEVERITYNUMBERDEBUG4","name":"SEVERITYNUMBERDEBUG4","value":"8"},{"id":"SEVERITYNUMBERINFO","name":"SEVERITYNUMBERINFO","value":"9"},{"id":"SEVERITYNUMBERINFO2","name":"SEVERITYNUMBERINFO2","value":"10"},{"id":"SEVERITYNUMBERINFO3","name":"SEVERITYNUMBERINFO3","value":"11"},{"id":"SEVERITYNUMBERINFO4","name":"SEVERITYNUMBERINFO4","value":"12"},{"id":"SEVERITYNUMBERWARN","name":"SEVERITYNUMBERWARN","value":"13"},{"id":"SEVERITYNUMBERWARN2","name":"SEVERITYNUMBERWARN2","value":"14"},{"id":"SEVERITYNUMBERWARN3","name":"SEVERITYNUMBERWARN3","value":"15"},{"id":"SEVERITYNUMBERWARN4","name":"SEVERITYNUMBERWARN4","value":"16"},{"id":"SEVERITYNUMBERERROR","name":"SEVERITYNUMBERERROR","value":"17"},{"id":"SEVERITYNUMBERERROR2","name":"SEVERITYNUMBERERROR2","value":"18"},{"id":"SEVERITYNUMBERERROR3","name":"SEVERITYNUMBERERROR3","value":"19"},{"id":"SEVERITYNUMBERERROR4","name":"SEVERITYNUMBERERROR4","value":"20"},{"id":"SEVERITYNUMBERFATAL","name":"SEVERITYNUMBERFATAL","value":"21"},{"id":"SEVERITYNUMBERFATAL2","name":"SEVERITYNUMBERFATAL2","value":"22"},{"id":"SEVERITYNUMBERFATAL3","name":"SEVERITYNUMBERFATAL3","value":"23"},{"id":"SEVERITYNUMBERFATAL4","name":"SEVERITYNUMBERFATAL4","value":"24"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Logs/V1","kind":"module","full_name":"OpenTelemetry::Proto::Logs::V1","name":"V1"},"instance_methods":[{"html_id":"severitynumberdebug2?-instance-method","name":"severitynumberdebug2?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":18,"url":null},"def":{"name":"severitynumberdebug2?","visibility":"Public","body":"self == SEVERITYNUMBERDEBUG2"}},{"html_id":"severitynumberdebug3?-instance-method","name":"severitynumberdebug3?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":19,"url":null},"def":{"name":"severitynumberdebug3?","visibility":"Public","body":"self == SEVERITYNUMBERDEBUG3"}},{"html_id":"severitynumberdebug4?-instance-method","name":"severitynumberdebug4?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":20,"url":null},"def":{"name":"severitynumberdebug4?","visibility":"Public","body":"self == SEVERITYNUMBERDEBUG4"}},{"html_id":"severitynumberdebug?-instance-method","name":"severitynumberdebug?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":17,"url":null},"def":{"name":"severitynumberdebug?","visibility":"Public","body":"self == SEVERITYNUMBERDEBUG"}},{"html_id":"severitynumbererror2?-instance-method","name":"severitynumbererror2?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":30,"url":null},"def":{"name":"severitynumbererror2?","visibility":"Public","body":"self == SEVERITYNUMBERERROR2"}},{"html_id":"severitynumbererror3?-instance-method","name":"severitynumbererror3?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":31,"url":null},"def":{"name":"severitynumbererror3?","visibility":"Public","body":"self == SEVERITYNUMBERERROR3"}},{"html_id":"severitynumbererror4?-instance-method","name":"severitynumbererror4?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":32,"url":null},"def":{"name":"severitynumbererror4?","visibility":"Public","body":"self == SEVERITYNUMBERERROR4"}},{"html_id":"severitynumbererror?-instance-method","name":"severitynumbererror?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":29,"url":null},"def":{"name":"severitynumbererror?","visibility":"Public","body":"self == SEVERITYNUMBERERROR"}},{"html_id":"severitynumberfatal2?-instance-method","name":"severitynumberfatal2?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":34,"url":null},"def":{"name":"severitynumberfatal2?","visibility":"Public","body":"self == SEVERITYNUMBERFATAL2"}},{"html_id":"severitynumberfatal3?-instance-method","name":"severitynumberfatal3?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":35,"url":null},"def":{"name":"severitynumberfatal3?","visibility":"Public","body":"self == SEVERITYNUMBERFATAL3"}},{"html_id":"severitynumberfatal4?-instance-method","name":"severitynumberfatal4?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":36,"url":null},"def":{"name":"severitynumberfatal4?","visibility":"Public","body":"self == SEVERITYNUMBERFATAL4"}},{"html_id":"severitynumberfatal?-instance-method","name":"severitynumberfatal?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":33,"url":null},"def":{"name":"severitynumberfatal?","visibility":"Public","body":"self == SEVERITYNUMBERFATAL"}},{"html_id":"severitynumberinfo2?-instance-method","name":"severitynumberinfo2?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":22,"url":null},"def":{"name":"severitynumberinfo2?","visibility":"Public","body":"self == SEVERITYNUMBERINFO2"}},{"html_id":"severitynumberinfo3?-instance-method","name":"severitynumberinfo3?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":23,"url":null},"def":{"name":"severitynumberinfo3?","visibility":"Public","body":"self == SEVERITYNUMBERINFO3"}},{"html_id":"severitynumberinfo4?-instance-method","name":"severitynumberinfo4?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":24,"url":null},"def":{"name":"severitynumberinfo4?","visibility":"Public","body":"self == SEVERITYNUMBERINFO4"}},{"html_id":"severitynumberinfo?-instance-method","name":"severitynumberinfo?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":21,"url":null},"def":{"name":"severitynumberinfo?","visibility":"Public","body":"self == SEVERITYNUMBERINFO"}},{"html_id":"severitynumbertrace2?-instance-method","name":"severitynumbertrace2?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":14,"url":null},"def":{"name":"severitynumbertrace2?","visibility":"Public","body":"self == SEVERITYNUMBERTRACE2"}},{"html_id":"severitynumbertrace3?-instance-method","name":"severitynumbertrace3?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":15,"url":null},"def":{"name":"severitynumbertrace3?","visibility":"Public","body":"self == SEVERITYNUMBERTRACE3"}},{"html_id":"severitynumbertrace4?-instance-method","name":"severitynumbertrace4?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":16,"url":null},"def":{"name":"severitynumbertrace4?","visibility":"Public","body":"self == SEVERITYNUMBERTRACE4"}},{"html_id":"severitynumbertrace?-instance-method","name":"severitynumbertrace?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":13,"url":null},"def":{"name":"severitynumbertrace?","visibility":"Public","body":"self == SEVERITYNUMBERTRACE"}},{"html_id":"severitynumberunspecified?-instance-method","name":"severitynumberunspecified?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":12,"url":null},"def":{"name":"severitynumberunspecified?","visibility":"Public","body":"self == SEVERITYNUMBERUNSPECIFIED"}},{"html_id":"severitynumberwarn2?-instance-method","name":"severitynumberwarn2?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":26,"url":null},"def":{"name":"severitynumberwarn2?","visibility":"Public","body":"self == SEVERITYNUMBERWARN2"}},{"html_id":"severitynumberwarn3?-instance-method","name":"severitynumberwarn3?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":27,"url":null},"def":{"name":"severitynumberwarn3?","visibility":"Public","body":"self == SEVERITYNUMBERWARN3"}},{"html_id":"severitynumberwarn4?-instance-method","name":"severitynumberwarn4?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":28,"url":null},"def":{"name":"severitynumberwarn4?","visibility":"Public","body":"self == SEVERITYNUMBERWARN4"}},{"html_id":"severitynumberwarn?-instance-method","name":"severitynumberwarn?","abstract":false,"location":{"filename":"src/proto/logs.pb.cr","line_number":25,"url":null},"def":{"name":"severitynumberwarn?","visibility":"Public","body":"self == SEVERITYNUMBERWARN"}}]}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics","path":"OpenTelemetry/Proto/Metrics.html","kind":"module","full_name":"OpenTelemetry::Proto::Metrics","name":"Metrics","abstract":false,"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":9,"url":null},{"filename":"src/proto/metrics_config_service.pb.cr","line_number":8,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto","kind":"module","full_name":"OpenTelemetry::Proto","name":"Proto"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/Experimental","path":"OpenTelemetry/Proto/Metrics/Experimental.html","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::Experimental","name":"Experimental","abstract":false,"locations":[{"filename":"src/proto/metrics_config_service.pb.cr","line_number":9,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics","kind":"module","full_name":"OpenTelemetry::Proto::Metrics","name":"Metrics"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/Experimental/MetricConfigRequest","path":"OpenTelemetry/Proto/Metrics/Experimental/MetricConfigRequest.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::Experimental::MetricConfigRequest","name":"MetricConfigRequest","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics_config_service.pb.cr","line_number":10,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :resource, pb_type: OpenTelemetry::Proto::Resource::V1::Resource, crystal_type: OpenTelemetry::Proto::Resource::V1::Resource, cast_type: OpenTelemetry::Proto::Resource::V1::Resource?, native: false, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :last_known_fingerprint, pb_type: :bytes, crystal_type: Slice(UInt8), cast_type: Slice(UInt8)?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/Experimental","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::Experimental","name":"Experimental"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(resource:OpenTelemetry::Proto::Resource::V1::Resource?=nil,last_known_fingerprint:Slice(UInt8)?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"resource","default_value":"nil","external_name":"resource","restriction":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil"},{"name":"last_known_fingerprint","default_value":"nil","external_name":"last_known_fingerprint","restriction":"Slice(UInt8) | ::Nil"}],"args_string":"(resource : OpenTelemetry::Proto::Resource::V1::Resource? = nil, last_known_fingerprint : Slice(UInt8)? = nil)","args_html":"(resource : <a href=\"../../../../OpenTelemetry/Proto/Resource/V1/Resource.html\">OpenTelemetry::Proto::Resource::V1::Resource</a>? = <span class=\"n\">nil</span>, last_known_fingerprint : Slice(UInt8)? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"resource","default_value":"nil","external_name":"resource","restriction":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil"},{"name":"last_known_fingerprint","default_value":"nil","external_name":"last_known_fingerprint","restriction":"Slice(UInt8) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(resource, last_known_fingerprint)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"resource\" == key\n  return self.resource\nend\nif \"last_known_fingerprint\" == key\n  return self.last_known_fingerprint\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"last_known_fingerprint:Slice(UInt8)?-instance-method","name":"last_known_fingerprint","abstract":false,"def":{"name":"last_known_fingerprint","return_type":"Slice(UInt8) | ::Nil","visibility":"Public","body":"@last_known_fingerprint"}},{"html_id":"last_known_fingerprint=(last_known_fingerprint:Slice(UInt8)?)-instance-method","name":"last_known_fingerprint=","abstract":false,"args":[{"name":"last_known_fingerprint","external_name":"last_known_fingerprint","restriction":"Slice(UInt8) | ::Nil"}],"args_string":"(last_known_fingerprint : Slice(UInt8)?)","args_html":"(last_known_fingerprint : Slice(UInt8)?)","def":{"name":"last_known_fingerprint=","args":[{"name":"last_known_fingerprint","external_name":"last_known_fingerprint","restriction":"Slice(UInt8) | ::Nil"}],"visibility":"Public","body":"@last_known_fingerprint = last_known_fingerprint"}},{"html_id":"resource:OpenTelemetry::Proto::Resource::V1::Resource?-instance-method","name":"resource","abstract":false,"def":{"name":"resource","return_type":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil","visibility":"Public","body":"@resource"}},{"html_id":"resource=(resource:OpenTelemetry::Proto::Resource::V1::Resource?)-instance-method","name":"resource=","abstract":false,"args":[{"name":"resource","external_name":"resource","restriction":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil"}],"args_string":"(resource : OpenTelemetry::Proto::Resource::V1::Resource?)","args_html":"(resource : <a href=\"../../../../OpenTelemetry/Proto/Resource/V1/Resource.html\">OpenTelemetry::Proto::Resource::V1::Resource</a>?)","def":{"name":"resource=","args":[{"name":"resource","external_name":"resource","restriction":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil"}],"visibility":"Public","body":"@resource = resource"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1434 = @resource\n__temp_1435 = __temp_1434.is_a?(Enum) || (__temp_1434.is_a?(Array) && __temp_1434.first?.is_a?(Enum))\n__temp_1436 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Resource::V1::Resource, __temp_1435 ? 0 : 2)\nif !@resource.nil?\n  buf.write_info(1, __temp_1436)\n  buf.write_message(@resource.not_nil!)\nend\n__temp_1437 = @last_known_fingerprint\n__temp_1438 = __temp_1437.is_a?(Enum) || (__temp_1437.is_a?(Array) && __temp_1437.first?.is_a?(Enum))\n__temp_1439 = ::Protobuf::WIRE_TYPES.fetch(:bytes, __temp_1438 ? 0 : 2)\nif !@last_known_fingerprint.nil?\n  buf.write_info(2, __temp_1439)\n  buf.write_bytes(@last_known_fingerprint.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/Experimental/MetricConfigResponse","path":"OpenTelemetry/Proto/Metrics/Experimental/MetricConfigResponse.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::Experimental::MetricConfigResponse","name":"MetricConfigResponse","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics_config_service.pb.cr","line_number":19,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :fingerprint, pb_type: :bytes, crystal_type: Slice(UInt8), cast_type: Slice(UInt8)?, native: true, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :schedules, pb_type: MetricConfigResponse::Schedule, crystal_type: MetricConfigResponse::Schedule, cast_type: Array(MetricConfigResponse::Schedule)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 3 => {name: :suggested_wait_time_sec, pb_type: :int32, crystal_type: Int32, cast_type: Int32?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/Experimental","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::Experimental","name":"Experimental"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(fingerprint:Slice(UInt8)?=nil,schedules:Array(MetricConfigResponse::Schedule)?=nil,suggested_wait_time_sec:Int32?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"fingerprint","default_value":"nil","external_name":"fingerprint","restriction":"Slice(UInt8) | ::Nil"},{"name":"schedules","default_value":"nil","external_name":"schedules","restriction":"Array(MetricConfigResponse::Schedule) | ::Nil"},{"name":"suggested_wait_time_sec","default_value":"nil","external_name":"suggested_wait_time_sec","restriction":"Int32 | ::Nil"}],"args_string":"(fingerprint : Slice(UInt8)? = nil, schedules : Array(MetricConfigResponse::Schedule)? = nil, suggested_wait_time_sec : Int32? = nil)","args_html":"(fingerprint : Slice(UInt8)? = <span class=\"n\">nil</span>, schedules : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/Experimental/MetricConfigResponse/Schedule.html\">MetricConfigResponse::Schedule</a>)? = <span class=\"n\">nil</span>, suggested_wait_time_sec : Int32? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"fingerprint","default_value":"nil","external_name":"fingerprint","restriction":"Slice(UInt8) | ::Nil"},{"name":"schedules","default_value":"nil","external_name":"schedules","restriction":"Array(MetricConfigResponse::Schedule) | ::Nil"},{"name":"suggested_wait_time_sec","default_value":"nil","external_name":"suggested_wait_time_sec","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(fingerprint, schedules, suggested_wait_time_sec)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"fingerprint\" == key\n  return self.fingerprint\nend\nif \"schedules\" == key\n  return self.schedules\nend\nif \"suggested_wait_time_sec\" == key\n  return self.suggested_wait_time_sec\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"fingerprint:Slice(UInt8)?-instance-method","name":"fingerprint","abstract":false,"def":{"name":"fingerprint","return_type":"Slice(UInt8) | ::Nil","visibility":"Public","body":"@fingerprint"}},{"html_id":"fingerprint=(fingerprint:Slice(UInt8)?)-instance-method","name":"fingerprint=","abstract":false,"args":[{"name":"fingerprint","external_name":"fingerprint","restriction":"Slice(UInt8) | ::Nil"}],"args_string":"(fingerprint : Slice(UInt8)?)","args_html":"(fingerprint : Slice(UInt8)?)","def":{"name":"fingerprint=","args":[{"name":"fingerprint","external_name":"fingerprint","restriction":"Slice(UInt8) | ::Nil"}],"visibility":"Public","body":"@fingerprint = fingerprint"}},{"html_id":"schedules:Array(MetricConfigResponse::Schedule)?-instance-method","name":"schedules","abstract":false,"def":{"name":"schedules","return_type":"Array(MetricConfigResponse::Schedule) | ::Nil","visibility":"Public","body":"@schedules"}},{"html_id":"schedules=(schedules:Array(MetricConfigResponse::Schedule)?)-instance-method","name":"schedules=","abstract":false,"args":[{"name":"schedules","external_name":"schedules","restriction":"Array(MetricConfigResponse::Schedule) | ::Nil"}],"args_string":"(schedules : Array(MetricConfigResponse::Schedule)?)","args_html":"(schedules : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/Experimental/MetricConfigResponse/Schedule.html\">MetricConfigResponse::Schedule</a>)?)","def":{"name":"schedules=","args":[{"name":"schedules","external_name":"schedules","restriction":"Array(MetricConfigResponse::Schedule) | ::Nil"}],"visibility":"Public","body":"@schedules = schedules"}},{"html_id":"suggested_wait_time_sec:Int32?-instance-method","name":"suggested_wait_time_sec","abstract":false,"def":{"name":"suggested_wait_time_sec","return_type":"Int32 | ::Nil","visibility":"Public","body":"@suggested_wait_time_sec"}},{"html_id":"suggested_wait_time_sec=(suggested_wait_time_sec:Int32?)-instance-method","name":"suggested_wait_time_sec=","abstract":false,"args":[{"name":"suggested_wait_time_sec","external_name":"suggested_wait_time_sec","restriction":"Int32 | ::Nil"}],"args_string":"(suggested_wait_time_sec : Int32?)","args_html":"(suggested_wait_time_sec : Int32?)","def":{"name":"suggested_wait_time_sec=","args":[{"name":"suggested_wait_time_sec","external_name":"suggested_wait_time_sec","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"@suggested_wait_time_sec = suggested_wait_time_sec"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1482 = @fingerprint\n__temp_1483 = __temp_1482.is_a?(Enum) || (__temp_1482.is_a?(Array) && __temp_1482.first?.is_a?(Enum))\n__temp_1484 = ::Protobuf::WIRE_TYPES.fetch(:bytes, __temp_1483 ? 0 : 2)\nif !@fingerprint.nil?\n  buf.write_info(1, __temp_1484)\n  buf.write_bytes(@fingerprint.not_nil!)\nend\n__temp_1485 = @schedules\n__temp_1486 = __temp_1485.is_a?(Enum) || (__temp_1485.is_a?(Array) && __temp_1485.first?.is_a?(Enum))\n__temp_1487 = ::Protobuf::WIRE_TYPES.fetch(MetricConfigResponse::Schedule, __temp_1486 ? 0 : 2)\nif !@schedules.nil?\n  @schedules.not_nil!.each do |item|\n    buf.write_info(2, __temp_1487)\n    buf.write_message(item)\n  end\nend\n__temp_1488 = @suggested_wait_time_sec\n__temp_1489 = __temp_1488.is_a?(Enum) || (__temp_1488.is_a?(Array) && __temp_1488.first?.is_a?(Enum))\n__temp_1490 = ::Protobuf::WIRE_TYPES.fetch(:int32, __temp_1489 ? 0 : 2)\nif !@suggested_wait_time_sec.nil?\n  buf.write_info(3, __temp_1490)\n  buf.write_int32(@suggested_wait_time_sec.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/Experimental/MetricConfigResponse/Schedule","path":"OpenTelemetry/Proto/Metrics/Experimental/MetricConfigResponse/Schedule.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::Experimental::MetricConfigResponse::Schedule","name":"Schedule","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics_config_service.pb.cr","line_number":22,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :exclusion_patterns, pb_type: MetricConfigResponse::Schedule::Pattern, crystal_type: MetricConfigResponse::Schedule::Pattern, cast_type: Array(MetricConfigResponse::Schedule::Pattern)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 2 => {name: :inclusion_patterns, pb_type: MetricConfigResponse::Schedule::Pattern, crystal_type: MetricConfigResponse::Schedule::Pattern, cast_type: Array(MetricConfigResponse::Schedule::Pattern)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 3 => {name: :period_sec, pb_type: :int32, crystal_type: Int32, cast_type: Int32?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/Experimental/MetricConfigResponse","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::Experimental::MetricConfigResponse","name":"MetricConfigResponse"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(exclusion_patterns:Array(MetricConfigResponse::Schedule::Pattern)?=nil,inclusion_patterns:Array(MetricConfigResponse::Schedule::Pattern)?=nil,period_sec:Int32?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"exclusion_patterns","default_value":"nil","external_name":"exclusion_patterns","restriction":"Array(MetricConfigResponse::Schedule::Pattern) | ::Nil"},{"name":"inclusion_patterns","default_value":"nil","external_name":"inclusion_patterns","restriction":"Array(MetricConfigResponse::Schedule::Pattern) | ::Nil"},{"name":"period_sec","default_value":"nil","external_name":"period_sec","restriction":"Int32 | ::Nil"}],"args_string":"(exclusion_patterns : Array(MetricConfigResponse::Schedule::Pattern)? = nil, inclusion_patterns : Array(MetricConfigResponse::Schedule::Pattern)? = nil, period_sec : Int32? = nil)","args_html":"(exclusion_patterns : Array(<a href=\"../../../../../OpenTelemetry/Proto/Metrics/Experimental/MetricConfigResponse/Schedule/Pattern.html\">MetricConfigResponse::Schedule::Pattern</a>)? = <span class=\"n\">nil</span>, inclusion_patterns : Array(<a href=\"../../../../../OpenTelemetry/Proto/Metrics/Experimental/MetricConfigResponse/Schedule/Pattern.html\">MetricConfigResponse::Schedule::Pattern</a>)? = <span class=\"n\">nil</span>, period_sec : Int32? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"exclusion_patterns","default_value":"nil","external_name":"exclusion_patterns","restriction":"Array(MetricConfigResponse::Schedule::Pattern) | ::Nil"},{"name":"inclusion_patterns","default_value":"nil","external_name":"inclusion_patterns","restriction":"Array(MetricConfigResponse::Schedule::Pattern) | ::Nil"},{"name":"period_sec","default_value":"nil","external_name":"period_sec","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(exclusion_patterns, inclusion_patterns, period_sec)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"exclusion_patterns\" == key\n  return self.exclusion_patterns\nend\nif \"inclusion_patterns\" == key\n  return self.inclusion_patterns\nend\nif \"period_sec\" == key\n  return self.period_sec\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"exclusion_patterns:Array(MetricConfigResponse::Schedule::Pattern)?-instance-method","name":"exclusion_patterns","abstract":false,"def":{"name":"exclusion_patterns","return_type":"Array(MetricConfigResponse::Schedule::Pattern) | ::Nil","visibility":"Public","body":"@exclusion_patterns"}},{"html_id":"exclusion_patterns=(exclusion_patterns:Array(MetricConfigResponse::Schedule::Pattern)?)-instance-method","name":"exclusion_patterns=","abstract":false,"args":[{"name":"exclusion_patterns","external_name":"exclusion_patterns","restriction":"Array(MetricConfigResponse::Schedule::Pattern) | ::Nil"}],"args_string":"(exclusion_patterns : Array(MetricConfigResponse::Schedule::Pattern)?)","args_html":"(exclusion_patterns : Array(<a href=\"../../../../../OpenTelemetry/Proto/Metrics/Experimental/MetricConfigResponse/Schedule/Pattern.html\">MetricConfigResponse::Schedule::Pattern</a>)?)","def":{"name":"exclusion_patterns=","args":[{"name":"exclusion_patterns","external_name":"exclusion_patterns","restriction":"Array(MetricConfigResponse::Schedule::Pattern) | ::Nil"}],"visibility":"Public","body":"@exclusion_patterns = exclusion_patterns"}},{"html_id":"inclusion_patterns:Array(MetricConfigResponse::Schedule::Pattern)?-instance-method","name":"inclusion_patterns","abstract":false,"def":{"name":"inclusion_patterns","return_type":"Array(MetricConfigResponse::Schedule::Pattern) | ::Nil","visibility":"Public","body":"@inclusion_patterns"}},{"html_id":"inclusion_patterns=(inclusion_patterns:Array(MetricConfigResponse::Schedule::Pattern)?)-instance-method","name":"inclusion_patterns=","abstract":false,"args":[{"name":"inclusion_patterns","external_name":"inclusion_patterns","restriction":"Array(MetricConfigResponse::Schedule::Pattern) | ::Nil"}],"args_string":"(inclusion_patterns : Array(MetricConfigResponse::Schedule::Pattern)?)","args_html":"(inclusion_patterns : Array(<a href=\"../../../../../OpenTelemetry/Proto/Metrics/Experimental/MetricConfigResponse/Schedule/Pattern.html\">MetricConfigResponse::Schedule::Pattern</a>)?)","def":{"name":"inclusion_patterns=","args":[{"name":"inclusion_patterns","external_name":"inclusion_patterns","restriction":"Array(MetricConfigResponse::Schedule::Pattern) | ::Nil"}],"visibility":"Public","body":"@inclusion_patterns = inclusion_patterns"}},{"html_id":"period_sec:Int32?-instance-method","name":"period_sec","abstract":false,"def":{"name":"period_sec","return_type":"Int32 | ::Nil","visibility":"Public","body":"@period_sec"}},{"html_id":"period_sec=(period_sec:Int32?)-instance-method","name":"period_sec=","abstract":false,"args":[{"name":"period_sec","external_name":"period_sec","restriction":"Int32 | ::Nil"}],"args_string":"(period_sec : Int32?)","args_html":"(period_sec : Int32?)","def":{"name":"period_sec=","args":[{"name":"period_sec","external_name":"period_sec","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"@period_sec = period_sec"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1463 = @exclusion_patterns\n__temp_1464 = __temp_1463.is_a?(Enum) || (__temp_1463.is_a?(Array) && __temp_1463.first?.is_a?(Enum))\n__temp_1465 = ::Protobuf::WIRE_TYPES.fetch(MetricConfigResponse::Schedule::Pattern, __temp_1464 ? 0 : 2)\nif !@exclusion_patterns.nil?\n  @exclusion_patterns.not_nil!.each do |item|\n    buf.write_info(1, __temp_1465)\n    buf.write_message(item)\n  end\nend\n__temp_1466 = @inclusion_patterns\n__temp_1467 = __temp_1466.is_a?(Enum) || (__temp_1466.is_a?(Array) && __temp_1466.first?.is_a?(Enum))\n__temp_1468 = ::Protobuf::WIRE_TYPES.fetch(MetricConfigResponse::Schedule::Pattern, __temp_1467 ? 0 : 2)\nif !@inclusion_patterns.nil?\n  @inclusion_patterns.not_nil!.each do |item|\n    buf.write_info(2, __temp_1468)\n    buf.write_message(item)\n  end\nend\n__temp_1469 = @period_sec\n__temp_1470 = __temp_1469.is_a?(Enum) || (__temp_1469.is_a?(Array) && __temp_1469.first?.is_a?(Enum))\n__temp_1471 = ::Protobuf::WIRE_TYPES.fetch(:int32, __temp_1470 ? 0 : 2)\nif !@period_sec.nil?\n  buf.write_info(3, __temp_1471)\n  buf.write_int32(@period_sec.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/Experimental/MetricConfigResponse/Schedule/Pattern","path":"OpenTelemetry/Proto/Metrics/Experimental/MetricConfigResponse/Schedule/Pattern.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::Experimental::MetricConfigResponse::Schedule::Pattern","name":"Pattern","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics_config_service.pb.cr","line_number":25,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :equals, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :starts_with, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/Experimental/MetricConfigResponse/Schedule","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::Experimental::MetricConfigResponse::Schedule","name":"Schedule"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(equals:String?=nil,starts_with:String?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"equals","default_value":"nil","external_name":"equals","restriction":"String | ::Nil"},{"name":"starts_with","default_value":"nil","external_name":"starts_with","restriction":"String | ::Nil"}],"args_string":"(equals : String? = nil, starts_with : String? = nil)","args_html":"(equals : <a href=\"../../../../../../String.html\">String</a>? = <span class=\"n\">nil</span>, starts_with : <a href=\"../../../../../../String.html\">String</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"equals","default_value":"nil","external_name":"equals","restriction":"String | ::Nil"},{"name":"starts_with","default_value":"nil","external_name":"starts_with","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(equals, starts_with)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"equals\" == key\n  return self.equals\nend\nif \"starts_with\" == key\n  return self.starts_with\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"equals:String?-instance-method","name":"equals","abstract":false,"def":{"name":"equals","return_type":"String | ::Nil","visibility":"Public","body":"@equals"}},{"html_id":"equals=(equals:String?)-instance-method","name":"equals=","abstract":false,"args":[{"name":"equals","external_name":"equals","restriction":"String | ::Nil"}],"args_string":"(equals : String?)","args_html":"(equals : <a href=\"../../../../../../String.html\">String</a>?)","def":{"name":"equals=","args":[{"name":"equals","external_name":"equals","restriction":"String | ::Nil"}],"visibility":"Public","body":"@equals = equals"}},{"html_id":"starts_with:String?-instance-method","name":"starts_with","abstract":false,"def":{"name":"starts_with","return_type":"String | ::Nil","visibility":"Public","body":"@starts_with"}},{"html_id":"starts_with=(starts_with:String?)-instance-method","name":"starts_with=","abstract":false,"args":[{"name":"starts_with","external_name":"starts_with","restriction":"String | ::Nil"}],"args_string":"(starts_with : String?)","args_html":"(starts_with : <a href=\"../../../../../../String.html\">String</a>?)","def":{"name":"starts_with=","args":[{"name":"starts_with","external_name":"starts_with","restriction":"String | ::Nil"}],"visibility":"Public","body":"@starts_with = starts_with"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1446 = @equals\n__temp_1447 = __temp_1446.is_a?(Enum) || (__temp_1446.is_a?(Array) && __temp_1446.first?.is_a?(Enum))\n__temp_1448 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_1447 ? 0 : 2)\nif !@equals.nil?\n  buf.write_info(1, __temp_1448)\n  buf.write_string(@equals.not_nil!)\nend\n__temp_1449 = @starts_with\n__temp_1450 = __temp_1449.is_a?(Enum) || (__temp_1449.is_a?(Array) && __temp_1449.first?.is_a?(Enum))\n__temp_1451 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_1450 ? 0 : 2)\nif !@starts_with.nil?\n  buf.write_info(2, __temp_1451)\n  buf.write_string(@starts_with.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]}]}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1","path":"OpenTelemetry/Proto/Metrics/V1.html","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::V1","name":"V1","abstract":false,"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":10,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics","kind":"module","full_name":"OpenTelemetry::Proto::Metrics","name":"Metrics"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/AggregationTemporality","path":"OpenTelemetry/Proto/Metrics/V1/AggregationTemporality.html","kind":"enum","full_name":"OpenTelemetry::Proto::Metrics::V1::AggregationTemporality","name":"AggregationTemporality","abstract":false,"ancestors":[{"html_id":"opentelemetry-api/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"opentelemetry-api/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":11,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"AGGREGATIONTEMPORALITYUNSPECIFIED","name":"AGGREGATIONTEMPORALITYUNSPECIFIED","value":"0"},{"id":"AGGREGATIONTEMPORALITYDELTA","name":"AGGREGATIONTEMPORALITYDELTA","value":"1"},{"id":"AGGREGATIONTEMPORALITYCUMULATIVE","name":"AGGREGATIONTEMPORALITYCUMULATIVE","value":"2"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::V1","name":"V1"},"instance_methods":[{"html_id":"aggregationtemporalitycumulative?-instance-method","name":"aggregationtemporalitycumulative?","abstract":false,"location":{"filename":"src/proto/metrics.pb.cr","line_number":14,"url":null},"def":{"name":"aggregationtemporalitycumulative?","visibility":"Public","body":"self == AGGREGATIONTEMPORALITYCUMULATIVE"}},{"html_id":"aggregationtemporalitydelta?-instance-method","name":"aggregationtemporalitydelta?","abstract":false,"location":{"filename":"src/proto/metrics.pb.cr","line_number":13,"url":null},"def":{"name":"aggregationtemporalitydelta?","visibility":"Public","body":"self == AGGREGATIONTEMPORALITYDELTA"}},{"html_id":"aggregationtemporalityunspecified?-instance-method","name":"aggregationtemporalityunspecified?","abstract":false,"location":{"filename":"src/proto/metrics.pb.cr","line_number":12,"url":null},"def":{"name":"aggregationtemporalityunspecified?","visibility":"Public","body":"self == AGGREGATIONTEMPORALITYUNSPECIFIED"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/DataPointFlags","path":"OpenTelemetry/Proto/Metrics/V1/DataPointFlags.html","kind":"enum","full_name":"OpenTelemetry::Proto::Metrics::V1::DataPointFlags","name":"DataPointFlags","abstract":false,"ancestors":[{"html_id":"opentelemetry-api/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"opentelemetry-api/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":16,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"FLAGNONE","name":"FLAGNONE","value":"0"},{"id":"FLAGNORECORDEDVALUE","name":"FLAGNORECORDEDVALUE","value":"1"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::V1","name":"V1"},"instance_methods":[{"html_id":"flagnone?-instance-method","name":"flagnone?","abstract":false,"location":{"filename":"src/proto/metrics.pb.cr","line_number":17,"url":null},"def":{"name":"flagnone?","visibility":"Public","body":"self == FLAGNONE"}},{"html_id":"flagnorecordedvalue?-instance-method","name":"flagnorecordedvalue?","abstract":false,"location":{"filename":"src/proto/metrics.pb.cr","line_number":18,"url":null},"def":{"name":"flagnorecordedvalue?","visibility":"Public","body":"self == FLAGNORECORDEDVALUE"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/Exemplar","path":"OpenTelemetry/Proto/Metrics/V1/Exemplar.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::Exemplar","name":"Exemplar","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":203,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{7 => {name: :filtered_attributes, pb_type: OpenTelemetry::Proto::Common::V1::KeyValue, crystal_type: OpenTelemetry::Proto::Common::V1::KeyValue, cast_type: Array(OpenTelemetry::Proto::Common::V1::KeyValue)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 2 => {name: :time_unix_nano, pb_type: :fixed64, crystal_type: UInt64, cast_type: UInt64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 3 => {name: :as_double, pb_type: :double, crystal_type: Float64, cast_type: Float64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 6 => {name: :as_int, pb_type: :sfixed64, crystal_type: Int64, cast_type: Int64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 4 => {name: :span_id, pb_type: :bytes, crystal_type: Slice(UInt8), cast_type: Slice(UInt8)?, native: true, optional: true, repeated: false, default: nil, packed: false}, 5 => {name: :trace_id, pb_type: :bytes, crystal_type: Slice(UInt8), cast_type: Slice(UInt8)?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(filtered_attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?=nil,time_unix_nano:UInt64?=nil,as_double:Float64?=nil,as_int:Int64?=nil,span_id:Slice(UInt8)?=nil,trace_id:Slice(UInt8)?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"filtered_attributes","default_value":"nil","external_name":"filtered_attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"time_unix_nano","default_value":"nil","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"as_double","default_value":"nil","external_name":"as_double","restriction":"Float64 | ::Nil"},{"name":"as_int","default_value":"nil","external_name":"as_int","restriction":"Int64 | ::Nil"},{"name":"span_id","default_value":"nil","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"trace_id","default_value":"nil","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"}],"args_string":"(filtered_attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)? = nil, time_unix_nano : UInt64? = nil, as_double : Float64? = nil, as_int : Int64? = nil, span_id : Slice(UInt8)? = nil, trace_id : Slice(UInt8)? = nil)","args_html":"(filtered_attributes : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)? = <span class=\"n\">nil</span>, time_unix_nano : UInt64? = <span class=\"n\">nil</span>, as_double : Float64? = <span class=\"n\">nil</span>, as_int : Int64? = <span class=\"n\">nil</span>, span_id : Slice(UInt8)? = <span class=\"n\">nil</span>, trace_id : Slice(UInt8)? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"filtered_attributes","default_value":"nil","external_name":"filtered_attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"time_unix_nano","default_value":"nil","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"as_double","default_value":"nil","external_name":"as_double","restriction":"Float64 | ::Nil"},{"name":"as_int","default_value":"nil","external_name":"as_int","restriction":"Int64 | ::Nil"},{"name":"span_id","default_value":"nil","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"trace_id","default_value":"nil","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(filtered_attributes, time_unix_nano, as_double, as_int, span_id, trace_id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"filtered_attributes\" == key\n  return self.filtered_attributes\nend\nif \"time_unix_nano\" == key\n  return self.time_unix_nano\nend\nif \"as_double\" == key\n  return self.as_double\nend\nif \"as_int\" == key\n  return self.as_int\nend\nif \"span_id\" == key\n  return self.span_id\nend\nif \"trace_id\" == key\n  return self.trace_id\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"as_double:Float64?-instance-method","name":"as_double","abstract":false,"def":{"name":"as_double","return_type":"Float64 | ::Nil","visibility":"Public","body":"@as_double"}},{"html_id":"as_double=(as_double:Float64?)-instance-method","name":"as_double=","abstract":false,"args":[{"name":"as_double","external_name":"as_double","restriction":"Float64 | ::Nil"}],"args_string":"(as_double : Float64?)","args_html":"(as_double : Float64?)","def":{"name":"as_double=","args":[{"name":"as_double","external_name":"as_double","restriction":"Float64 | ::Nil"}],"visibility":"Public","body":"@as_double = as_double"}},{"html_id":"as_int:Int64?-instance-method","name":"as_int","abstract":false,"def":{"name":"as_int","return_type":"Int64 | ::Nil","visibility":"Public","body":"@as_int"}},{"html_id":"as_int=(as_int:Int64?)-instance-method","name":"as_int=","abstract":false,"args":[{"name":"as_int","external_name":"as_int","restriction":"Int64 | ::Nil"}],"args_string":"(as_int : Int64?)","args_html":"(as_int : Int64?)","def":{"name":"as_int=","args":[{"name":"as_int","external_name":"as_int","restriction":"Int64 | ::Nil"}],"visibility":"Public","body":"@as_int = as_int"}},{"html_id":"filtered_attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?-instance-method","name":"filtered_attributes","abstract":false,"def":{"name":"filtered_attributes","return_type":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil","visibility":"Public","body":"@filtered_attributes"}},{"html_id":"filtered_attributes=(filtered_attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)-instance-method","name":"filtered_attributes=","abstract":false,"args":[{"name":"filtered_attributes","external_name":"filtered_attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"args_string":"(filtered_attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)","args_html":"(filtered_attributes : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)?)","def":{"name":"filtered_attributes=","args":[{"name":"filtered_attributes","external_name":"filtered_attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"visibility":"Public","body":"@filtered_attributes = filtered_attributes"}},{"html_id":"span_id:Slice(UInt8)?-instance-method","name":"span_id","abstract":false,"def":{"name":"span_id","return_type":"Slice(UInt8) | ::Nil","visibility":"Public","body":"@span_id"}},{"html_id":"span_id=(span_id:Slice(UInt8)?)-instance-method","name":"span_id=","abstract":false,"args":[{"name":"span_id","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"}],"args_string":"(span_id : Slice(UInt8)?)","args_html":"(span_id : Slice(UInt8)?)","def":{"name":"span_id=","args":[{"name":"span_id","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"}],"visibility":"Public","body":"@span_id = span_id"}},{"html_id":"time_unix_nano:UInt64?-instance-method","name":"time_unix_nano","abstract":false,"def":{"name":"time_unix_nano","return_type":"UInt64 | ::Nil","visibility":"Public","body":"@time_unix_nano"}},{"html_id":"time_unix_nano=(time_unix_nano:UInt64?)-instance-method","name":"time_unix_nano=","abstract":false,"args":[{"name":"time_unix_nano","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"}],"args_string":"(time_unix_nano : UInt64?)","args_html":"(time_unix_nano : UInt64?)","def":{"name":"time_unix_nano=","args":[{"name":"time_unix_nano","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"}],"visibility":"Public","body":"@time_unix_nano = time_unix_nano"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1409 = @filtered_attributes\n__temp_1410 = __temp_1409.is_a?(Enum) || (__temp_1409.is_a?(Array) && __temp_1409.first?.is_a?(Enum))\n__temp_1411 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Common::V1::KeyValue, __temp_1410 ? 0 : 2)\nif !@filtered_attributes.nil?\n  @filtered_attributes.not_nil!.each do |item|\n    buf.write_info(7, __temp_1411)\n    buf.write_message(item)\n  end\nend\n__temp_1412 = @time_unix_nano\n__temp_1413 = __temp_1412.is_a?(Enum) || (__temp_1412.is_a?(Array) && __temp_1412.first?.is_a?(Enum))\n__temp_1414 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_1413 ? 0 : 2)\nif !@time_unix_nano.nil?\n  buf.write_info(2, __temp_1414)\n  buf.write_fixed64(@time_unix_nano.not_nil!)\nend\n__temp_1415 = @as_double\n__temp_1416 = __temp_1415.is_a?(Enum) || (__temp_1415.is_a?(Array) && __temp_1415.first?.is_a?(Enum))\n__temp_1417 = ::Protobuf::WIRE_TYPES.fetch(:double, __temp_1416 ? 0 : 2)\nif !@as_double.nil?\n  buf.write_info(3, __temp_1417)\n  buf.write_double(@as_double.not_nil!)\nend\n__temp_1418 = @as_int\n__temp_1419 = __temp_1418.is_a?(Enum) || (__temp_1418.is_a?(Array) && __temp_1418.first?.is_a?(Enum))\n__temp_1420 = ::Protobuf::WIRE_TYPES.fetch(:sfixed64, __temp_1419 ? 0 : 2)\nif !@as_int.nil?\n  buf.write_info(6, __temp_1420)\n  buf.write_sfixed64(@as_int.not_nil!)\nend\n__temp_1421 = @span_id\n__temp_1422 = __temp_1421.is_a?(Enum) || (__temp_1421.is_a?(Array) && __temp_1421.first?.is_a?(Enum))\n__temp_1423 = ::Protobuf::WIRE_TYPES.fetch(:bytes, __temp_1422 ? 0 : 2)\nif !@span_id.nil?\n  buf.write_info(4, __temp_1423)\n  buf.write_bytes(@span_id.not_nil!)\nend\n__temp_1424 = @trace_id\n__temp_1425 = __temp_1424.is_a?(Enum) || (__temp_1424.is_a?(Array) && __temp_1424.first?.is_a?(Enum))\n__temp_1426 = ::Protobuf::WIRE_TYPES.fetch(:bytes, __temp_1425 ? 0 : 2)\nif !@trace_id.nil?\n  buf.write_info(5, __temp_1426)\n  buf.write_bytes(@trace_id.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}},{"html_id":"trace_id:Slice(UInt8)?-instance-method","name":"trace_id","abstract":false,"def":{"name":"trace_id","return_type":"Slice(UInt8) | ::Nil","visibility":"Public","body":"@trace_id"}},{"html_id":"trace_id=(trace_id:Slice(UInt8)?)-instance-method","name":"trace_id=","abstract":false,"args":[{"name":"trace_id","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"}],"args_string":"(trace_id : Slice(UInt8)?)","args_html":"(trace_id : Slice(UInt8)?)","def":{"name":"trace_id=","args":[{"name":"trace_id","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"}],"visibility":"Public","body":"@trace_id = trace_id"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/ExponentialHistogram","path":"OpenTelemetry/Proto/Metrics/V1/ExponentialHistogram.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::ExponentialHistogram","name":"ExponentialHistogram","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":102,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :data_points, pb_type: ExponentialHistogramDataPoint, crystal_type: ExponentialHistogramDataPoint, cast_type: Array(ExponentialHistogramDataPoint)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 2 => {name: :aggregation_temporality, pb_type: AggregationTemporality, crystal_type: AggregationTemporality, cast_type: AggregationTemporality?, native: false, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(data_points:Array(ExponentialHistogramDataPoint)?=nil,aggregation_temporality:AggregationTemporality?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"data_points","default_value":"nil","external_name":"data_points","restriction":"Array(ExponentialHistogramDataPoint) | ::Nil"},{"name":"aggregation_temporality","default_value":"nil","external_name":"aggregation_temporality","restriction":"AggregationTemporality | ::Nil"}],"args_string":"(data_points : Array(ExponentialHistogramDataPoint)? = nil, aggregation_temporality : AggregationTemporality? = nil)","args_html":"(data_points : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/ExponentialHistogramDataPoint.html\">ExponentialHistogramDataPoint</a>)? = <span class=\"n\">nil</span>, aggregation_temporality : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/AggregationTemporality.html\">AggregationTemporality</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"data_points","default_value":"nil","external_name":"data_points","restriction":"Array(ExponentialHistogramDataPoint) | ::Nil"},{"name":"aggregation_temporality","default_value":"nil","external_name":"aggregation_temporality","restriction":"AggregationTemporality | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(data_points, aggregation_temporality)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"data_points\" == key\n  return self.data_points\nend\nif \"aggregation_temporality\" == key\n  return self.aggregation_temporality\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"aggregation_temporality:AggregationTemporality?-instance-method","name":"aggregation_temporality","abstract":false,"def":{"name":"aggregation_temporality","return_type":"AggregationTemporality | ::Nil","visibility":"Public","body":"@aggregation_temporality"}},{"html_id":"aggregation_temporality=(aggregation_temporality:AggregationTemporality?)-instance-method","name":"aggregation_temporality=","abstract":false,"args":[{"name":"aggregation_temporality","external_name":"aggregation_temporality","restriction":"AggregationTemporality | ::Nil"}],"args_string":"(aggregation_temporality : AggregationTemporality?)","args_html":"(aggregation_temporality : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/AggregationTemporality.html\">AggregationTemporality</a>?)","def":{"name":"aggregation_temporality=","args":[{"name":"aggregation_temporality","external_name":"aggregation_temporality","restriction":"AggregationTemporality | ::Nil"}],"visibility":"Public","body":"@aggregation_temporality = aggregation_temporality"}},{"html_id":"data_points:Array(ExponentialHistogramDataPoint)?-instance-method","name":"data_points","abstract":false,"def":{"name":"data_points","return_type":"Array(ExponentialHistogramDataPoint) | ::Nil","visibility":"Public","body":"@data_points"}},{"html_id":"data_points=(data_points:Array(ExponentialHistogramDataPoint)?)-instance-method","name":"data_points=","abstract":false,"args":[{"name":"data_points","external_name":"data_points","restriction":"Array(ExponentialHistogramDataPoint) | ::Nil"}],"args_string":"(data_points : Array(ExponentialHistogramDataPoint)?)","args_html":"(data_points : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/ExponentialHistogramDataPoint.html\">ExponentialHistogramDataPoint</a>)?)","def":{"name":"data_points=","args":[{"name":"data_points","external_name":"data_points","restriction":"Array(ExponentialHistogramDataPoint) | ::Nil"}],"visibility":"Public","body":"@data_points = data_points"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1115 = @data_points\n__temp_1116 = __temp_1115.is_a?(Enum) || (__temp_1115.is_a?(Array) && __temp_1115.first?.is_a?(Enum))\n__temp_1117 = ::Protobuf::WIRE_TYPES.fetch(ExponentialHistogramDataPoint, __temp_1116 ? 0 : 2)\nif !@data_points.nil?\n  @data_points.not_nil!.each do |item|\n    buf.write_info(1, __temp_1117)\n    buf.write_message(item)\n  end\nend\n__temp_1118 = @aggregation_temporality\n__temp_1119 = __temp_1118.is_a?(Enum) || (__temp_1118.is_a?(Array) && __temp_1118.first?.is_a?(Enum))\n__temp_1120 = ::Protobuf::WIRE_TYPES.fetch(AggregationTemporality, __temp_1119 ? 0 : 2)\nif !@aggregation_temporality.nil?\n  buf.write_info(2, __temp_1120)\n  buf.write_message(@aggregation_temporality.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/ExponentialHistogramDataPoint","path":"OpenTelemetry/Proto/Metrics/V1/ExponentialHistogramDataPoint.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::ExponentialHistogramDataPoint","name":"ExponentialHistogramDataPoint","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":151,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :attributes, pb_type: OpenTelemetry::Proto::Common::V1::KeyValue, crystal_type: OpenTelemetry::Proto::Common::V1::KeyValue, cast_type: Array(OpenTelemetry::Proto::Common::V1::KeyValue)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 2 => {name: :start_time_unix_nano, pb_type: :fixed64, crystal_type: UInt64, cast_type: UInt64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 3 => {name: :time_unix_nano, pb_type: :fixed64, crystal_type: UInt64, cast_type: UInt64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 4 => {name: :count, pb_type: :fixed64, crystal_type: UInt64, cast_type: UInt64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 5 => {name: :sum, pb_type: :double, crystal_type: Float64, cast_type: Float64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 6 => {name: :scale, pb_type: :sint32, crystal_type: Int32, cast_type: Int32?, native: true, optional: true, repeated: false, default: nil, packed: false}, 7 => {name: :zero_count, pb_type: :fixed64, crystal_type: UInt64, cast_type: UInt64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 8 => {name: :positive, pb_type: ExponentialHistogramDataPoint::Buckets, crystal_type: ExponentialHistogramDataPoint::Buckets, cast_type: ExponentialHistogramDataPoint::Buckets?, native: false, optional: true, repeated: false, default: nil, packed: false}, 9 => {name: :negative, pb_type: ExponentialHistogramDataPoint::Buckets, crystal_type: ExponentialHistogramDataPoint::Buckets, cast_type: ExponentialHistogramDataPoint::Buckets?, native: false, optional: true, repeated: false, default: nil, packed: false}, 10 => {name: :flags, pb_type: :uint32, crystal_type: UInt32, cast_type: UInt32?, native: true, optional: true, repeated: false, default: nil, packed: false}, 11 => {name: :exemplars, pb_type: Exemplar, crystal_type: Exemplar, cast_type: Array(Exemplar)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 12 => {name: :min, pb_type: :double, crystal_type: Float64, cast_type: Float64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 13 => {name: :max, pb_type: :double, crystal_type: Float64, cast_type: Float64?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?=nil,start_time_unix_nano:UInt64?=nil,time_unix_nano:UInt64?=nil,count:UInt64?=nil,sum:Float64?=nil,scale:Int32?=nil,zero_count:UInt64?=nil,positive:ExponentialHistogramDataPoint::Buckets?=nil,negative:ExponentialHistogramDataPoint::Buckets?=nil,flags:UInt32?=nil,exemplars:Array(Exemplar)?=nil,min:Float64?=nil,max:Float64?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"start_time_unix_nano","default_value":"nil","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"time_unix_nano","default_value":"nil","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"count","default_value":"nil","external_name":"count","restriction":"UInt64 | ::Nil"},{"name":"sum","default_value":"nil","external_name":"sum","restriction":"Float64 | ::Nil"},{"name":"scale","default_value":"nil","external_name":"scale","restriction":"Int32 | ::Nil"},{"name":"zero_count","default_value":"nil","external_name":"zero_count","restriction":"UInt64 | ::Nil"},{"name":"positive","default_value":"nil","external_name":"positive","restriction":"ExponentialHistogramDataPoint::Buckets | ::Nil"},{"name":"negative","default_value":"nil","external_name":"negative","restriction":"ExponentialHistogramDataPoint::Buckets | ::Nil"},{"name":"flags","default_value":"nil","external_name":"flags","restriction":"UInt32 | ::Nil"},{"name":"exemplars","default_value":"nil","external_name":"exemplars","restriction":"Array(Exemplar) | ::Nil"},{"name":"min","default_value":"nil","external_name":"min","restriction":"Float64 | ::Nil"},{"name":"max","default_value":"nil","external_name":"max","restriction":"Float64 | ::Nil"}],"args_string":"(attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)? = nil, start_time_unix_nano : UInt64? = nil, time_unix_nano : UInt64? = nil, count : UInt64? = nil, sum : Float64? = nil, scale : Int32? = nil, zero_count : UInt64? = nil, positive : ExponentialHistogramDataPoint::Buckets? = nil, negative : ExponentialHistogramDataPoint::Buckets? = nil, flags : UInt32? = nil, exemplars : Array(Exemplar)? = nil, min : Float64? = nil, max : Float64? = nil)","args_html":"(attributes : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)? = <span class=\"n\">nil</span>, start_time_unix_nano : UInt64? = <span class=\"n\">nil</span>, time_unix_nano : UInt64? = <span class=\"n\">nil</span>, count : UInt64? = <span class=\"n\">nil</span>, sum : Float64? = <span class=\"n\">nil</span>, scale : Int32? = <span class=\"n\">nil</span>, zero_count : UInt64? = <span class=\"n\">nil</span>, positive : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/ExponentialHistogramDataPoint/Buckets.html\">ExponentialHistogramDataPoint::Buckets</a>? = <span class=\"n\">nil</span>, negative : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/ExponentialHistogramDataPoint/Buckets.html\">ExponentialHistogramDataPoint::Buckets</a>? = <span class=\"n\">nil</span>, flags : UInt32? = <span class=\"n\">nil</span>, exemplars : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/Exemplar.html\">Exemplar</a>)? = <span class=\"n\">nil</span>, min : Float64? = <span class=\"n\">nil</span>, max : Float64? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"start_time_unix_nano","default_value":"nil","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"time_unix_nano","default_value":"nil","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"count","default_value":"nil","external_name":"count","restriction":"UInt64 | ::Nil"},{"name":"sum","default_value":"nil","external_name":"sum","restriction":"Float64 | ::Nil"},{"name":"scale","default_value":"nil","external_name":"scale","restriction":"Int32 | ::Nil"},{"name":"zero_count","default_value":"nil","external_name":"zero_count","restriction":"UInt64 | ::Nil"},{"name":"positive","default_value":"nil","external_name":"positive","restriction":"ExponentialHistogramDataPoint::Buckets | ::Nil"},{"name":"negative","default_value":"nil","external_name":"negative","restriction":"ExponentialHistogramDataPoint::Buckets | ::Nil"},{"name":"flags","default_value":"nil","external_name":"flags","restriction":"UInt32 | ::Nil"},{"name":"exemplars","default_value":"nil","external_name":"exemplars","restriction":"Array(Exemplar) | ::Nil"},{"name":"min","default_value":"nil","external_name":"min","restriction":"Float64 | ::Nil"},{"name":"max","default_value":"nil","external_name":"max","restriction":"Float64 | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(attributes, start_time_unix_nano, time_unix_nano, count, sum, scale, zero_count, positive, negative, flags, exemplars, min, max)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"attributes\" == key\n  return self.attributes\nend\nif \"start_time_unix_nano\" == key\n  return self.start_time_unix_nano\nend\nif \"time_unix_nano\" == key\n  return self.time_unix_nano\nend\nif \"count\" == key\n  return self.count\nend\nif \"sum\" == key\n  return self.sum\nend\nif \"scale\" == key\n  return self.scale\nend\nif \"zero_count\" == key\n  return self.zero_count\nend\nif \"positive\" == key\n  return self.positive\nend\nif \"negative\" == key\n  return self.negative\nend\nif \"flags\" == key\n  return self.flags\nend\nif \"exemplars\" == key\n  return self.exemplars\nend\nif \"min\" == key\n  return self.min\nend\nif \"max\" == key\n  return self.max\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?-instance-method","name":"attributes","abstract":false,"def":{"name":"attributes","return_type":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil","visibility":"Public","body":"@attributes"}},{"html_id":"attributes=(attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)-instance-method","name":"attributes=","abstract":false,"args":[{"name":"attributes","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"args_string":"(attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)","args_html":"(attributes : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)?)","def":{"name":"attributes=","args":[{"name":"attributes","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"visibility":"Public","body":"@attributes = attributes"}},{"html_id":"count:UInt64?-instance-method","name":"count","abstract":false,"def":{"name":"count","return_type":"UInt64 | ::Nil","visibility":"Public","body":"@count"}},{"html_id":"count=(count:UInt64?)-instance-method","name":"count=","abstract":false,"args":[{"name":"count","external_name":"count","restriction":"UInt64 | ::Nil"}],"args_string":"(count : UInt64?)","args_html":"(count : UInt64?)","def":{"name":"count=","args":[{"name":"count","external_name":"count","restriction":"UInt64 | ::Nil"}],"visibility":"Public","body":"@count = count"}},{"html_id":"exemplars:Array(Exemplar)?-instance-method","name":"exemplars","abstract":false,"def":{"name":"exemplars","return_type":"Array(Exemplar) | ::Nil","visibility":"Public","body":"@exemplars"}},{"html_id":"exemplars=(exemplars:Array(Exemplar)?)-instance-method","name":"exemplars=","abstract":false,"args":[{"name":"exemplars","external_name":"exemplars","restriction":"Array(Exemplar) | ::Nil"}],"args_string":"(exemplars : Array(Exemplar)?)","args_html":"(exemplars : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/Exemplar.html\">Exemplar</a>)?)","def":{"name":"exemplars=","args":[{"name":"exemplars","external_name":"exemplars","restriction":"Array(Exemplar) | ::Nil"}],"visibility":"Public","body":"@exemplars = exemplars"}},{"html_id":"flags:UInt32?-instance-method","name":"flags","abstract":false,"def":{"name":"flags","return_type":"UInt32 | ::Nil","visibility":"Public","body":"@flags"}},{"html_id":"flags=(flags:UInt32?)-instance-method","name":"flags=","abstract":false,"args":[{"name":"flags","external_name":"flags","restriction":"UInt32 | ::Nil"}],"args_string":"(flags : UInt32?)","args_html":"(flags : UInt32?)","def":{"name":"flags=","args":[{"name":"flags","external_name":"flags","restriction":"UInt32 | ::Nil"}],"visibility":"Public","body":"@flags = flags"}},{"html_id":"max:Float64?-instance-method","name":"max","abstract":false,"def":{"name":"max","return_type":"Float64 | ::Nil","visibility":"Public","body":"@max"}},{"html_id":"max=(max:Float64?)-instance-method","name":"max=","abstract":false,"args":[{"name":"max","external_name":"max","restriction":"Float64 | ::Nil"}],"args_string":"(max : Float64?)","args_html":"(max : Float64?)","def":{"name":"max=","args":[{"name":"max","external_name":"max","restriction":"Float64 | ::Nil"}],"visibility":"Public","body":"@max = max"}},{"html_id":"min:Float64?-instance-method","name":"min","abstract":false,"def":{"name":"min","return_type":"Float64 | ::Nil","visibility":"Public","body":"@min"}},{"html_id":"min=(min:Float64?)-instance-method","name":"min=","abstract":false,"args":[{"name":"min","external_name":"min","restriction":"Float64 | ::Nil"}],"args_string":"(min : Float64?)","args_html":"(min : Float64?)","def":{"name":"min=","args":[{"name":"min","external_name":"min","restriction":"Float64 | ::Nil"}],"visibility":"Public","body":"@min = min"}},{"html_id":"negative:ExponentialHistogramDataPoint::Buckets?-instance-method","name":"negative","abstract":false,"def":{"name":"negative","return_type":"ExponentialHistogramDataPoint::Buckets | ::Nil","visibility":"Public","body":"@negative"}},{"html_id":"negative=(negative:ExponentialHistogramDataPoint::Buckets?)-instance-method","name":"negative=","abstract":false,"args":[{"name":"negative","external_name":"negative","restriction":"ExponentialHistogramDataPoint::Buckets | ::Nil"}],"args_string":"(negative : ExponentialHistogramDataPoint::Buckets?)","args_html":"(negative : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/ExponentialHistogramDataPoint/Buckets.html\">ExponentialHistogramDataPoint::Buckets</a>?)","def":{"name":"negative=","args":[{"name":"negative","external_name":"negative","restriction":"ExponentialHistogramDataPoint::Buckets | ::Nil"}],"visibility":"Public","body":"@negative = negative"}},{"html_id":"positive:ExponentialHistogramDataPoint::Buckets?-instance-method","name":"positive","abstract":false,"def":{"name":"positive","return_type":"ExponentialHistogramDataPoint::Buckets | ::Nil","visibility":"Public","body":"@positive"}},{"html_id":"positive=(positive:ExponentialHistogramDataPoint::Buckets?)-instance-method","name":"positive=","abstract":false,"args":[{"name":"positive","external_name":"positive","restriction":"ExponentialHistogramDataPoint::Buckets | ::Nil"}],"args_string":"(positive : ExponentialHistogramDataPoint::Buckets?)","args_html":"(positive : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/ExponentialHistogramDataPoint/Buckets.html\">ExponentialHistogramDataPoint::Buckets</a>?)","def":{"name":"positive=","args":[{"name":"positive","external_name":"positive","restriction":"ExponentialHistogramDataPoint::Buckets | ::Nil"}],"visibility":"Public","body":"@positive = positive"}},{"html_id":"scale:Int32?-instance-method","name":"scale","abstract":false,"def":{"name":"scale","return_type":"Int32 | ::Nil","visibility":"Public","body":"@scale"}},{"html_id":"scale=(scale:Int32?)-instance-method","name":"scale=","abstract":false,"args":[{"name":"scale","external_name":"scale","restriction":"Int32 | ::Nil"}],"args_string":"(scale : Int32?)","args_html":"(scale : Int32?)","def":{"name":"scale=","args":[{"name":"scale","external_name":"scale","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"@scale = scale"}},{"html_id":"start_time_unix_nano:UInt64?-instance-method","name":"start_time_unix_nano","abstract":false,"def":{"name":"start_time_unix_nano","return_type":"UInt64 | ::Nil","visibility":"Public","body":"@start_time_unix_nano"}},{"html_id":"start_time_unix_nano=(start_time_unix_nano:UInt64?)-instance-method","name":"start_time_unix_nano=","abstract":false,"args":[{"name":"start_time_unix_nano","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"}],"args_string":"(start_time_unix_nano : UInt64?)","args_html":"(start_time_unix_nano : UInt64?)","def":{"name":"start_time_unix_nano=","args":[{"name":"start_time_unix_nano","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"}],"visibility":"Public","body":"@start_time_unix_nano = start_time_unix_nano"}},{"html_id":"sum:Float64?-instance-method","name":"sum","abstract":false,"def":{"name":"sum","return_type":"Float64 | ::Nil","visibility":"Public","body":"@sum"}},{"html_id":"sum=(sum:Float64?)-instance-method","name":"sum=","abstract":false,"args":[{"name":"sum","external_name":"sum","restriction":"Float64 | ::Nil"}],"args_string":"(sum : Float64?)","args_html":"(sum : Float64?)","def":{"name":"sum=","args":[{"name":"sum","external_name":"sum","restriction":"Float64 | ::Nil"}],"visibility":"Public","body":"@sum = sum"}},{"html_id":"time_unix_nano:UInt64?-instance-method","name":"time_unix_nano","abstract":false,"def":{"name":"time_unix_nano","return_type":"UInt64 | ::Nil","visibility":"Public","body":"@time_unix_nano"}},{"html_id":"time_unix_nano=(time_unix_nano:UInt64?)-instance-method","name":"time_unix_nano=","abstract":false,"args":[{"name":"time_unix_nano","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"}],"args_string":"(time_unix_nano : UInt64?)","args_html":"(time_unix_nano : UInt64?)","def":{"name":"time_unix_nano=","args":[{"name":"time_unix_nano","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"}],"visibility":"Public","body":"@time_unix_nano = time_unix_nano"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1295 = @attributes\n__temp_1296 = __temp_1295.is_a?(Enum) || (__temp_1295.is_a?(Array) && __temp_1295.first?.is_a?(Enum))\n__temp_1297 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Common::V1::KeyValue, __temp_1296 ? 0 : 2)\nif !@attributes.nil?\n  @attributes.not_nil!.each do |item|\n    buf.write_info(1, __temp_1297)\n    buf.write_message(item)\n  end\nend\n__temp_1298 = @start_time_unix_nano\n__temp_1299 = __temp_1298.is_a?(Enum) || (__temp_1298.is_a?(Array) && __temp_1298.first?.is_a?(Enum))\n__temp_1300 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_1299 ? 0 : 2)\nif !@start_time_unix_nano.nil?\n  buf.write_info(2, __temp_1300)\n  buf.write_fixed64(@start_time_unix_nano.not_nil!)\nend\n__temp_1301 = @time_unix_nano\n__temp_1302 = __temp_1301.is_a?(Enum) || (__temp_1301.is_a?(Array) && __temp_1301.first?.is_a?(Enum))\n__temp_1303 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_1302 ? 0 : 2)\nif !@time_unix_nano.nil?\n  buf.write_info(3, __temp_1303)\n  buf.write_fixed64(@time_unix_nano.not_nil!)\nend\n__temp_1304 = @count\n__temp_1305 = __temp_1304.is_a?(Enum) || (__temp_1304.is_a?(Array) && __temp_1304.first?.is_a?(Enum))\n__temp_1306 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_1305 ? 0 : 2)\nif !@count.nil?\n  buf.write_info(4, __temp_1306)\n  buf.write_fixed64(@count.not_nil!)\nend\n__temp_1307 = @sum\n__temp_1308 = __temp_1307.is_a?(Enum) || (__temp_1307.is_a?(Array) && __temp_1307.first?.is_a?(Enum))\n__temp_1309 = ::Protobuf::WIRE_TYPES.fetch(:double, __temp_1308 ? 0 : 2)\nif !@sum.nil?\n  buf.write_info(5, __temp_1309)\n  buf.write_double(@sum.not_nil!)\nend\n__temp_1310 = @scale\n__temp_1311 = __temp_1310.is_a?(Enum) || (__temp_1310.is_a?(Array) && __temp_1310.first?.is_a?(Enum))\n__temp_1312 = ::Protobuf::WIRE_TYPES.fetch(:sint32, __temp_1311 ? 0 : 2)\nif !@scale.nil?\n  buf.write_info(6, __temp_1312)\n  buf.write_sint32(@scale.not_nil!)\nend\n__temp_1313 = @zero_count\n__temp_1314 = __temp_1313.is_a?(Enum) || (__temp_1313.is_a?(Array) && __temp_1313.first?.is_a?(Enum))\n__temp_1315 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_1314 ? 0 : 2)\nif !@zero_count.nil?\n  buf.write_info(7, __temp_1315)\n  buf.write_fixed64(@zero_count.not_nil!)\nend\n__temp_1316 = @positive\n__temp_1317 = __temp_1316.is_a?(Enum) || (__temp_1316.is_a?(Array) && __temp_1316.first?.is_a?(Enum))\n__temp_1318 = ::Protobuf::WIRE_TYPES.fetch(ExponentialHistogramDataPoint::Buckets, __temp_1317 ? 0 : 2)\nif !@positive.nil?\n  buf.write_info(8, __temp_1318)\n  buf.write_message(@positive.not_nil!)\nend\n__temp_1319 = @negative\n__temp_1320 = __temp_1319.is_a?(Enum) || (__temp_1319.is_a?(Array) && __temp_1319.first?.is_a?(Enum))\n__temp_1321 = ::Protobuf::WIRE_TYPES.fetch(ExponentialHistogramDataPoint::Buckets, __temp_1320 ? 0 : 2)\nif !@negative.nil?\n  buf.write_info(9, __temp_1321)\n  buf.write_message(@negative.not_nil!)\nend\n__temp_1322 = @flags\n__temp_1323 = __temp_1322.is_a?(Enum) || (__temp_1322.is_a?(Array) && __temp_1322.first?.is_a?(Enum))\n__temp_1324 = ::Protobuf::WIRE_TYPES.fetch(:uint32, __temp_1323 ? 0 : 2)\nif !@flags.nil?\n  buf.write_info(10, __temp_1324)\n  buf.write_uint32(@flags.not_nil!)\nend\n__temp_1325 = @exemplars\n__temp_1326 = __temp_1325.is_a?(Enum) || (__temp_1325.is_a?(Array) && __temp_1325.first?.is_a?(Enum))\n__temp_1327 = ::Protobuf::WIRE_TYPES.fetch(Exemplar, __temp_1326 ? 0 : 2)\nif !@exemplars.nil?\n  @exemplars.not_nil!.each do |item|\n    buf.write_info(11, __temp_1327)\n    buf.write_message(item)\n  end\nend\n__temp_1328 = @min\n__temp_1329 = __temp_1328.is_a?(Enum) || (__temp_1328.is_a?(Array) && __temp_1328.first?.is_a?(Enum))\n__temp_1330 = ::Protobuf::WIRE_TYPES.fetch(:double, __temp_1329 ? 0 : 2)\nif !@min.nil?\n  buf.write_info(12, __temp_1330)\n  buf.write_double(@min.not_nil!)\nend\n__temp_1331 = @max\n__temp_1332 = __temp_1331.is_a?(Enum) || (__temp_1331.is_a?(Array) && __temp_1331.first?.is_a?(Enum))\n__temp_1333 = ::Protobuf::WIRE_TYPES.fetch(:double, __temp_1332 ? 0 : 2)\nif !@max.nil?\n  buf.write_info(13, __temp_1333)\n  buf.write_double(@max.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}},{"html_id":"zero_count:UInt64?-instance-method","name":"zero_count","abstract":false,"def":{"name":"zero_count","return_type":"UInt64 | ::Nil","visibility":"Public","body":"@zero_count"}},{"html_id":"zero_count=(zero_count:UInt64?)-instance-method","name":"zero_count=","abstract":false,"args":[{"name":"zero_count","external_name":"zero_count","restriction":"UInt64 | ::Nil"}],"args_string":"(zero_count : UInt64?)","args_html":"(zero_count : UInt64?)","def":{"name":"zero_count=","args":[{"name":"zero_count","external_name":"zero_count","restriction":"UInt64 | ::Nil"}],"visibility":"Public","body":"@zero_count = zero_count"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/ExponentialHistogramDataPoint/Buckets","path":"OpenTelemetry/Proto/Metrics/V1/ExponentialHistogramDataPoint/Buckets.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::ExponentialHistogramDataPoint::Buckets","name":"Buckets","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":154,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :offset, pb_type: :sint32, crystal_type: Int32, cast_type: Int32?, native: true, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :bucket_counts, pb_type: :uint64, crystal_type: UInt64, cast_type: Array(UInt64)?, native: true, optional: true, repeated: true, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/ExponentialHistogramDataPoint","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::ExponentialHistogramDataPoint","name":"ExponentialHistogramDataPoint"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(offset:Int32?=nil,bucket_counts:Array(UInt64)?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"offset","default_value":"nil","external_name":"offset","restriction":"Int32 | ::Nil"},{"name":"bucket_counts","default_value":"nil","external_name":"bucket_counts","restriction":"Array(UInt64) | ::Nil"}],"args_string":"(offset : Int32? = nil, bucket_counts : Array(UInt64)? = nil)","args_html":"(offset : Int32? = <span class=\"n\">nil</span>, bucket_counts : Array(UInt64)? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"offset","default_value":"nil","external_name":"offset","restriction":"Int32 | ::Nil"},{"name":"bucket_counts","default_value":"nil","external_name":"bucket_counts","restriction":"Array(UInt64) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(offset, bucket_counts)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"offset\" == key\n  return self.offset\nend\nif \"bucket_counts\" == key\n  return self.bucket_counts\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"bucket_counts:Array(UInt64)?-instance-method","name":"bucket_counts","abstract":false,"def":{"name":"bucket_counts","return_type":"Array(UInt64) | ::Nil","visibility":"Public","body":"@bucket_counts"}},{"html_id":"bucket_counts=(bucket_counts:Array(UInt64)?)-instance-method","name":"bucket_counts=","abstract":false,"args":[{"name":"bucket_counts","external_name":"bucket_counts","restriction":"Array(UInt64) | ::Nil"}],"args_string":"(bucket_counts : Array(UInt64)?)","args_html":"(bucket_counts : Array(UInt64)?)","def":{"name":"bucket_counts=","args":[{"name":"bucket_counts","external_name":"bucket_counts","restriction":"Array(UInt64) | ::Nil"}],"visibility":"Public","body":"@bucket_counts = bucket_counts"}},{"html_id":"offset:Int32?-instance-method","name":"offset","abstract":false,"def":{"name":"offset","return_type":"Int32 | ::Nil","visibility":"Public","body":"@offset"}},{"html_id":"offset=(offset:Int32?)-instance-method","name":"offset=","abstract":false,"args":[{"name":"offset","external_name":"offset","restriction":"Int32 | ::Nil"}],"args_string":"(offset : Int32?)","args_html":"(offset : Int32?)","def":{"name":"offset=","args":[{"name":"offset","external_name":"offset","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"@offset = offset"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1246 = @offset\n__temp_1247 = __temp_1246.is_a?(Enum) || (__temp_1246.is_a?(Array) && __temp_1246.first?.is_a?(Enum))\n__temp_1248 = ::Protobuf::WIRE_TYPES.fetch(:sint32, __temp_1247 ? 0 : 2)\nif !@offset.nil?\n  buf.write_info(1, __temp_1248)\n  buf.write_sint32(@offset.not_nil!)\nend\n__temp_1249 = @bucket_counts\n__temp_1250 = __temp_1249.is_a?(Enum) || (__temp_1249.is_a?(Array) && __temp_1249.first?.is_a?(Enum))\n__temp_1251 = ::Protobuf::WIRE_TYPES.fetch(:uint64, __temp_1250 ? 0 : 2)\nif !@bucket_counts.nil?\n  buf.write_info(2, 2)\n  buf.write_packed(@bucket_counts, :uint64)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/Gauge","path":"OpenTelemetry/Proto/Metrics/V1/Gauge.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::Gauge","name":"Gauge","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":75,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :data_points, pb_type: NumberDataPoint, crystal_type: NumberDataPoint, cast_type: Array(NumberDataPoint)?, native: false, optional: true, repeated: true, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(data_points:Array(NumberDataPoint)?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"data_points","default_value":"nil","external_name":"data_points","restriction":"Array(NumberDataPoint) | ::Nil"}],"args_string":"(data_points : Array(NumberDataPoint)? = nil)","args_html":"(data_points : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/NumberDataPoint.html\">NumberDataPoint</a>)? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"data_points","default_value":"nil","external_name":"data_points","restriction":"Array(NumberDataPoint) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(data_points)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"data_points\" == key\n  return self.data_points\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"data_points:Array(NumberDataPoint)?-instance-method","name":"data_points","abstract":false,"def":{"name":"data_points","return_type":"Array(NumberDataPoint) | ::Nil","visibility":"Public","body":"@data_points"}},{"html_id":"data_points=(data_points:Array(NumberDataPoint)?)-instance-method","name":"data_points=","abstract":false,"args":[{"name":"data_points","external_name":"data_points","restriction":"Array(NumberDataPoint) | ::Nil"}],"args_string":"(data_points : Array(NumberDataPoint)?)","args_html":"(data_points : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/NumberDataPoint.html\">NumberDataPoint</a>)?)","def":{"name":"data_points=","args":[{"name":"data_points","external_name":"data_points","restriction":"Array(NumberDataPoint) | ::Nil"}],"visibility":"Public","body":"@data_points = data_points"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1070 = @data_points\n__temp_1071 = __temp_1070.is_a?(Enum) || (__temp_1070.is_a?(Array) && __temp_1070.first?.is_a?(Enum))\n__temp_1072 = ::Protobuf::WIRE_TYPES.fetch(NumberDataPoint, __temp_1071 ? 0 : 2)\nif !@data_points.nil?\n  @data_points.not_nil!.each do |item|\n    buf.write_info(1, __temp_1072)\n    buf.write_message(item)\n  end\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/Histogram","path":"OpenTelemetry/Proto/Metrics/V1/Histogram.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::Histogram","name":"Histogram","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":93,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :data_points, pb_type: HistogramDataPoint, crystal_type: HistogramDataPoint, cast_type: Array(HistogramDataPoint)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 2 => {name: :aggregation_temporality, pb_type: AggregationTemporality, crystal_type: AggregationTemporality, cast_type: AggregationTemporality?, native: false, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(data_points:Array(HistogramDataPoint)?=nil,aggregation_temporality:AggregationTemporality?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"data_points","default_value":"nil","external_name":"data_points","restriction":"Array(HistogramDataPoint) | ::Nil"},{"name":"aggregation_temporality","default_value":"nil","external_name":"aggregation_temporality","restriction":"AggregationTemporality | ::Nil"}],"args_string":"(data_points : Array(HistogramDataPoint)? = nil, aggregation_temporality : AggregationTemporality? = nil)","args_html":"(data_points : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/HistogramDataPoint.html\">HistogramDataPoint</a>)? = <span class=\"n\">nil</span>, aggregation_temporality : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/AggregationTemporality.html\">AggregationTemporality</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"data_points","default_value":"nil","external_name":"data_points","restriction":"Array(HistogramDataPoint) | ::Nil"},{"name":"aggregation_temporality","default_value":"nil","external_name":"aggregation_temporality","restriction":"AggregationTemporality | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(data_points, aggregation_temporality)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"data_points\" == key\n  return self.data_points\nend\nif \"aggregation_temporality\" == key\n  return self.aggregation_temporality\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"aggregation_temporality:AggregationTemporality?-instance-method","name":"aggregation_temporality","abstract":false,"def":{"name":"aggregation_temporality","return_type":"AggregationTemporality | ::Nil","visibility":"Public","body":"@aggregation_temporality"}},{"html_id":"aggregation_temporality=(aggregation_temporality:AggregationTemporality?)-instance-method","name":"aggregation_temporality=","abstract":false,"args":[{"name":"aggregation_temporality","external_name":"aggregation_temporality","restriction":"AggregationTemporality | ::Nil"}],"args_string":"(aggregation_temporality : AggregationTemporality?)","args_html":"(aggregation_temporality : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/AggregationTemporality.html\">AggregationTemporality</a>?)","def":{"name":"aggregation_temporality=","args":[{"name":"aggregation_temporality","external_name":"aggregation_temporality","restriction":"AggregationTemporality | ::Nil"}],"visibility":"Public","body":"@aggregation_temporality = aggregation_temporality"}},{"html_id":"data_points:Array(HistogramDataPoint)?-instance-method","name":"data_points","abstract":false,"def":{"name":"data_points","return_type":"Array(HistogramDataPoint) | ::Nil","visibility":"Public","body":"@data_points"}},{"html_id":"data_points=(data_points:Array(HistogramDataPoint)?)-instance-method","name":"data_points=","abstract":false,"args":[{"name":"data_points","external_name":"data_points","restriction":"Array(HistogramDataPoint) | ::Nil"}],"args_string":"(data_points : Array(HistogramDataPoint)?)","args_html":"(data_points : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/HistogramDataPoint.html\">HistogramDataPoint</a>)?)","def":{"name":"data_points=","args":[{"name":"data_points","external_name":"data_points","restriction":"Array(HistogramDataPoint) | ::Nil"}],"visibility":"Public","body":"@data_points = data_points"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1101 = @data_points\n__temp_1102 = __temp_1101.is_a?(Enum) || (__temp_1101.is_a?(Array) && __temp_1101.first?.is_a?(Enum))\n__temp_1103 = ::Protobuf::WIRE_TYPES.fetch(HistogramDataPoint, __temp_1102 ? 0 : 2)\nif !@data_points.nil?\n  @data_points.not_nil!.each do |item|\n    buf.write_info(1, __temp_1103)\n    buf.write_message(item)\n  end\nend\n__temp_1104 = @aggregation_temporality\n__temp_1105 = __temp_1104.is_a?(Enum) || (__temp_1104.is_a?(Array) && __temp_1104.first?.is_a?(Enum))\n__temp_1106 = ::Protobuf::WIRE_TYPES.fetch(AggregationTemporality, __temp_1105 ? 0 : 2)\nif !@aggregation_temporality.nil?\n  buf.write_info(2, __temp_1106)\n  buf.write_message(@aggregation_temporality.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/HistogramDataPoint","path":"OpenTelemetry/Proto/Metrics/V1/HistogramDataPoint.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::HistogramDataPoint","name":"HistogramDataPoint","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":133,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{9 => {name: :attributes, pb_type: OpenTelemetry::Proto::Common::V1::KeyValue, crystal_type: OpenTelemetry::Proto::Common::V1::KeyValue, cast_type: Array(OpenTelemetry::Proto::Common::V1::KeyValue)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 2 => {name: :start_time_unix_nano, pb_type: :fixed64, crystal_type: UInt64, cast_type: UInt64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 3 => {name: :time_unix_nano, pb_type: :fixed64, crystal_type: UInt64, cast_type: UInt64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 4 => {name: :count, pb_type: :fixed64, crystal_type: UInt64, cast_type: UInt64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 5 => {name: :sum, pb_type: :double, crystal_type: Float64, cast_type: Float64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 6 => {name: :bucket_counts, pb_type: :fixed64, crystal_type: UInt64, cast_type: Array(UInt64)?, native: true, optional: true, repeated: true, default: nil, packed: false}, 7 => {name: :explicit_bounds, pb_type: :double, crystal_type: Float64, cast_type: Array(Float64)?, native: true, optional: true, repeated: true, default: nil, packed: false}, 8 => {name: :exemplars, pb_type: Exemplar, crystal_type: Exemplar, cast_type: Array(Exemplar)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 10 => {name: :flags, pb_type: :uint32, crystal_type: UInt32, cast_type: UInt32?, native: true, optional: true, repeated: false, default: nil, packed: false}, 11 => {name: :min, pb_type: :double, crystal_type: Float64, cast_type: Float64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 12 => {name: :max, pb_type: :double, crystal_type: Float64, cast_type: Float64?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?=nil,start_time_unix_nano:UInt64?=nil,time_unix_nano:UInt64?=nil,count:UInt64?=nil,sum:Float64?=nil,bucket_counts:Array(UInt64)?=nil,explicit_bounds:Array(Float64)?=nil,exemplars:Array(Exemplar)?=nil,flags:UInt32?=nil,min:Float64?=nil,max:Float64?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"start_time_unix_nano","default_value":"nil","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"time_unix_nano","default_value":"nil","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"count","default_value":"nil","external_name":"count","restriction":"UInt64 | ::Nil"},{"name":"sum","default_value":"nil","external_name":"sum","restriction":"Float64 | ::Nil"},{"name":"bucket_counts","default_value":"nil","external_name":"bucket_counts","restriction":"Array(UInt64) | ::Nil"},{"name":"explicit_bounds","default_value":"nil","external_name":"explicit_bounds","restriction":"Array(Float64) | ::Nil"},{"name":"exemplars","default_value":"nil","external_name":"exemplars","restriction":"Array(Exemplar) | ::Nil"},{"name":"flags","default_value":"nil","external_name":"flags","restriction":"UInt32 | ::Nil"},{"name":"min","default_value":"nil","external_name":"min","restriction":"Float64 | ::Nil"},{"name":"max","default_value":"nil","external_name":"max","restriction":"Float64 | ::Nil"}],"args_string":"(attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)? = nil, start_time_unix_nano : UInt64? = nil, time_unix_nano : UInt64? = nil, count : UInt64? = nil, sum : Float64? = nil, bucket_counts : Array(UInt64)? = nil, explicit_bounds : Array(Float64)? = nil, exemplars : Array(Exemplar)? = nil, flags : UInt32? = nil, min : Float64? = nil, max : Float64? = nil)","args_html":"(attributes : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)? = <span class=\"n\">nil</span>, start_time_unix_nano : UInt64? = <span class=\"n\">nil</span>, time_unix_nano : UInt64? = <span class=\"n\">nil</span>, count : UInt64? = <span class=\"n\">nil</span>, sum : Float64? = <span class=\"n\">nil</span>, bucket_counts : Array(UInt64)? = <span class=\"n\">nil</span>, explicit_bounds : Array(Float64)? = <span class=\"n\">nil</span>, exemplars : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/Exemplar.html\">Exemplar</a>)? = <span class=\"n\">nil</span>, flags : UInt32? = <span class=\"n\">nil</span>, min : Float64? = <span class=\"n\">nil</span>, max : Float64? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"start_time_unix_nano","default_value":"nil","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"time_unix_nano","default_value":"nil","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"count","default_value":"nil","external_name":"count","restriction":"UInt64 | ::Nil"},{"name":"sum","default_value":"nil","external_name":"sum","restriction":"Float64 | ::Nil"},{"name":"bucket_counts","default_value":"nil","external_name":"bucket_counts","restriction":"Array(UInt64) | ::Nil"},{"name":"explicit_bounds","default_value":"nil","external_name":"explicit_bounds","restriction":"Array(Float64) | ::Nil"},{"name":"exemplars","default_value":"nil","external_name":"exemplars","restriction":"Array(Exemplar) | ::Nil"},{"name":"flags","default_value":"nil","external_name":"flags","restriction":"UInt32 | ::Nil"},{"name":"min","default_value":"nil","external_name":"min","restriction":"Float64 | ::Nil"},{"name":"max","default_value":"nil","external_name":"max","restriction":"Float64 | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(attributes, start_time_unix_nano, time_unix_nano, count, sum, bucket_counts, explicit_bounds, exemplars, flags, min, max)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"attributes\" == key\n  return self.attributes\nend\nif \"start_time_unix_nano\" == key\n  return self.start_time_unix_nano\nend\nif \"time_unix_nano\" == key\n  return self.time_unix_nano\nend\nif \"count\" == key\n  return self.count\nend\nif \"sum\" == key\n  return self.sum\nend\nif \"bucket_counts\" == key\n  return self.bucket_counts\nend\nif \"explicit_bounds\" == key\n  return self.explicit_bounds\nend\nif \"exemplars\" == key\n  return self.exemplars\nend\nif \"flags\" == key\n  return self.flags\nend\nif \"min\" == key\n  return self.min\nend\nif \"max\" == key\n  return self.max\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?-instance-method","name":"attributes","abstract":false,"def":{"name":"attributes","return_type":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil","visibility":"Public","body":"@attributes"}},{"html_id":"attributes=(attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)-instance-method","name":"attributes=","abstract":false,"args":[{"name":"attributes","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"args_string":"(attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)","args_html":"(attributes : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)?)","def":{"name":"attributes=","args":[{"name":"attributes","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"visibility":"Public","body":"@attributes = attributes"}},{"html_id":"bucket_counts:Array(UInt64)?-instance-method","name":"bucket_counts","abstract":false,"def":{"name":"bucket_counts","return_type":"Array(UInt64) | ::Nil","visibility":"Public","body":"@bucket_counts"}},{"html_id":"bucket_counts=(bucket_counts:Array(UInt64)?)-instance-method","name":"bucket_counts=","abstract":false,"args":[{"name":"bucket_counts","external_name":"bucket_counts","restriction":"Array(UInt64) | ::Nil"}],"args_string":"(bucket_counts : Array(UInt64)?)","args_html":"(bucket_counts : Array(UInt64)?)","def":{"name":"bucket_counts=","args":[{"name":"bucket_counts","external_name":"bucket_counts","restriction":"Array(UInt64) | ::Nil"}],"visibility":"Public","body":"@bucket_counts = bucket_counts"}},{"html_id":"count:UInt64?-instance-method","name":"count","abstract":false,"def":{"name":"count","return_type":"UInt64 | ::Nil","visibility":"Public","body":"@count"}},{"html_id":"count=(count:UInt64?)-instance-method","name":"count=","abstract":false,"args":[{"name":"count","external_name":"count","restriction":"UInt64 | ::Nil"}],"args_string":"(count : UInt64?)","args_html":"(count : UInt64?)","def":{"name":"count=","args":[{"name":"count","external_name":"count","restriction":"UInt64 | ::Nil"}],"visibility":"Public","body":"@count = count"}},{"html_id":"exemplars:Array(Exemplar)?-instance-method","name":"exemplars","abstract":false,"def":{"name":"exemplars","return_type":"Array(Exemplar) | ::Nil","visibility":"Public","body":"@exemplars"}},{"html_id":"exemplars=(exemplars:Array(Exemplar)?)-instance-method","name":"exemplars=","abstract":false,"args":[{"name":"exemplars","external_name":"exemplars","restriction":"Array(Exemplar) | ::Nil"}],"args_string":"(exemplars : Array(Exemplar)?)","args_html":"(exemplars : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/Exemplar.html\">Exemplar</a>)?)","def":{"name":"exemplars=","args":[{"name":"exemplars","external_name":"exemplars","restriction":"Array(Exemplar) | ::Nil"}],"visibility":"Public","body":"@exemplars = exemplars"}},{"html_id":"explicit_bounds:Array(Float64)?-instance-method","name":"explicit_bounds","abstract":false,"def":{"name":"explicit_bounds","return_type":"Array(Float64) | ::Nil","visibility":"Public","body":"@explicit_bounds"}},{"html_id":"explicit_bounds=(explicit_bounds:Array(Float64)?)-instance-method","name":"explicit_bounds=","abstract":false,"args":[{"name":"explicit_bounds","external_name":"explicit_bounds","restriction":"Array(Float64) | ::Nil"}],"args_string":"(explicit_bounds : Array(Float64)?)","args_html":"(explicit_bounds : Array(Float64)?)","def":{"name":"explicit_bounds=","args":[{"name":"explicit_bounds","external_name":"explicit_bounds","restriction":"Array(Float64) | ::Nil"}],"visibility":"Public","body":"@explicit_bounds = explicit_bounds"}},{"html_id":"flags:UInt32?-instance-method","name":"flags","abstract":false,"def":{"name":"flags","return_type":"UInt32 | ::Nil","visibility":"Public","body":"@flags"}},{"html_id":"flags=(flags:UInt32?)-instance-method","name":"flags=","abstract":false,"args":[{"name":"flags","external_name":"flags","restriction":"UInt32 | ::Nil"}],"args_string":"(flags : UInt32?)","args_html":"(flags : UInt32?)","def":{"name":"flags=","args":[{"name":"flags","external_name":"flags","restriction":"UInt32 | ::Nil"}],"visibility":"Public","body":"@flags = flags"}},{"html_id":"max:Float64?-instance-method","name":"max","abstract":false,"def":{"name":"max","return_type":"Float64 | ::Nil","visibility":"Public","body":"@max"}},{"html_id":"max=(max:Float64?)-instance-method","name":"max=","abstract":false,"args":[{"name":"max","external_name":"max","restriction":"Float64 | ::Nil"}],"args_string":"(max : Float64?)","args_html":"(max : Float64?)","def":{"name":"max=","args":[{"name":"max","external_name":"max","restriction":"Float64 | ::Nil"}],"visibility":"Public","body":"@max = max"}},{"html_id":"min:Float64?-instance-method","name":"min","abstract":false,"def":{"name":"min","return_type":"Float64 | ::Nil","visibility":"Public","body":"@min"}},{"html_id":"min=(min:Float64?)-instance-method","name":"min=","abstract":false,"args":[{"name":"min","external_name":"min","restriction":"Float64 | ::Nil"}],"args_string":"(min : Float64?)","args_html":"(min : Float64?)","def":{"name":"min=","args":[{"name":"min","external_name":"min","restriction":"Float64 | ::Nil"}],"visibility":"Public","body":"@min = min"}},{"html_id":"start_time_unix_nano:UInt64?-instance-method","name":"start_time_unix_nano","abstract":false,"def":{"name":"start_time_unix_nano","return_type":"UInt64 | ::Nil","visibility":"Public","body":"@start_time_unix_nano"}},{"html_id":"start_time_unix_nano=(start_time_unix_nano:UInt64?)-instance-method","name":"start_time_unix_nano=","abstract":false,"args":[{"name":"start_time_unix_nano","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"}],"args_string":"(start_time_unix_nano : UInt64?)","args_html":"(start_time_unix_nano : UInt64?)","def":{"name":"start_time_unix_nano=","args":[{"name":"start_time_unix_nano","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"}],"visibility":"Public","body":"@start_time_unix_nano = start_time_unix_nano"}},{"html_id":"sum:Float64?-instance-method","name":"sum","abstract":false,"def":{"name":"sum","return_type":"Float64 | ::Nil","visibility":"Public","body":"@sum"}},{"html_id":"sum=(sum:Float64?)-instance-method","name":"sum=","abstract":false,"args":[{"name":"sum","external_name":"sum","restriction":"Float64 | ::Nil"}],"args_string":"(sum : Float64?)","args_html":"(sum : Float64?)","def":{"name":"sum=","args":[{"name":"sum","external_name":"sum","restriction":"Float64 | ::Nil"}],"visibility":"Public","body":"@sum = sum"}},{"html_id":"time_unix_nano:UInt64?-instance-method","name":"time_unix_nano","abstract":false,"def":{"name":"time_unix_nano","return_type":"UInt64 | ::Nil","visibility":"Public","body":"@time_unix_nano"}},{"html_id":"time_unix_nano=(time_unix_nano:UInt64?)-instance-method","name":"time_unix_nano=","abstract":false,"args":[{"name":"time_unix_nano","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"}],"args_string":"(time_unix_nano : UInt64?)","args_html":"(time_unix_nano : UInt64?)","def":{"name":"time_unix_nano=","args":[{"name":"time_unix_nano","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"}],"visibility":"Public","body":"@time_unix_nano = time_unix_nano"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1207 = @attributes\n__temp_1208 = __temp_1207.is_a?(Enum) || (__temp_1207.is_a?(Array) && __temp_1207.first?.is_a?(Enum))\n__temp_1209 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Common::V1::KeyValue, __temp_1208 ? 0 : 2)\nif !@attributes.nil?\n  @attributes.not_nil!.each do |item|\n    buf.write_info(9, __temp_1209)\n    buf.write_message(item)\n  end\nend\n__temp_1210 = @start_time_unix_nano\n__temp_1211 = __temp_1210.is_a?(Enum) || (__temp_1210.is_a?(Array) && __temp_1210.first?.is_a?(Enum))\n__temp_1212 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_1211 ? 0 : 2)\nif !@start_time_unix_nano.nil?\n  buf.write_info(2, __temp_1212)\n  buf.write_fixed64(@start_time_unix_nano.not_nil!)\nend\n__temp_1213 = @time_unix_nano\n__temp_1214 = __temp_1213.is_a?(Enum) || (__temp_1213.is_a?(Array) && __temp_1213.first?.is_a?(Enum))\n__temp_1215 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_1214 ? 0 : 2)\nif !@time_unix_nano.nil?\n  buf.write_info(3, __temp_1215)\n  buf.write_fixed64(@time_unix_nano.not_nil!)\nend\n__temp_1216 = @count\n__temp_1217 = __temp_1216.is_a?(Enum) || (__temp_1216.is_a?(Array) && __temp_1216.first?.is_a?(Enum))\n__temp_1218 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_1217 ? 0 : 2)\nif !@count.nil?\n  buf.write_info(4, __temp_1218)\n  buf.write_fixed64(@count.not_nil!)\nend\n__temp_1219 = @sum\n__temp_1220 = __temp_1219.is_a?(Enum) || (__temp_1219.is_a?(Array) && __temp_1219.first?.is_a?(Enum))\n__temp_1221 = ::Protobuf::WIRE_TYPES.fetch(:double, __temp_1220 ? 0 : 2)\nif !@sum.nil?\n  buf.write_info(5, __temp_1221)\n  buf.write_double(@sum.not_nil!)\nend\n__temp_1222 = @bucket_counts\n__temp_1223 = __temp_1222.is_a?(Enum) || (__temp_1222.is_a?(Array) && __temp_1222.first?.is_a?(Enum))\n__temp_1224 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_1223 ? 0 : 2)\nif !@bucket_counts.nil?\n  buf.write_info(6, 2)\n  buf.write_packed(@bucket_counts, :fixed64)\nend\n__temp_1225 = @explicit_bounds\n__temp_1226 = __temp_1225.is_a?(Enum) || (__temp_1225.is_a?(Array) && __temp_1225.first?.is_a?(Enum))\n__temp_1227 = ::Protobuf::WIRE_TYPES.fetch(:double, __temp_1226 ? 0 : 2)\nif !@explicit_bounds.nil?\n  buf.write_info(7, 2)\n  buf.write_packed(@explicit_bounds, :double)\nend\n__temp_1228 = @exemplars\n__temp_1229 = __temp_1228.is_a?(Enum) || (__temp_1228.is_a?(Array) && __temp_1228.first?.is_a?(Enum))\n__temp_1230 = ::Protobuf::WIRE_TYPES.fetch(Exemplar, __temp_1229 ? 0 : 2)\nif !@exemplars.nil?\n  @exemplars.not_nil!.each do |item|\n    buf.write_info(8, __temp_1230)\n    buf.write_message(item)\n  end\nend\n__temp_1231 = @flags\n__temp_1232 = __temp_1231.is_a?(Enum) || (__temp_1231.is_a?(Array) && __temp_1231.first?.is_a?(Enum))\n__temp_1233 = ::Protobuf::WIRE_TYPES.fetch(:uint32, __temp_1232 ? 0 : 2)\nif !@flags.nil?\n  buf.write_info(10, __temp_1233)\n  buf.write_uint32(@flags.not_nil!)\nend\n__temp_1234 = @min\n__temp_1235 = __temp_1234.is_a?(Enum) || (__temp_1234.is_a?(Array) && __temp_1234.first?.is_a?(Enum))\n__temp_1236 = ::Protobuf::WIRE_TYPES.fetch(:double, __temp_1235 ? 0 : 2)\nif !@min.nil?\n  buf.write_info(11, __temp_1236)\n  buf.write_double(@min.not_nil!)\nend\n__temp_1237 = @max\n__temp_1238 = __temp_1237.is_a?(Enum) || (__temp_1237.is_a?(Array) && __temp_1237.first?.is_a?(Enum))\n__temp_1239 = ::Protobuf::WIRE_TYPES.fetch(:double, __temp_1238 ? 0 : 2)\nif !@max.nil?\n  buf.write_info(12, __temp_1239)\n  buf.write_double(@max.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/InstrumentationLibraryMetrics","path":"OpenTelemetry/Proto/Metrics/V1/InstrumentationLibraryMetrics.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::InstrumentationLibraryMetrics","name":"InstrumentationLibraryMetrics","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":50,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :instrumentation_library, pb_type: OpenTelemetry::Proto::Common::V1::InstrumentationLibrary, crystal_type: OpenTelemetry::Proto::Common::V1::InstrumentationLibrary, cast_type: OpenTelemetry::Proto::Common::V1::InstrumentationLibrary?, native: false, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :metrics, pb_type: Metric, crystal_type: Metric, cast_type: Array(Metric)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 3 => {name: :schema_url, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(instrumentation_library:OpenTelemetry::Proto::Common::V1::InstrumentationLibrary?=nil,metrics:Array(Metric)?=nil,schema_url:String?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"instrumentation_library","default_value":"nil","external_name":"instrumentation_library","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationLibrary | ::Nil"},{"name":"metrics","default_value":"nil","external_name":"metrics","restriction":"Array(Metric) | ::Nil"},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":"String | ::Nil"}],"args_string":"(instrumentation_library : OpenTelemetry::Proto::Common::V1::InstrumentationLibrary? = nil, metrics : Array(Metric)? = nil, schema_url : String? = nil)","args_html":"(instrumentation_library : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/InstrumentationLibrary.html\">OpenTelemetry::Proto::Common::V1::InstrumentationLibrary</a>? = <span class=\"n\">nil</span>, metrics : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/Metric.html\">Metric</a>)? = <span class=\"n\">nil</span>, schema_url : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"instrumentation_library","default_value":"nil","external_name":"instrumentation_library","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationLibrary | ::Nil"},{"name":"metrics","default_value":"nil","external_name":"metrics","restriction":"Array(Metric) | ::Nil"},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(instrumentation_library, metrics, schema_url)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"instrumentation_library\" == key\n  return self.instrumentation_library\nend\nif \"metrics\" == key\n  return self.metrics\nend\nif \"schema_url\" == key\n  return self.schema_url\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"instrumentation_library:OpenTelemetry::Proto::Common::V1::InstrumentationLibrary?-instance-method","name":"instrumentation_library","abstract":false,"def":{"name":"instrumentation_library","return_type":"OpenTelemetry::Proto::Common::V1::InstrumentationLibrary | ::Nil","visibility":"Public","body":"@instrumentation_library"}},{"html_id":"instrumentation_library=(instrumentation_library:OpenTelemetry::Proto::Common::V1::InstrumentationLibrary?)-instance-method","name":"instrumentation_library=","abstract":false,"args":[{"name":"instrumentation_library","external_name":"instrumentation_library","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationLibrary | ::Nil"}],"args_string":"(instrumentation_library : OpenTelemetry::Proto::Common::V1::InstrumentationLibrary?)","args_html":"(instrumentation_library : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/InstrumentationLibrary.html\">OpenTelemetry::Proto::Common::V1::InstrumentationLibrary</a>?)","def":{"name":"instrumentation_library=","args":[{"name":"instrumentation_library","external_name":"instrumentation_library","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationLibrary | ::Nil"}],"visibility":"Public","body":"@instrumentation_library = instrumentation_library"}},{"html_id":"metrics:Array(Metric)?-instance-method","name":"metrics","abstract":false,"def":{"name":"metrics","return_type":"Array(Metric) | ::Nil","visibility":"Public","body":"@metrics"}},{"html_id":"metrics=(metrics:Array(Metric)?)-instance-method","name":"metrics=","abstract":false,"args":[{"name":"metrics","external_name":"metrics","restriction":"Array(Metric) | ::Nil"}],"args_string":"(metrics : Array(Metric)?)","args_html":"(metrics : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/Metric.html\">Metric</a>)?)","def":{"name":"metrics=","args":[{"name":"metrics","external_name":"metrics","restriction":"Array(Metric) | ::Nil"}],"visibility":"Public","body":"@metrics = metrics"}},{"html_id":"schema_url:String?-instance-method","name":"schema_url","abstract":false,"def":{"name":"schema_url","return_type":"String | ::Nil","visibility":"Public","body":"@schema_url"}},{"html_id":"schema_url=(schema_url:String?)-instance-method","name":"schema_url=","abstract":false,"args":[{"name":"schema_url","external_name":"schema_url","restriction":"String | ::Nil"}],"args_string":"(schema_url : String?)","args_html":"(schema_url : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"schema_url=","args":[{"name":"schema_url","external_name":"schema_url","restriction":"String | ::Nil"}],"visibility":"Public","body":"@schema_url = schema_url"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1004 = @instrumentation_library\n__temp_1005 = __temp_1004.is_a?(Enum) || (__temp_1004.is_a?(Array) && __temp_1004.first?.is_a?(Enum))\n__temp_1006 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Common::V1::InstrumentationLibrary, __temp_1005 ? 0 : 2)\nif !@instrumentation_library.nil?\n  buf.write_info(1, __temp_1006)\n  buf.write_message(@instrumentation_library.not_nil!)\nend\n__temp_1007 = @metrics\n__temp_1008 = __temp_1007.is_a?(Enum) || (__temp_1007.is_a?(Array) && __temp_1007.first?.is_a?(Enum))\n__temp_1009 = ::Protobuf::WIRE_TYPES.fetch(Metric, __temp_1008 ? 0 : 2)\nif !@metrics.nil?\n  @metrics.not_nil!.each do |item|\n    buf.write_info(2, __temp_1009)\n    buf.write_message(item)\n  end\nend\n__temp_1010 = @schema_url\n__temp_1011 = __temp_1010.is_a?(Enum) || (__temp_1010.is_a?(Array) && __temp_1010.first?.is_a?(Enum))\n__temp_1012 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_1011 ? 0 : 2)\nif !@schema_url.nil?\n  buf.write_info(3, __temp_1012)\n  buf.write_string(@schema_url.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/Metric","path":"OpenTelemetry/Proto/Metrics/V1/Metric.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::Metric","name":"Metric","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":60,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :name, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :description, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}, 3 => {name: :unit, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}, 5 => {name: :gauge, pb_type: Gauge, crystal_type: Gauge, cast_type: Gauge?, native: false, optional: true, repeated: false, default: nil, packed: false}, 7 => {name: :sum, pb_type: Sum, crystal_type: Sum, cast_type: Sum?, native: false, optional: true, repeated: false, default: nil, packed: false}, 9 => {name: :histogram, pb_type: Histogram, crystal_type: Histogram, cast_type: Histogram?, native: false, optional: true, repeated: false, default: nil, packed: false}, 10 => {name: :exponential_histogram, pb_type: ExponentialHistogram, crystal_type: ExponentialHistogram, cast_type: ExponentialHistogram?, native: false, optional: true, repeated: false, default: nil, packed: false}, 11 => {name: :summary, pb_type: Summary, crystal_type: Summary, cast_type: Summary?, native: false, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(name:String?=nil,description:String?=nil,unit:String?=nil,gauge:Gauge?=nil,sum:Sum?=nil,histogram:Histogram?=nil,exponential_histogram:ExponentialHistogram?=nil,summary:Summary?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"name","default_value":"nil","external_name":"name","restriction":"String | ::Nil"},{"name":"description","default_value":"nil","external_name":"description","restriction":"String | ::Nil"},{"name":"unit","default_value":"nil","external_name":"unit","restriction":"String | ::Nil"},{"name":"gauge","default_value":"nil","external_name":"gauge","restriction":"Gauge | ::Nil"},{"name":"sum","default_value":"nil","external_name":"sum","restriction":"Sum | ::Nil"},{"name":"histogram","default_value":"nil","external_name":"histogram","restriction":"Histogram | ::Nil"},{"name":"exponential_histogram","default_value":"nil","external_name":"exponential_histogram","restriction":"ExponentialHistogram | ::Nil"},{"name":"summary","default_value":"nil","external_name":"summary","restriction":"Summary | ::Nil"}],"args_string":"(name : String? = nil, description : String? = nil, unit : String? = nil, gauge : Gauge? = nil, sum : Sum? = nil, histogram : Histogram? = nil, exponential_histogram : ExponentialHistogram? = nil, summary : Summary? = nil)","args_html":"(name : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>, description : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>, unit : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>, gauge : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/Gauge.html\">Gauge</a>? = <span class=\"n\">nil</span>, sum : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/Sum.html\">Sum</a>? = <span class=\"n\">nil</span>, histogram : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/Histogram.html\">Histogram</a>? = <span class=\"n\">nil</span>, exponential_histogram : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/ExponentialHistogram.html\">ExponentialHistogram</a>? = <span class=\"n\">nil</span>, summary : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/Summary.html\">Summary</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"name","default_value":"nil","external_name":"name","restriction":"String | ::Nil"},{"name":"description","default_value":"nil","external_name":"description","restriction":"String | ::Nil"},{"name":"unit","default_value":"nil","external_name":"unit","restriction":"String | ::Nil"},{"name":"gauge","default_value":"nil","external_name":"gauge","restriction":"Gauge | ::Nil"},{"name":"sum","default_value":"nil","external_name":"sum","restriction":"Sum | ::Nil"},{"name":"histogram","default_value":"nil","external_name":"histogram","restriction":"Histogram | ::Nil"},{"name":"exponential_histogram","default_value":"nil","external_name":"exponential_histogram","restriction":"ExponentialHistogram | ::Nil"},{"name":"summary","default_value":"nil","external_name":"summary","restriction":"Summary | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(name, description, unit, gauge, sum, histogram, exponential_histogram, summary)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"name\" == key\n  return self.name\nend\nif \"description\" == key\n  return self.description\nend\nif \"unit\" == key\n  return self.unit\nend\nif \"gauge\" == key\n  return self.gauge\nend\nif \"sum\" == key\n  return self.sum\nend\nif \"histogram\" == key\n  return self.histogram\nend\nif \"exponential_histogram\" == key\n  return self.exponential_histogram\nend\nif \"summary\" == key\n  return self.summary\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"description:String?-instance-method","name":"description","abstract":false,"def":{"name":"description","return_type":"String | ::Nil","visibility":"Public","body":"@description"}},{"html_id":"description=(description:String?)-instance-method","name":"description=","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String | ::Nil"}],"args_string":"(description : String?)","args_html":"(description : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String | ::Nil"}],"visibility":"Public","body":"@description = description"}},{"html_id":"exponential_histogram:ExponentialHistogram?-instance-method","name":"exponential_histogram","abstract":false,"def":{"name":"exponential_histogram","return_type":"ExponentialHistogram | ::Nil","visibility":"Public","body":"@exponential_histogram"}},{"html_id":"exponential_histogram=(exponential_histogram:ExponentialHistogram?)-instance-method","name":"exponential_histogram=","abstract":false,"args":[{"name":"exponential_histogram","external_name":"exponential_histogram","restriction":"ExponentialHistogram | ::Nil"}],"args_string":"(exponential_histogram : ExponentialHistogram?)","args_html":"(exponential_histogram : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/ExponentialHistogram.html\">ExponentialHistogram</a>?)","def":{"name":"exponential_histogram=","args":[{"name":"exponential_histogram","external_name":"exponential_histogram","restriction":"ExponentialHistogram | ::Nil"}],"visibility":"Public","body":"@exponential_histogram = exponential_histogram"}},{"html_id":"gauge:Gauge?-instance-method","name":"gauge","abstract":false,"def":{"name":"gauge","return_type":"Gauge | ::Nil","visibility":"Public","body":"@gauge"}},{"html_id":"gauge=(gauge:Gauge?)-instance-method","name":"gauge=","abstract":false,"args":[{"name":"gauge","external_name":"gauge","restriction":"Gauge | ::Nil"}],"args_string":"(gauge : Gauge?)","args_html":"(gauge : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/Gauge.html\">Gauge</a>?)","def":{"name":"gauge=","args":[{"name":"gauge","external_name":"gauge","restriction":"Gauge | ::Nil"}],"visibility":"Public","body":"@gauge = gauge"}},{"html_id":"histogram:Histogram?-instance-method","name":"histogram","abstract":false,"def":{"name":"histogram","return_type":"Histogram | ::Nil","visibility":"Public","body":"@histogram"}},{"html_id":"histogram=(histogram:Histogram?)-instance-method","name":"histogram=","abstract":false,"args":[{"name":"histogram","external_name":"histogram","restriction":"Histogram | ::Nil"}],"args_string":"(histogram : Histogram?)","args_html":"(histogram : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/Histogram.html\">Histogram</a>?)","def":{"name":"histogram=","args":[{"name":"histogram","external_name":"histogram","restriction":"Histogram | ::Nil"}],"visibility":"Public","body":"@histogram = histogram"}},{"html_id":"name:String?-instance-method","name":"name","abstract":false,"def":{"name":"name","return_type":"String | ::Nil","visibility":"Public","body":"@name"}},{"html_id":"name=(name:String?)-instance-method","name":"name=","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String | ::Nil"}],"args_string":"(name : String?)","args_html":"(name : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String | ::Nil"}],"visibility":"Public","body":"@name = name"}},{"html_id":"sum:Sum?-instance-method","name":"sum","abstract":false,"def":{"name":"sum","return_type":"Sum | ::Nil","visibility":"Public","body":"@sum"}},{"html_id":"sum=(sum:Sum?)-instance-method","name":"sum=","abstract":false,"args":[{"name":"sum","external_name":"sum","restriction":"Sum | ::Nil"}],"args_string":"(sum : Sum?)","args_html":"(sum : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/Sum.html\">Sum</a>?)","def":{"name":"sum=","args":[{"name":"sum","external_name":"sum","restriction":"Sum | ::Nil"}],"visibility":"Public","body":"@sum = sum"}},{"html_id":"summary:Summary?-instance-method","name":"summary","abstract":false,"def":{"name":"summary","return_type":"Summary | ::Nil","visibility":"Public","body":"@summary"}},{"html_id":"summary=(summary:Summary?)-instance-method","name":"summary=","abstract":false,"args":[{"name":"summary","external_name":"summary","restriction":"Summary | ::Nil"}],"args_string":"(summary : Summary?)","args_html":"(summary : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/Summary.html\">Summary</a>?)","def":{"name":"summary=","args":[{"name":"summary","external_name":"summary","restriction":"Summary | ::Nil"}],"visibility":"Public","body":"@summary = summary"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1042 = @name\n__temp_1043 = __temp_1042.is_a?(Enum) || (__temp_1042.is_a?(Array) && __temp_1042.first?.is_a?(Enum))\n__temp_1044 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_1043 ? 0 : 2)\nif !@name.nil?\n  buf.write_info(1, __temp_1044)\n  buf.write_string(@name.not_nil!)\nend\n__temp_1045 = @description\n__temp_1046 = __temp_1045.is_a?(Enum) || (__temp_1045.is_a?(Array) && __temp_1045.first?.is_a?(Enum))\n__temp_1047 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_1046 ? 0 : 2)\nif !@description.nil?\n  buf.write_info(2, __temp_1047)\n  buf.write_string(@description.not_nil!)\nend\n__temp_1048 = @unit\n__temp_1049 = __temp_1048.is_a?(Enum) || (__temp_1048.is_a?(Array) && __temp_1048.first?.is_a?(Enum))\n__temp_1050 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_1049 ? 0 : 2)\nif !@unit.nil?\n  buf.write_info(3, __temp_1050)\n  buf.write_string(@unit.not_nil!)\nend\n__temp_1051 = @gauge\n__temp_1052 = __temp_1051.is_a?(Enum) || (__temp_1051.is_a?(Array) && __temp_1051.first?.is_a?(Enum))\n__temp_1053 = ::Protobuf::WIRE_TYPES.fetch(Gauge, __temp_1052 ? 0 : 2)\nif !@gauge.nil?\n  buf.write_info(5, __temp_1053)\n  buf.write_message(@gauge.not_nil!)\nend\n__temp_1054 = @sum\n__temp_1055 = __temp_1054.is_a?(Enum) || (__temp_1054.is_a?(Array) && __temp_1054.first?.is_a?(Enum))\n__temp_1056 = ::Protobuf::WIRE_TYPES.fetch(Sum, __temp_1055 ? 0 : 2)\nif !@sum.nil?\n  buf.write_info(7, __temp_1056)\n  buf.write_message(@sum.not_nil!)\nend\n__temp_1057 = @histogram\n__temp_1058 = __temp_1057.is_a?(Enum) || (__temp_1057.is_a?(Array) && __temp_1057.first?.is_a?(Enum))\n__temp_1059 = ::Protobuf::WIRE_TYPES.fetch(Histogram, __temp_1058 ? 0 : 2)\nif !@histogram.nil?\n  buf.write_info(9, __temp_1059)\n  buf.write_message(@histogram.not_nil!)\nend\n__temp_1060 = @exponential_histogram\n__temp_1061 = __temp_1060.is_a?(Enum) || (__temp_1060.is_a?(Array) && __temp_1060.first?.is_a?(Enum))\n__temp_1062 = ::Protobuf::WIRE_TYPES.fetch(ExponentialHistogram, __temp_1061 ? 0 : 2)\nif !@exponential_histogram.nil?\n  buf.write_info(10, __temp_1062)\n  buf.write_message(@exponential_histogram.not_nil!)\nend\n__temp_1063 = @summary\n__temp_1064 = __temp_1063.is_a?(Enum) || (__temp_1063.is_a?(Array) && __temp_1063.first?.is_a?(Enum))\n__temp_1065 = ::Protobuf::WIRE_TYPES.fetch(Summary, __temp_1064 ? 0 : 2)\nif !@summary.nil?\n  buf.write_info(11, __temp_1065)\n  buf.write_message(@summary.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}},{"html_id":"unit:String?-instance-method","name":"unit","abstract":false,"def":{"name":"unit","return_type":"String | ::Nil","visibility":"Public","body":"@unit"}},{"html_id":"unit=(unit:String?)-instance-method","name":"unit=","abstract":false,"args":[{"name":"unit","external_name":"unit","restriction":"String | ::Nil"}],"args_string":"(unit : String?)","args_html":"(unit : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"unit=","args":[{"name":"unit","external_name":"unit","restriction":"String | ::Nil"}],"visibility":"Public","body":"@unit = unit"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/MetricsData","path":"OpenTelemetry/Proto/Metrics/V1/MetricsData.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::MetricsData","name":"MetricsData","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":21,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :resource_metrics, pb_type: ResourceMetrics, crystal_type: ResourceMetrics, cast_type: Array(ResourceMetrics)?, native: false, optional: true, repeated: true, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(resource_metrics:Array(ResourceMetrics)?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"resource_metrics","default_value":"nil","external_name":"resource_metrics","restriction":"Array(ResourceMetrics) | ::Nil"}],"args_string":"(resource_metrics : Array(ResourceMetrics)? = nil)","args_html":"(resource_metrics : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/ResourceMetrics.html\">ResourceMetrics</a>)? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"resource_metrics","default_value":"nil","external_name":"resource_metrics","restriction":"Array(ResourceMetrics) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(resource_metrics)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"resource_metrics\" == key\n  return self.resource_metrics\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"resource_metrics:Array(ResourceMetrics)?-instance-method","name":"resource_metrics","abstract":false,"def":{"name":"resource_metrics","return_type":"Array(ResourceMetrics) | ::Nil","visibility":"Public","body":"@resource_metrics"}},{"html_id":"resource_metrics=(resource_metrics:Array(ResourceMetrics)?)-instance-method","name":"resource_metrics=","abstract":false,"args":[{"name":"resource_metrics","external_name":"resource_metrics","restriction":"Array(ResourceMetrics) | ::Nil"}],"args_string":"(resource_metrics : Array(ResourceMetrics)?)","args_html":"(resource_metrics : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/ResourceMetrics.html\">ResourceMetrics</a>)?)","def":{"name":"resource_metrics=","args":[{"name":"resource_metrics","external_name":"resource_metrics","restriction":"Array(ResourceMetrics) | ::Nil"}],"visibility":"Public","body":"@resource_metrics = resource_metrics"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_943 = @resource_metrics\n__temp_944 = __temp_943.is_a?(Enum) || (__temp_943.is_a?(Array) && __temp_943.first?.is_a?(Enum))\n__temp_945 = ::Protobuf::WIRE_TYPES.fetch(ResourceMetrics, __temp_944 ? 0 : 2)\nif !@resource_metrics.nil?\n  @resource_metrics.not_nil!.each do |item|\n    buf.write_info(1, __temp_945)\n    buf.write_message(item)\n  end\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/NumberDataPoint","path":"OpenTelemetry/Proto/Metrics/V1/NumberDataPoint.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::NumberDataPoint","name":"NumberDataPoint","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":119,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{7 => {name: :attributes, pb_type: OpenTelemetry::Proto::Common::V1::KeyValue, crystal_type: OpenTelemetry::Proto::Common::V1::KeyValue, cast_type: Array(OpenTelemetry::Proto::Common::V1::KeyValue)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 2 => {name: :start_time_unix_nano, pb_type: :fixed64, crystal_type: UInt64, cast_type: UInt64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 3 => {name: :time_unix_nano, pb_type: :fixed64, crystal_type: UInt64, cast_type: UInt64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 4 => {name: :as_double, pb_type: :double, crystal_type: Float64, cast_type: Float64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 6 => {name: :as_int, pb_type: :sfixed64, crystal_type: Int64, cast_type: Int64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 5 => {name: :exemplars, pb_type: Exemplar, crystal_type: Exemplar, cast_type: Array(Exemplar)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 8 => {name: :flags, pb_type: :uint32, crystal_type: UInt32, cast_type: UInt32?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?=nil,start_time_unix_nano:UInt64?=nil,time_unix_nano:UInt64?=nil,as_double:Float64?=nil,as_int:Int64?=nil,exemplars:Array(Exemplar)?=nil,flags:UInt32?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"start_time_unix_nano","default_value":"nil","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"time_unix_nano","default_value":"nil","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"as_double","default_value":"nil","external_name":"as_double","restriction":"Float64 | ::Nil"},{"name":"as_int","default_value":"nil","external_name":"as_int","restriction":"Int64 | ::Nil"},{"name":"exemplars","default_value":"nil","external_name":"exemplars","restriction":"Array(Exemplar) | ::Nil"},{"name":"flags","default_value":"nil","external_name":"flags","restriction":"UInt32 | ::Nil"}],"args_string":"(attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)? = nil, start_time_unix_nano : UInt64? = nil, time_unix_nano : UInt64? = nil, as_double : Float64? = nil, as_int : Int64? = nil, exemplars : Array(Exemplar)? = nil, flags : UInt32? = nil)","args_html":"(attributes : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)? = <span class=\"n\">nil</span>, start_time_unix_nano : UInt64? = <span class=\"n\">nil</span>, time_unix_nano : UInt64? = <span class=\"n\">nil</span>, as_double : Float64? = <span class=\"n\">nil</span>, as_int : Int64? = <span class=\"n\">nil</span>, exemplars : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/Exemplar.html\">Exemplar</a>)? = <span class=\"n\">nil</span>, flags : UInt32? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"start_time_unix_nano","default_value":"nil","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"time_unix_nano","default_value":"nil","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"as_double","default_value":"nil","external_name":"as_double","restriction":"Float64 | ::Nil"},{"name":"as_int","default_value":"nil","external_name":"as_int","restriction":"Int64 | ::Nil"},{"name":"exemplars","default_value":"nil","external_name":"exemplars","restriction":"Array(Exemplar) | ::Nil"},{"name":"flags","default_value":"nil","external_name":"flags","restriction":"UInt32 | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(attributes, start_time_unix_nano, time_unix_nano, as_double, as_int, exemplars, flags)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"attributes\" == key\n  return self.attributes\nend\nif \"start_time_unix_nano\" == key\n  return self.start_time_unix_nano\nend\nif \"time_unix_nano\" == key\n  return self.time_unix_nano\nend\nif \"as_double\" == key\n  return self.as_double\nend\nif \"as_int\" == key\n  return self.as_int\nend\nif \"exemplars\" == key\n  return self.exemplars\nend\nif \"flags\" == key\n  return self.flags\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"as_double:Float64?-instance-method","name":"as_double","abstract":false,"def":{"name":"as_double","return_type":"Float64 | ::Nil","visibility":"Public","body":"@as_double"}},{"html_id":"as_double=(as_double:Float64?)-instance-method","name":"as_double=","abstract":false,"args":[{"name":"as_double","external_name":"as_double","restriction":"Float64 | ::Nil"}],"args_string":"(as_double : Float64?)","args_html":"(as_double : Float64?)","def":{"name":"as_double=","args":[{"name":"as_double","external_name":"as_double","restriction":"Float64 | ::Nil"}],"visibility":"Public","body":"@as_double = as_double"}},{"html_id":"as_int:Int64?-instance-method","name":"as_int","abstract":false,"def":{"name":"as_int","return_type":"Int64 | ::Nil","visibility":"Public","body":"@as_int"}},{"html_id":"as_int=(as_int:Int64?)-instance-method","name":"as_int=","abstract":false,"args":[{"name":"as_int","external_name":"as_int","restriction":"Int64 | ::Nil"}],"args_string":"(as_int : Int64?)","args_html":"(as_int : Int64?)","def":{"name":"as_int=","args":[{"name":"as_int","external_name":"as_int","restriction":"Int64 | ::Nil"}],"visibility":"Public","body":"@as_int = as_int"}},{"html_id":"attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?-instance-method","name":"attributes","abstract":false,"def":{"name":"attributes","return_type":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil","visibility":"Public","body":"@attributes"}},{"html_id":"attributes=(attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)-instance-method","name":"attributes=","abstract":false,"args":[{"name":"attributes","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"args_string":"(attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)","args_html":"(attributes : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)?)","def":{"name":"attributes=","args":[{"name":"attributes","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"visibility":"Public","body":"@attributes = attributes"}},{"html_id":"exemplars:Array(Exemplar)?-instance-method","name":"exemplars","abstract":false,"def":{"name":"exemplars","return_type":"Array(Exemplar) | ::Nil","visibility":"Public","body":"@exemplars"}},{"html_id":"exemplars=(exemplars:Array(Exemplar)?)-instance-method","name":"exemplars=","abstract":false,"args":[{"name":"exemplars","external_name":"exemplars","restriction":"Array(Exemplar) | ::Nil"}],"args_string":"(exemplars : Array(Exemplar)?)","args_html":"(exemplars : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/Exemplar.html\">Exemplar</a>)?)","def":{"name":"exemplars=","args":[{"name":"exemplars","external_name":"exemplars","restriction":"Array(Exemplar) | ::Nil"}],"visibility":"Public","body":"@exemplars = exemplars"}},{"html_id":"flags:UInt32?-instance-method","name":"flags","abstract":false,"def":{"name":"flags","return_type":"UInt32 | ::Nil","visibility":"Public","body":"@flags"}},{"html_id":"flags=(flags:UInt32?)-instance-method","name":"flags=","abstract":false,"args":[{"name":"flags","external_name":"flags","restriction":"UInt32 | ::Nil"}],"args_string":"(flags : UInt32?)","args_html":"(flags : UInt32?)","def":{"name":"flags=","args":[{"name":"flags","external_name":"flags","restriction":"UInt32 | ::Nil"}],"visibility":"Public","body":"@flags = flags"}},{"html_id":"start_time_unix_nano:UInt64?-instance-method","name":"start_time_unix_nano","abstract":false,"def":{"name":"start_time_unix_nano","return_type":"UInt64 | ::Nil","visibility":"Public","body":"@start_time_unix_nano"}},{"html_id":"start_time_unix_nano=(start_time_unix_nano:UInt64?)-instance-method","name":"start_time_unix_nano=","abstract":false,"args":[{"name":"start_time_unix_nano","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"}],"args_string":"(start_time_unix_nano : UInt64?)","args_html":"(start_time_unix_nano : UInt64?)","def":{"name":"start_time_unix_nano=","args":[{"name":"start_time_unix_nano","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"}],"visibility":"Public","body":"@start_time_unix_nano = start_time_unix_nano"}},{"html_id":"time_unix_nano:UInt64?-instance-method","name":"time_unix_nano","abstract":false,"def":{"name":"time_unix_nano","return_type":"UInt64 | ::Nil","visibility":"Public","body":"@time_unix_nano"}},{"html_id":"time_unix_nano=(time_unix_nano:UInt64?)-instance-method","name":"time_unix_nano=","abstract":false,"args":[{"name":"time_unix_nano","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"}],"args_string":"(time_unix_nano : UInt64?)","args_html":"(time_unix_nano : UInt64?)","def":{"name":"time_unix_nano=","args":[{"name":"time_unix_nano","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"}],"visibility":"Public","body":"@time_unix_nano = time_unix_nano"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1151 = @attributes\n__temp_1152 = __temp_1151.is_a?(Enum) || (__temp_1151.is_a?(Array) && __temp_1151.first?.is_a?(Enum))\n__temp_1153 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Common::V1::KeyValue, __temp_1152 ? 0 : 2)\nif !@attributes.nil?\n  @attributes.not_nil!.each do |item|\n    buf.write_info(7, __temp_1153)\n    buf.write_message(item)\n  end\nend\n__temp_1154 = @start_time_unix_nano\n__temp_1155 = __temp_1154.is_a?(Enum) || (__temp_1154.is_a?(Array) && __temp_1154.first?.is_a?(Enum))\n__temp_1156 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_1155 ? 0 : 2)\nif !@start_time_unix_nano.nil?\n  buf.write_info(2, __temp_1156)\n  buf.write_fixed64(@start_time_unix_nano.not_nil!)\nend\n__temp_1157 = @time_unix_nano\n__temp_1158 = __temp_1157.is_a?(Enum) || (__temp_1157.is_a?(Array) && __temp_1157.first?.is_a?(Enum))\n__temp_1159 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_1158 ? 0 : 2)\nif !@time_unix_nano.nil?\n  buf.write_info(3, __temp_1159)\n  buf.write_fixed64(@time_unix_nano.not_nil!)\nend\n__temp_1160 = @as_double\n__temp_1161 = __temp_1160.is_a?(Enum) || (__temp_1160.is_a?(Array) && __temp_1160.first?.is_a?(Enum))\n__temp_1162 = ::Protobuf::WIRE_TYPES.fetch(:double, __temp_1161 ? 0 : 2)\nif !@as_double.nil?\n  buf.write_info(4, __temp_1162)\n  buf.write_double(@as_double.not_nil!)\nend\n__temp_1163 = @as_int\n__temp_1164 = __temp_1163.is_a?(Enum) || (__temp_1163.is_a?(Array) && __temp_1163.first?.is_a?(Enum))\n__temp_1165 = ::Protobuf::WIRE_TYPES.fetch(:sfixed64, __temp_1164 ? 0 : 2)\nif !@as_int.nil?\n  buf.write_info(6, __temp_1165)\n  buf.write_sfixed64(@as_int.not_nil!)\nend\n__temp_1166 = @exemplars\n__temp_1167 = __temp_1166.is_a?(Enum) || (__temp_1166.is_a?(Array) && __temp_1166.first?.is_a?(Enum))\n__temp_1168 = ::Protobuf::WIRE_TYPES.fetch(Exemplar, __temp_1167 ? 0 : 2)\nif !@exemplars.nil?\n  @exemplars.not_nil!.each do |item|\n    buf.write_info(5, __temp_1168)\n    buf.write_message(item)\n  end\nend\n__temp_1169 = @flags\n__temp_1170 = __temp_1169.is_a?(Enum) || (__temp_1169.is_a?(Array) && __temp_1169.first?.is_a?(Enum))\n__temp_1171 = ::Protobuf::WIRE_TYPES.fetch(:uint32, __temp_1170 ? 0 : 2)\nif !@flags.nil?\n  buf.write_info(8, __temp_1171)\n  buf.write_uint32(@flags.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/ResourceMetrics","path":"OpenTelemetry/Proto/Metrics/V1/ResourceMetrics.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::ResourceMetrics","name":"ResourceMetrics","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":29,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :resource, pb_type: OpenTelemetry::Proto::Resource::V1::Resource, crystal_type: OpenTelemetry::Proto::Resource::V1::Resource, cast_type: OpenTelemetry::Proto::Resource::V1::Resource?, native: false, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :scope_metrics, pb_type: ScopeMetrics, crystal_type: ScopeMetrics, cast_type: Array(ScopeMetrics)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 1000 => {name: :instrumentation_library_metrics, pb_type: InstrumentationLibraryMetrics, crystal_type: InstrumentationLibraryMetrics, cast_type: Array(InstrumentationLibraryMetrics)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 3 => {name: :schema_url, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(resource:OpenTelemetry::Proto::Resource::V1::Resource?=nil,scope_metrics:Array(ScopeMetrics)?=nil,instrumentation_library_metrics:Array(InstrumentationLibraryMetrics)?=nil,schema_url:String?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"resource","default_value":"nil","external_name":"resource","restriction":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil"},{"name":"scope_metrics","default_value":"nil","external_name":"scope_metrics","restriction":"Array(ScopeMetrics) | ::Nil"},{"name":"instrumentation_library_metrics","default_value":"nil","external_name":"instrumentation_library_metrics","restriction":"Array(InstrumentationLibraryMetrics) | ::Nil"},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":"String | ::Nil"}],"args_string":"(resource : OpenTelemetry::Proto::Resource::V1::Resource? = nil, scope_metrics : Array(ScopeMetrics)? = nil, instrumentation_library_metrics : Array(InstrumentationLibraryMetrics)? = nil, schema_url : String? = nil)","args_html":"(resource : <a href=\"../../../../OpenTelemetry/Proto/Resource/V1/Resource.html\">OpenTelemetry::Proto::Resource::V1::Resource</a>? = <span class=\"n\">nil</span>, scope_metrics : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/ScopeMetrics.html\">ScopeMetrics</a>)? = <span class=\"n\">nil</span>, instrumentation_library_metrics : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/InstrumentationLibraryMetrics.html\">InstrumentationLibraryMetrics</a>)? = <span class=\"n\">nil</span>, schema_url : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"resource","default_value":"nil","external_name":"resource","restriction":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil"},{"name":"scope_metrics","default_value":"nil","external_name":"scope_metrics","restriction":"Array(ScopeMetrics) | ::Nil"},{"name":"instrumentation_library_metrics","default_value":"nil","external_name":"instrumentation_library_metrics","restriction":"Array(InstrumentationLibraryMetrics) | ::Nil"},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(resource, scope_metrics, instrumentation_library_metrics, schema_url)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"resource\" == key\n  return self.resource\nend\nif \"scope_metrics\" == key\n  return self.scope_metrics\nend\nif \"instrumentation_library_metrics\" == key\n  return self.instrumentation_library_metrics\nend\nif \"schema_url\" == key\n  return self.schema_url\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"instrumentation_library_metrics:Array(InstrumentationLibraryMetrics)?-instance-method","name":"instrumentation_library_metrics","abstract":false,"def":{"name":"instrumentation_library_metrics","return_type":"Array(InstrumentationLibraryMetrics) | ::Nil","visibility":"Public","body":"@instrumentation_library_metrics"}},{"html_id":"instrumentation_library_metrics=(instrumentation_library_metrics:Array(InstrumentationLibraryMetrics)?)-instance-method","name":"instrumentation_library_metrics=","abstract":false,"args":[{"name":"instrumentation_library_metrics","external_name":"instrumentation_library_metrics","restriction":"Array(InstrumentationLibraryMetrics) | ::Nil"}],"args_string":"(instrumentation_library_metrics : Array(InstrumentationLibraryMetrics)?)","args_html":"(instrumentation_library_metrics : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/InstrumentationLibraryMetrics.html\">InstrumentationLibraryMetrics</a>)?)","def":{"name":"instrumentation_library_metrics=","args":[{"name":"instrumentation_library_metrics","external_name":"instrumentation_library_metrics","restriction":"Array(InstrumentationLibraryMetrics) | ::Nil"}],"visibility":"Public","body":"@instrumentation_library_metrics = instrumentation_library_metrics"}},{"html_id":"resource:OpenTelemetry::Proto::Resource::V1::Resource?-instance-method","name":"resource","abstract":false,"def":{"name":"resource","return_type":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil","visibility":"Public","body":"@resource"}},{"html_id":"resource=(resource:OpenTelemetry::Proto::Resource::V1::Resource?)-instance-method","name":"resource=","abstract":false,"args":[{"name":"resource","external_name":"resource","restriction":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil"}],"args_string":"(resource : OpenTelemetry::Proto::Resource::V1::Resource?)","args_html":"(resource : <a href=\"../../../../OpenTelemetry/Proto/Resource/V1/Resource.html\">OpenTelemetry::Proto::Resource::V1::Resource</a>?)","def":{"name":"resource=","args":[{"name":"resource","external_name":"resource","restriction":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil"}],"visibility":"Public","body":"@resource = resource"}},{"html_id":"schema_url:String?-instance-method","name":"schema_url","abstract":false,"def":{"name":"schema_url","return_type":"String | ::Nil","visibility":"Public","body":"@schema_url"}},{"html_id":"schema_url=(schema_url:String?)-instance-method","name":"schema_url=","abstract":false,"args":[{"name":"schema_url","external_name":"schema_url","restriction":"String | ::Nil"}],"args_string":"(schema_url : String?)","args_html":"(schema_url : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"schema_url=","args":[{"name":"schema_url","external_name":"schema_url","restriction":"String | ::Nil"}],"visibility":"Public","body":"@schema_url = schema_url"}},{"html_id":"scope_metrics:Array(ScopeMetrics)?-instance-method","name":"scope_metrics","abstract":false,"def":{"name":"scope_metrics","return_type":"Array(ScopeMetrics) | ::Nil","visibility":"Public","body":"@scope_metrics"}},{"html_id":"scope_metrics=(scope_metrics:Array(ScopeMetrics)?)-instance-method","name":"scope_metrics=","abstract":false,"args":[{"name":"scope_metrics","external_name":"scope_metrics","restriction":"Array(ScopeMetrics) | ::Nil"}],"args_string":"(scope_metrics : Array(ScopeMetrics)?)","args_html":"(scope_metrics : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/ScopeMetrics.html\">ScopeMetrics</a>)?)","def":{"name":"scope_metrics=","args":[{"name":"scope_metrics","external_name":"scope_metrics","restriction":"Array(ScopeMetrics) | ::Nil"}],"visibility":"Public","body":"@scope_metrics = scope_metrics"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_961 = @resource\n__temp_962 = __temp_961.is_a?(Enum) || (__temp_961.is_a?(Array) && __temp_961.first?.is_a?(Enum))\n__temp_963 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Resource::V1::Resource, __temp_962 ? 0 : 2)\nif !@resource.nil?\n  buf.write_info(1, __temp_963)\n  buf.write_message(@resource.not_nil!)\nend\n__temp_964 = @scope_metrics\n__temp_965 = __temp_964.is_a?(Enum) || (__temp_964.is_a?(Array) && __temp_964.first?.is_a?(Enum))\n__temp_966 = ::Protobuf::WIRE_TYPES.fetch(ScopeMetrics, __temp_965 ? 0 : 2)\nif !@scope_metrics.nil?\n  @scope_metrics.not_nil!.each do |item|\n    buf.write_info(2, __temp_966)\n    buf.write_message(item)\n  end\nend\n__temp_967 = @instrumentation_library_metrics\n__temp_968 = __temp_967.is_a?(Enum) || (__temp_967.is_a?(Array) && __temp_967.first?.is_a?(Enum))\n__temp_969 = ::Protobuf::WIRE_TYPES.fetch(InstrumentationLibraryMetrics, __temp_968 ? 0 : 2)\nif !@instrumentation_library_metrics.nil?\n  @instrumentation_library_metrics.not_nil!.each do |item|\n    buf.write_info(1000, __temp_969)\n    buf.write_message(item)\n  end\nend\n__temp_970 = @schema_url\n__temp_971 = __temp_970.is_a?(Enum) || (__temp_970.is_a?(Array) && __temp_970.first?.is_a?(Enum))\n__temp_972 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_971 ? 0 : 2)\nif !@schema_url.nil?\n  buf.write_info(3, __temp_972)\n  buf.write_string(@schema_url.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/ScopeMetrics","path":"OpenTelemetry/Proto/Metrics/V1/ScopeMetrics.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::ScopeMetrics","name":"ScopeMetrics","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":40,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :scope, pb_type: OpenTelemetry::Proto::Common::V1::InstrumentationScope, crystal_type: OpenTelemetry::Proto::Common::V1::InstrumentationScope, cast_type: OpenTelemetry::Proto::Common::V1::InstrumentationScope?, native: false, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :metrics, pb_type: Metric, crystal_type: Metric, cast_type: Array(Metric)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 3 => {name: :schema_url, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(scope:OpenTelemetry::Proto::Common::V1::InstrumentationScope?=nil,metrics:Array(Metric)?=nil,schema_url:String?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"scope","default_value":"nil","external_name":"scope","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationScope | ::Nil"},{"name":"metrics","default_value":"nil","external_name":"metrics","restriction":"Array(Metric) | ::Nil"},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":"String | ::Nil"}],"args_string":"(scope : OpenTelemetry::Proto::Common::V1::InstrumentationScope? = nil, metrics : Array(Metric)? = nil, schema_url : String? = nil)","args_html":"(scope : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/InstrumentationScope.html\">OpenTelemetry::Proto::Common::V1::InstrumentationScope</a>? = <span class=\"n\">nil</span>, metrics : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/Metric.html\">Metric</a>)? = <span class=\"n\">nil</span>, schema_url : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"scope","default_value":"nil","external_name":"scope","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationScope | ::Nil"},{"name":"metrics","default_value":"nil","external_name":"metrics","restriction":"Array(Metric) | ::Nil"},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(scope, metrics, schema_url)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"scope\" == key\n  return self.scope\nend\nif \"metrics\" == key\n  return self.metrics\nend\nif \"schema_url\" == key\n  return self.schema_url\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"metrics:Array(Metric)?-instance-method","name":"metrics","abstract":false,"def":{"name":"metrics","return_type":"Array(Metric) | ::Nil","visibility":"Public","body":"@metrics"}},{"html_id":"metrics=(metrics:Array(Metric)?)-instance-method","name":"metrics=","abstract":false,"args":[{"name":"metrics","external_name":"metrics","restriction":"Array(Metric) | ::Nil"}],"args_string":"(metrics : Array(Metric)?)","args_html":"(metrics : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/Metric.html\">Metric</a>)?)","def":{"name":"metrics=","args":[{"name":"metrics","external_name":"metrics","restriction":"Array(Metric) | ::Nil"}],"visibility":"Public","body":"@metrics = metrics"}},{"html_id":"schema_url:String?-instance-method","name":"schema_url","abstract":false,"def":{"name":"schema_url","return_type":"String | ::Nil","visibility":"Public","body":"@schema_url"}},{"html_id":"schema_url=(schema_url:String?)-instance-method","name":"schema_url=","abstract":false,"args":[{"name":"schema_url","external_name":"schema_url","restriction":"String | ::Nil"}],"args_string":"(schema_url : String?)","args_html":"(schema_url : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"schema_url=","args":[{"name":"schema_url","external_name":"schema_url","restriction":"String | ::Nil"}],"visibility":"Public","body":"@schema_url = schema_url"}},{"html_id":"scope:OpenTelemetry::Proto::Common::V1::InstrumentationScope?-instance-method","name":"scope","abstract":false,"def":{"name":"scope","return_type":"OpenTelemetry::Proto::Common::V1::InstrumentationScope | ::Nil","visibility":"Public","body":"@scope"}},{"html_id":"scope=(scope:OpenTelemetry::Proto::Common::V1::InstrumentationScope?)-instance-method","name":"scope=","abstract":false,"args":[{"name":"scope","external_name":"scope","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationScope | ::Nil"}],"args_string":"(scope : OpenTelemetry::Proto::Common::V1::InstrumentationScope?)","args_html":"(scope : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/InstrumentationScope.html\">OpenTelemetry::Proto::Common::V1::InstrumentationScope</a>?)","def":{"name":"scope=","args":[{"name":"scope","external_name":"scope","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationScope | ::Nil"}],"visibility":"Public","body":"@scope = scope"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_984 = @scope\n__temp_985 = __temp_984.is_a?(Enum) || (__temp_984.is_a?(Array) && __temp_984.first?.is_a?(Enum))\n__temp_986 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Common::V1::InstrumentationScope, __temp_985 ? 0 : 2)\nif !@scope.nil?\n  buf.write_info(1, __temp_986)\n  buf.write_message(@scope.not_nil!)\nend\n__temp_987 = @metrics\n__temp_988 = __temp_987.is_a?(Enum) || (__temp_987.is_a?(Array) && __temp_987.first?.is_a?(Enum))\n__temp_989 = ::Protobuf::WIRE_TYPES.fetch(Metric, __temp_988 ? 0 : 2)\nif !@metrics.nil?\n  @metrics.not_nil!.each do |item|\n    buf.write_info(2, __temp_989)\n    buf.write_message(item)\n  end\nend\n__temp_990 = @schema_url\n__temp_991 = __temp_990.is_a?(Enum) || (__temp_990.is_a?(Array) && __temp_990.first?.is_a?(Enum))\n__temp_992 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_991 ? 0 : 2)\nif !@schema_url.nil?\n  buf.write_info(3, __temp_992)\n  buf.write_string(@schema_url.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/Sum","path":"OpenTelemetry/Proto/Metrics/V1/Sum.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::Sum","name":"Sum","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":83,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :data_points, pb_type: NumberDataPoint, crystal_type: NumberDataPoint, cast_type: Array(NumberDataPoint)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 2 => {name: :aggregation_temporality, pb_type: AggregationTemporality, crystal_type: AggregationTemporality, cast_type: AggregationTemporality?, native: false, optional: true, repeated: false, default: nil, packed: false}, 3 => {name: :is_monotonic, pb_type: :bool, crystal_type: Bool, cast_type: Bool?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(data_points:Array(NumberDataPoint)?=nil,aggregation_temporality:AggregationTemporality?=nil,is_monotonic:Bool?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"data_points","default_value":"nil","external_name":"data_points","restriction":"Array(NumberDataPoint) | ::Nil"},{"name":"aggregation_temporality","default_value":"nil","external_name":"aggregation_temporality","restriction":"AggregationTemporality | ::Nil"},{"name":"is_monotonic","default_value":"nil","external_name":"is_monotonic","restriction":"Bool | ::Nil"}],"args_string":"(data_points : Array(NumberDataPoint)? = nil, aggregation_temporality : AggregationTemporality? = nil, is_monotonic : Bool? = nil)","args_html":"(data_points : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/NumberDataPoint.html\">NumberDataPoint</a>)? = <span class=\"n\">nil</span>, aggregation_temporality : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/AggregationTemporality.html\">AggregationTemporality</a>? = <span class=\"n\">nil</span>, is_monotonic : Bool? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"data_points","default_value":"nil","external_name":"data_points","restriction":"Array(NumberDataPoint) | ::Nil"},{"name":"aggregation_temporality","default_value":"nil","external_name":"aggregation_temporality","restriction":"AggregationTemporality | ::Nil"},{"name":"is_monotonic","default_value":"nil","external_name":"is_monotonic","restriction":"Bool | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(data_points, aggregation_temporality, is_monotonic)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"data_points\" == key\n  return self.data_points\nend\nif \"aggregation_temporality\" == key\n  return self.aggregation_temporality\nend\nif \"is_monotonic\" == key\n  return self.is_monotonic\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"aggregation_temporality:AggregationTemporality?-instance-method","name":"aggregation_temporality","abstract":false,"def":{"name":"aggregation_temporality","return_type":"AggregationTemporality | ::Nil","visibility":"Public","body":"@aggregation_temporality"}},{"html_id":"aggregation_temporality=(aggregation_temporality:AggregationTemporality?)-instance-method","name":"aggregation_temporality=","abstract":false,"args":[{"name":"aggregation_temporality","external_name":"aggregation_temporality","restriction":"AggregationTemporality | ::Nil"}],"args_string":"(aggregation_temporality : AggregationTemporality?)","args_html":"(aggregation_temporality : <a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/AggregationTemporality.html\">AggregationTemporality</a>?)","def":{"name":"aggregation_temporality=","args":[{"name":"aggregation_temporality","external_name":"aggregation_temporality","restriction":"AggregationTemporality | ::Nil"}],"visibility":"Public","body":"@aggregation_temporality = aggregation_temporality"}},{"html_id":"data_points:Array(NumberDataPoint)?-instance-method","name":"data_points","abstract":false,"def":{"name":"data_points","return_type":"Array(NumberDataPoint) | ::Nil","visibility":"Public","body":"@data_points"}},{"html_id":"data_points=(data_points:Array(NumberDataPoint)?)-instance-method","name":"data_points=","abstract":false,"args":[{"name":"data_points","external_name":"data_points","restriction":"Array(NumberDataPoint) | ::Nil"}],"args_string":"(data_points : Array(NumberDataPoint)?)","args_html":"(data_points : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/NumberDataPoint.html\">NumberDataPoint</a>)?)","def":{"name":"data_points=","args":[{"name":"data_points","external_name":"data_points","restriction":"Array(NumberDataPoint) | ::Nil"}],"visibility":"Public","body":"@data_points = data_points"}},{"html_id":"is_monotonic:Bool?-instance-method","name":"is_monotonic","abstract":false,"def":{"name":"is_monotonic","return_type":"Bool | ::Nil","visibility":"Public","body":"@is_monotonic"}},{"html_id":"is_monotonic=(is_monotonic:Bool?)-instance-method","name":"is_monotonic=","abstract":false,"args":[{"name":"is_monotonic","external_name":"is_monotonic","restriction":"Bool | ::Nil"}],"args_string":"(is_monotonic : Bool?)","args_html":"(is_monotonic : Bool?)","def":{"name":"is_monotonic=","args":[{"name":"is_monotonic","external_name":"is_monotonic","restriction":"Bool | ::Nil"}],"visibility":"Public","body":"@is_monotonic = is_monotonic"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1084 = @data_points\n__temp_1085 = __temp_1084.is_a?(Enum) || (__temp_1084.is_a?(Array) && __temp_1084.first?.is_a?(Enum))\n__temp_1086 = ::Protobuf::WIRE_TYPES.fetch(NumberDataPoint, __temp_1085 ? 0 : 2)\nif !@data_points.nil?\n  @data_points.not_nil!.each do |item|\n    buf.write_info(1, __temp_1086)\n    buf.write_message(item)\n  end\nend\n__temp_1087 = @aggregation_temporality\n__temp_1088 = __temp_1087.is_a?(Enum) || (__temp_1087.is_a?(Array) && __temp_1087.first?.is_a?(Enum))\n__temp_1089 = ::Protobuf::WIRE_TYPES.fetch(AggregationTemporality, __temp_1088 ? 0 : 2)\nif !@aggregation_temporality.nil?\n  buf.write_info(2, __temp_1089)\n  buf.write_message(@aggregation_temporality.not_nil!)\nend\n__temp_1090 = @is_monotonic\n__temp_1091 = __temp_1090.is_a?(Enum) || (__temp_1090.is_a?(Array) && __temp_1090.first?.is_a?(Enum))\n__temp_1092 = ::Protobuf::WIRE_TYPES.fetch(:bool, __temp_1091 ? 0 : 2)\nif !@is_monotonic.nil?\n  buf.write_info(3, __temp_1092)\n  buf.write_bool(@is_monotonic.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/Summary","path":"OpenTelemetry/Proto/Metrics/V1/Summary.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::Summary","name":"Summary","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":111,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :data_points, pb_type: SummaryDataPoint, crystal_type: SummaryDataPoint, cast_type: Array(SummaryDataPoint)?, native: false, optional: true, repeated: true, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(data_points:Array(SummaryDataPoint)?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"data_points","default_value":"nil","external_name":"data_points","restriction":"Array(SummaryDataPoint) | ::Nil"}],"args_string":"(data_points : Array(SummaryDataPoint)? = nil)","args_html":"(data_points : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/SummaryDataPoint.html\">SummaryDataPoint</a>)? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"data_points","default_value":"nil","external_name":"data_points","restriction":"Array(SummaryDataPoint) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(data_points)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"data_points\" == key\n  return self.data_points\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"data_points:Array(SummaryDataPoint)?-instance-method","name":"data_points","abstract":false,"def":{"name":"data_points","return_type":"Array(SummaryDataPoint) | ::Nil","visibility":"Public","body":"@data_points"}},{"html_id":"data_points=(data_points:Array(SummaryDataPoint)?)-instance-method","name":"data_points=","abstract":false,"args":[{"name":"data_points","external_name":"data_points","restriction":"Array(SummaryDataPoint) | ::Nil"}],"args_string":"(data_points : Array(SummaryDataPoint)?)","args_html":"(data_points : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/SummaryDataPoint.html\">SummaryDataPoint</a>)?)","def":{"name":"data_points=","args":[{"name":"data_points","external_name":"data_points","restriction":"Array(SummaryDataPoint) | ::Nil"}],"visibility":"Public","body":"@data_points = data_points"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1125 = @data_points\n__temp_1126 = __temp_1125.is_a?(Enum) || (__temp_1125.is_a?(Array) && __temp_1125.first?.is_a?(Enum))\n__temp_1127 = ::Protobuf::WIRE_TYPES.fetch(SummaryDataPoint, __temp_1126 ? 0 : 2)\nif !@data_points.nil?\n  @data_points.not_nil!.each do |item|\n    buf.write_info(1, __temp_1127)\n    buf.write_message(item)\n  end\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/SummaryDataPoint","path":"OpenTelemetry/Proto/Metrics/V1/SummaryDataPoint.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::SummaryDataPoint","name":"SummaryDataPoint","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":180,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{7 => {name: :attributes, pb_type: OpenTelemetry::Proto::Common::V1::KeyValue, crystal_type: OpenTelemetry::Proto::Common::V1::KeyValue, cast_type: Array(OpenTelemetry::Proto::Common::V1::KeyValue)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 2 => {name: :start_time_unix_nano, pb_type: :fixed64, crystal_type: UInt64, cast_type: UInt64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 3 => {name: :time_unix_nano, pb_type: :fixed64, crystal_type: UInt64, cast_type: UInt64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 4 => {name: :count, pb_type: :fixed64, crystal_type: UInt64, cast_type: UInt64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 5 => {name: :sum, pb_type: :double, crystal_type: Float64, cast_type: Float64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 6 => {name: :quantile_values, pb_type: SummaryDataPoint::ValueAtQuantile, crystal_type: SummaryDataPoint::ValueAtQuantile, cast_type: Array(SummaryDataPoint::ValueAtQuantile)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 8 => {name: :flags, pb_type: :uint32, crystal_type: UInt32, cast_type: UInt32?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1","kind":"module","full_name":"OpenTelemetry::Proto::Metrics::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?=nil,start_time_unix_nano:UInt64?=nil,time_unix_nano:UInt64?=nil,count:UInt64?=nil,sum:Float64?=nil,quantile_values:Array(SummaryDataPoint::ValueAtQuantile)?=nil,flags:UInt32?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"start_time_unix_nano","default_value":"nil","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"time_unix_nano","default_value":"nil","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"count","default_value":"nil","external_name":"count","restriction":"UInt64 | ::Nil"},{"name":"sum","default_value":"nil","external_name":"sum","restriction":"Float64 | ::Nil"},{"name":"quantile_values","default_value":"nil","external_name":"quantile_values","restriction":"Array(SummaryDataPoint::ValueAtQuantile) | ::Nil"},{"name":"flags","default_value":"nil","external_name":"flags","restriction":"UInt32 | ::Nil"}],"args_string":"(attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)? = nil, start_time_unix_nano : UInt64? = nil, time_unix_nano : UInt64? = nil, count : UInt64? = nil, sum : Float64? = nil, quantile_values : Array(SummaryDataPoint::ValueAtQuantile)? = nil, flags : UInt32? = nil)","args_html":"(attributes : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)? = <span class=\"n\">nil</span>, start_time_unix_nano : UInt64? = <span class=\"n\">nil</span>, time_unix_nano : UInt64? = <span class=\"n\">nil</span>, count : UInt64? = <span class=\"n\">nil</span>, sum : Float64? = <span class=\"n\">nil</span>, quantile_values : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/SummaryDataPoint/ValueAtQuantile.html\">SummaryDataPoint::ValueAtQuantile</a>)? = <span class=\"n\">nil</span>, flags : UInt32? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"start_time_unix_nano","default_value":"nil","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"time_unix_nano","default_value":"nil","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"count","default_value":"nil","external_name":"count","restriction":"UInt64 | ::Nil"},{"name":"sum","default_value":"nil","external_name":"sum","restriction":"Float64 | ::Nil"},{"name":"quantile_values","default_value":"nil","external_name":"quantile_values","restriction":"Array(SummaryDataPoint::ValueAtQuantile) | ::Nil"},{"name":"flags","default_value":"nil","external_name":"flags","restriction":"UInt32 | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(attributes, start_time_unix_nano, time_unix_nano, count, sum, quantile_values, flags)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"attributes\" == key\n  return self.attributes\nend\nif \"start_time_unix_nano\" == key\n  return self.start_time_unix_nano\nend\nif \"time_unix_nano\" == key\n  return self.time_unix_nano\nend\nif \"count\" == key\n  return self.count\nend\nif \"sum\" == key\n  return self.sum\nend\nif \"quantile_values\" == key\n  return self.quantile_values\nend\nif \"flags\" == key\n  return self.flags\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?-instance-method","name":"attributes","abstract":false,"def":{"name":"attributes","return_type":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil","visibility":"Public","body":"@attributes"}},{"html_id":"attributes=(attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)-instance-method","name":"attributes=","abstract":false,"args":[{"name":"attributes","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"args_string":"(attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)","args_html":"(attributes : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)?)","def":{"name":"attributes=","args":[{"name":"attributes","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"visibility":"Public","body":"@attributes = attributes"}},{"html_id":"count:UInt64?-instance-method","name":"count","abstract":false,"def":{"name":"count","return_type":"UInt64 | ::Nil","visibility":"Public","body":"@count"}},{"html_id":"count=(count:UInt64?)-instance-method","name":"count=","abstract":false,"args":[{"name":"count","external_name":"count","restriction":"UInt64 | ::Nil"}],"args_string":"(count : UInt64?)","args_html":"(count : UInt64?)","def":{"name":"count=","args":[{"name":"count","external_name":"count","restriction":"UInt64 | ::Nil"}],"visibility":"Public","body":"@count = count"}},{"html_id":"flags:UInt32?-instance-method","name":"flags","abstract":false,"def":{"name":"flags","return_type":"UInt32 | ::Nil","visibility":"Public","body":"@flags"}},{"html_id":"flags=(flags:UInt32?)-instance-method","name":"flags=","abstract":false,"args":[{"name":"flags","external_name":"flags","restriction":"UInt32 | ::Nil"}],"args_string":"(flags : UInt32?)","args_html":"(flags : UInt32?)","def":{"name":"flags=","args":[{"name":"flags","external_name":"flags","restriction":"UInt32 | ::Nil"}],"visibility":"Public","body":"@flags = flags"}},{"html_id":"quantile_values:Array(SummaryDataPoint::ValueAtQuantile)?-instance-method","name":"quantile_values","abstract":false,"def":{"name":"quantile_values","return_type":"Array(SummaryDataPoint::ValueAtQuantile) | ::Nil","visibility":"Public","body":"@quantile_values"}},{"html_id":"quantile_values=(quantile_values:Array(SummaryDataPoint::ValueAtQuantile)?)-instance-method","name":"quantile_values=","abstract":false,"args":[{"name":"quantile_values","external_name":"quantile_values","restriction":"Array(SummaryDataPoint::ValueAtQuantile) | ::Nil"}],"args_string":"(quantile_values : Array(SummaryDataPoint::ValueAtQuantile)?)","args_html":"(quantile_values : Array(<a href=\"../../../../OpenTelemetry/Proto/Metrics/V1/SummaryDataPoint/ValueAtQuantile.html\">SummaryDataPoint::ValueAtQuantile</a>)?)","def":{"name":"quantile_values=","args":[{"name":"quantile_values","external_name":"quantile_values","restriction":"Array(SummaryDataPoint::ValueAtQuantile) | ::Nil"}],"visibility":"Public","body":"@quantile_values = quantile_values"}},{"html_id":"start_time_unix_nano:UInt64?-instance-method","name":"start_time_unix_nano","abstract":false,"def":{"name":"start_time_unix_nano","return_type":"UInt64 | ::Nil","visibility":"Public","body":"@start_time_unix_nano"}},{"html_id":"start_time_unix_nano=(start_time_unix_nano:UInt64?)-instance-method","name":"start_time_unix_nano=","abstract":false,"args":[{"name":"start_time_unix_nano","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"}],"args_string":"(start_time_unix_nano : UInt64?)","args_html":"(start_time_unix_nano : UInt64?)","def":{"name":"start_time_unix_nano=","args":[{"name":"start_time_unix_nano","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"}],"visibility":"Public","body":"@start_time_unix_nano = start_time_unix_nano"}},{"html_id":"sum:Float64?-instance-method","name":"sum","abstract":false,"def":{"name":"sum","return_type":"Float64 | ::Nil","visibility":"Public","body":"@sum"}},{"html_id":"sum=(sum:Float64?)-instance-method","name":"sum=","abstract":false,"args":[{"name":"sum","external_name":"sum","restriction":"Float64 | ::Nil"}],"args_string":"(sum : Float64?)","args_html":"(sum : Float64?)","def":{"name":"sum=","args":[{"name":"sum","external_name":"sum","restriction":"Float64 | ::Nil"}],"visibility":"Public","body":"@sum = sum"}},{"html_id":"time_unix_nano:UInt64?-instance-method","name":"time_unix_nano","abstract":false,"def":{"name":"time_unix_nano","return_type":"UInt64 | ::Nil","visibility":"Public","body":"@time_unix_nano"}},{"html_id":"time_unix_nano=(time_unix_nano:UInt64?)-instance-method","name":"time_unix_nano=","abstract":false,"args":[{"name":"time_unix_nano","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"}],"args_string":"(time_unix_nano : UInt64?)","args_html":"(time_unix_nano : UInt64?)","def":{"name":"time_unix_nano=","args":[{"name":"time_unix_nano","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"}],"visibility":"Public","body":"@time_unix_nano = time_unix_nano"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1369 = @attributes\n__temp_1370 = __temp_1369.is_a?(Enum) || (__temp_1369.is_a?(Array) && __temp_1369.first?.is_a?(Enum))\n__temp_1371 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Common::V1::KeyValue, __temp_1370 ? 0 : 2)\nif !@attributes.nil?\n  @attributes.not_nil!.each do |item|\n    buf.write_info(7, __temp_1371)\n    buf.write_message(item)\n  end\nend\n__temp_1372 = @start_time_unix_nano\n__temp_1373 = __temp_1372.is_a?(Enum) || (__temp_1372.is_a?(Array) && __temp_1372.first?.is_a?(Enum))\n__temp_1374 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_1373 ? 0 : 2)\nif !@start_time_unix_nano.nil?\n  buf.write_info(2, __temp_1374)\n  buf.write_fixed64(@start_time_unix_nano.not_nil!)\nend\n__temp_1375 = @time_unix_nano\n__temp_1376 = __temp_1375.is_a?(Enum) || (__temp_1375.is_a?(Array) && __temp_1375.first?.is_a?(Enum))\n__temp_1377 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_1376 ? 0 : 2)\nif !@time_unix_nano.nil?\n  buf.write_info(3, __temp_1377)\n  buf.write_fixed64(@time_unix_nano.not_nil!)\nend\n__temp_1378 = @count\n__temp_1379 = __temp_1378.is_a?(Enum) || (__temp_1378.is_a?(Array) && __temp_1378.first?.is_a?(Enum))\n__temp_1380 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_1379 ? 0 : 2)\nif !@count.nil?\n  buf.write_info(4, __temp_1380)\n  buf.write_fixed64(@count.not_nil!)\nend\n__temp_1381 = @sum\n__temp_1382 = __temp_1381.is_a?(Enum) || (__temp_1381.is_a?(Array) && __temp_1381.first?.is_a?(Enum))\n__temp_1383 = ::Protobuf::WIRE_TYPES.fetch(:double, __temp_1382 ? 0 : 2)\nif !@sum.nil?\n  buf.write_info(5, __temp_1383)\n  buf.write_double(@sum.not_nil!)\nend\n__temp_1384 = @quantile_values\n__temp_1385 = __temp_1384.is_a?(Enum) || (__temp_1384.is_a?(Array) && __temp_1384.first?.is_a?(Enum))\n__temp_1386 = ::Protobuf::WIRE_TYPES.fetch(SummaryDataPoint::ValueAtQuantile, __temp_1385 ? 0 : 2)\nif !@quantile_values.nil?\n  @quantile_values.not_nil!.each do |item|\n    buf.write_info(6, __temp_1386)\n    buf.write_message(item)\n  end\nend\n__temp_1387 = @flags\n__temp_1388 = __temp_1387.is_a?(Enum) || (__temp_1387.is_a?(Array) && __temp_1387.first?.is_a?(Enum))\n__temp_1389 = ::Protobuf::WIRE_TYPES.fetch(:uint32, __temp_1388 ? 0 : 2)\nif !@flags.nil?\n  buf.write_info(8, __temp_1389)\n  buf.write_uint32(@flags.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/SummaryDataPoint/ValueAtQuantile","path":"OpenTelemetry/Proto/Metrics/V1/SummaryDataPoint/ValueAtQuantile.html","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::SummaryDataPoint::ValueAtQuantile","name":"ValueAtQuantile","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/metrics.pb.cr","line_number":183,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :quantile, pb_type: :double, crystal_type: Float64, cast_type: Float64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :value, pb_type: :double, crystal_type: Float64, cast_type: Float64?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Metrics/V1/SummaryDataPoint","kind":"struct","full_name":"OpenTelemetry::Proto::Metrics::V1::SummaryDataPoint","name":"SummaryDataPoint"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(quantile:Float64?=nil,value:Float64?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"quantile","default_value":"nil","external_name":"quantile","restriction":"Float64 | ::Nil"},{"name":"value","default_value":"nil","external_name":"value","restriction":"Float64 | ::Nil"}],"args_string":"(quantile : Float64? = nil, value : Float64? = nil)","args_html":"(quantile : Float64? = <span class=\"n\">nil</span>, value : Float64? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"quantile","default_value":"nil","external_name":"quantile","restriction":"Float64 | ::Nil"},{"name":"value","default_value":"nil","external_name":"value","restriction":"Float64 | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(quantile, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"quantile\" == key\n  return self.quantile\nend\nif \"value\" == key\n  return self.value\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"quantile:Float64?-instance-method","name":"quantile","abstract":false,"def":{"name":"quantile","return_type":"Float64 | ::Nil","visibility":"Public","body":"@quantile"}},{"html_id":"quantile=(quantile:Float64?)-instance-method","name":"quantile=","abstract":false,"args":[{"name":"quantile","external_name":"quantile","restriction":"Float64 | ::Nil"}],"args_string":"(quantile : Float64?)","args_html":"(quantile : Float64?)","def":{"name":"quantile=","args":[{"name":"quantile","external_name":"quantile","restriction":"Float64 | ::Nil"}],"visibility":"Public","body":"@quantile = quantile"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1340 = @quantile\n__temp_1341 = __temp_1340.is_a?(Enum) || (__temp_1340.is_a?(Array) && __temp_1340.first?.is_a?(Enum))\n__temp_1342 = ::Protobuf::WIRE_TYPES.fetch(:double, __temp_1341 ? 0 : 2)\nif !@quantile.nil?\n  buf.write_info(1, __temp_1342)\n  buf.write_double(@quantile.not_nil!)\nend\n__temp_1343 = @value\n__temp_1344 = __temp_1343.is_a?(Enum) || (__temp_1343.is_a?(Array) && __temp_1343.first?.is_a?(Enum))\n__temp_1345 = ::Protobuf::WIRE_TYPES.fetch(:double, __temp_1344 ? 0 : 2)\nif !@value.nil?\n  buf.write_info(2, __temp_1345)\n  buf.write_double(@value.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}},{"html_id":"value:Float64?-instance-method","name":"value","abstract":false,"def":{"name":"value","return_type":"Float64 | ::Nil","visibility":"Public","body":"@value"}},{"html_id":"value=(value:Float64?)-instance-method","name":"value=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Float64 | ::Nil"}],"args_string":"(value : Float64?)","args_html":"(value : Float64?)","def":{"name":"value=","args":[{"name":"value","external_name":"value","restriction":"Float64 | ::Nil"}],"visibility":"Public","body":"@value = value"}}]}]}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Resource","path":"OpenTelemetry/Proto/Resource.html","kind":"module","full_name":"OpenTelemetry::Proto::Resource","name":"Resource","abstract":false,"locations":[{"filename":"src/proto/resource.pb.cr","line_number":8,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto","kind":"module","full_name":"OpenTelemetry::Proto","name":"Proto"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Resource/V1","path":"OpenTelemetry/Proto/Resource/V1.html","kind":"module","full_name":"OpenTelemetry::Proto::Resource::V1","name":"V1","abstract":false,"locations":[{"filename":"src/proto/resource.pb.cr","line_number":9,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Resource","kind":"module","full_name":"OpenTelemetry::Proto::Resource","name":"Resource"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Resource/V1/Resource","path":"OpenTelemetry/Proto/Resource/V1/Resource.html","kind":"struct","full_name":"OpenTelemetry::Proto::Resource::V1::Resource","name":"Resource","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/resource.pb.cr","line_number":10,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :attributes, pb_type: OpenTelemetry::Proto::Common::V1::KeyValue, crystal_type: OpenTelemetry::Proto::Common::V1::KeyValue, cast_type: Array(OpenTelemetry::Proto::Common::V1::KeyValue)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 2 => {name: :dropped_attributes_count, pb_type: :uint32, crystal_type: UInt32, cast_type: UInt32?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Resource/V1","kind":"module","full_name":"OpenTelemetry::Proto::Resource::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?=nil,dropped_attributes_count:UInt32?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"dropped_attributes_count","default_value":"nil","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"}],"args_string":"(attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)? = nil, dropped_attributes_count : UInt32? = nil)","args_html":"(attributes : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)? = <span class=\"n\">nil</span>, dropped_attributes_count : UInt32? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"dropped_attributes_count","default_value":"nil","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(attributes, dropped_attributes_count)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"attributes\" == key\n  return self.attributes\nend\nif \"dropped_attributes_count\" == key\n  return self.dropped_attributes_count\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?-instance-method","name":"attributes","abstract":false,"def":{"name":"attributes","return_type":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil","visibility":"Public","body":"@attributes"}},{"html_id":"attributes=(attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)-instance-method","name":"attributes=","abstract":false,"args":[{"name":"attributes","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"args_string":"(attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)","args_html":"(attributes : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)?)","def":{"name":"attributes=","args":[{"name":"attributes","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"visibility":"Public","body":"@attributes = attributes"}},{"html_id":"dropped_attributes_count:UInt32?-instance-method","name":"dropped_attributes_count","abstract":false,"def":{"name":"dropped_attributes_count","return_type":"UInt32 | ::Nil","visibility":"Public","body":"@dropped_attributes_count"}},{"html_id":"dropped_attributes_count=(dropped_attributes_count:UInt32?)-instance-method","name":"dropped_attributes_count=","abstract":false,"args":[{"name":"dropped_attributes_count","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"}],"args_string":"(dropped_attributes_count : UInt32?)","args_html":"(dropped_attributes_count : UInt32?)","def":{"name":"dropped_attributes_count=","args":[{"name":"dropped_attributes_count","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"}],"visibility":"Public","body":"@dropped_attributes_count = dropped_attributes_count"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_487 = @attributes\n__temp_488 = __temp_487.is_a?(Enum) || (__temp_487.is_a?(Array) && __temp_487.first?.is_a?(Enum))\n__temp_489 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Common::V1::KeyValue, __temp_488 ? 0 : 2)\nif !@attributes.nil?\n  @attributes.not_nil!.each do |item|\n    buf.write_info(1, __temp_489)\n    buf.write_message(item)\n  end\nend\n__temp_490 = @dropped_attributes_count\n__temp_491 = __temp_490.is_a?(Enum) || (__temp_490.is_a?(Array) && __temp_490.first?.is_a?(Enum))\n__temp_492 = ::Protobuf::WIRE_TYPES.fetch(:uint32, __temp_491 ? 0 : 2)\nif !@dropped_attributes_count.nil?\n  buf.write_info(2, __temp_492)\n  buf.write_uint32(@dropped_attributes_count.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace","path":"OpenTelemetry/Proto/Trace.html","kind":"module","full_name":"OpenTelemetry::Proto::Trace","name":"Trace","abstract":false,"locations":[{"filename":"src/proto/trace.pb.cr","line_number":9,"url":null},{"filename":"src/proto/trace_config.pb.cr","line_number":6,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto","kind":"module","full_name":"OpenTelemetry::Proto","name":"Proto"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1","path":"OpenTelemetry/Proto/Trace/V1.html","kind":"module","full_name":"OpenTelemetry::Proto::Trace::V1","name":"V1","abstract":false,"locations":[{"filename":"src/proto/trace.pb.cr","line_number":10,"url":null},{"filename":"src/proto/trace_config.pb.cr","line_number":7,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace","kind":"module","full_name":"OpenTelemetry::Proto::Trace","name":"Trace"},"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/ConstantSampler","path":"OpenTelemetry/Proto/Trace/V1/ConstantSampler.html","kind":"struct","full_name":"OpenTelemetry::Proto::Trace::V1::ConstantSampler","name":"ConstantSampler","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/trace_config.pb.cr","line_number":23,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :decision, pb_type: ConstantSampler::ConstantDecision, crystal_type: ConstantSampler::ConstantDecision, cast_type: ConstantSampler::ConstantDecision?, native: false, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1","kind":"module","full_name":"OpenTelemetry::Proto::Trace::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(decision:ConstantSampler::ConstantDecision?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"decision","default_value":"nil","external_name":"decision","restriction":"ConstantSampler::ConstantDecision | ::Nil"}],"args_string":"(decision : ConstantSampler::ConstantDecision? = nil)","args_html":"(decision : <a href=\"../../../../OpenTelemetry/Proto/Trace/V1/ConstantSampler/ConstantDecision.html\">ConstantSampler::ConstantDecision</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"decision","default_value":"nil","external_name":"decision","restriction":"ConstantSampler::ConstantDecision | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(decision)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"decision\" == key\n  return self.decision\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"decision:ConstantSampler::ConstantDecision?-instance-method","name":"decision","abstract":false,"def":{"name":"decision","return_type":"ConstantSampler::ConstantDecision | ::Nil","visibility":"Public","body":"@decision"}},{"html_id":"decision=(decision:ConstantSampler::ConstantDecision?)-instance-method","name":"decision=","abstract":false,"args":[{"name":"decision","external_name":"decision","restriction":"ConstantSampler::ConstantDecision | ::Nil"}],"args_string":"(decision : ConstantSampler::ConstantDecision?)","args_html":"(decision : <a href=\"../../../../OpenTelemetry/Proto/Trace/V1/ConstantSampler/ConstantDecision.html\">ConstantSampler::ConstantDecision</a>?)","def":{"name":"decision=","args":[{"name":"decision","external_name":"decision","restriction":"ConstantSampler::ConstantDecision | ::Nil"}],"visibility":"Public","body":"@decision = decision"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1553 = @decision\n__temp_1554 = __temp_1553.is_a?(Enum) || (__temp_1553.is_a?(Array) && __temp_1553.first?.is_a?(Enum))\n__temp_1555 = ::Protobuf::WIRE_TYPES.fetch(ConstantSampler::ConstantDecision, __temp_1554 ? 0 : 2)\nif !@decision.nil?\n  buf.write_info(1, __temp_1555)\n  buf.write_message(@decision.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/ConstantSampler/ConstantDecision","path":"OpenTelemetry/Proto/Trace/V1/ConstantSampler/ConstantDecision.html","kind":"enum","full_name":"OpenTelemetry::Proto::Trace::V1::ConstantSampler::ConstantDecision","name":"ConstantDecision","abstract":false,"ancestors":[{"html_id":"opentelemetry-api/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"opentelemetry-api/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/trace_config.pb.cr","line_number":25,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"ALWAYSOFF","name":"ALWAYSOFF","value":"0"},{"id":"ALWAYSON","name":"ALWAYSON","value":"1"},{"id":"ALWAYSPARENT","name":"ALWAYSPARENT","value":"2"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/ConstantSampler","kind":"struct","full_name":"OpenTelemetry::Proto::Trace::V1::ConstantSampler","name":"ConstantSampler"},"instance_methods":[{"html_id":"alwaysoff?-instance-method","name":"alwaysoff?","abstract":false,"location":{"filename":"src/proto/trace_config.pb.cr","line_number":26,"url":null},"def":{"name":"alwaysoff?","visibility":"Public","body":"self == ALWAYSOFF"}},{"html_id":"alwayson?-instance-method","name":"alwayson?","abstract":false,"location":{"filename":"src/proto/trace_config.pb.cr","line_number":27,"url":null},"def":{"name":"alwayson?","visibility":"Public","body":"self == ALWAYSON"}},{"html_id":"alwaysparent?-instance-method","name":"alwaysparent?","abstract":false,"location":{"filename":"src/proto/trace_config.pb.cr","line_number":28,"url":null},"def":{"name":"alwaysparent?","visibility":"Public","body":"self == ALWAYSPARENT"}}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/InstrumentationLibrarySpans","path":"OpenTelemetry/Proto/Trace/V1/InstrumentationLibrarySpans.html","kind":"struct","full_name":"OpenTelemetry::Proto::Trace::V1::InstrumentationLibrarySpans","name":"InstrumentationLibrarySpans","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/trace.pb.cr","line_number":40,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :instrumentation_library, pb_type: OpenTelemetry::Proto::Common::V1::InstrumentationLibrary, crystal_type: OpenTelemetry::Proto::Common::V1::InstrumentationLibrary, cast_type: OpenTelemetry::Proto::Common::V1::InstrumentationLibrary?, native: false, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :spans, pb_type: Span, crystal_type: Span, cast_type: Array(Span)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 3 => {name: :schema_url, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1","kind":"module","full_name":"OpenTelemetry::Proto::Trace::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(instrumentation_library:OpenTelemetry::Proto::Common::V1::InstrumentationLibrary?=nil,spans:Array(Span)?=nil,schema_url:String?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"instrumentation_library","default_value":"nil","external_name":"instrumentation_library","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationLibrary | ::Nil"},{"name":"spans","default_value":"nil","external_name":"spans","restriction":"Array(Span) | ::Nil"},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":"String | ::Nil"}],"args_string":"(instrumentation_library : OpenTelemetry::Proto::Common::V1::InstrumentationLibrary? = nil, spans : Array(Span)? = nil, schema_url : String? = nil)","args_html":"(instrumentation_library : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/InstrumentationLibrary.html\">OpenTelemetry::Proto::Common::V1::InstrumentationLibrary</a>? = <span class=\"n\">nil</span>, spans : Array(<a href=\"../../../../OpenTelemetry/Proto/Trace/V1/Span.html\">Span</a>)? = <span class=\"n\">nil</span>, schema_url : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"instrumentation_library","default_value":"nil","external_name":"instrumentation_library","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationLibrary | ::Nil"},{"name":"spans","default_value":"nil","external_name":"spans","restriction":"Array(Span) | ::Nil"},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(instrumentation_library, spans, schema_url)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"instrumentation_library\" == key\n  return self.instrumentation_library\nend\nif \"spans\" == key\n  return self.spans\nend\nif \"schema_url\" == key\n  return self.schema_url\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"instrumentation_library:OpenTelemetry::Proto::Common::V1::InstrumentationLibrary?-instance-method","name":"instrumentation_library","abstract":false,"def":{"name":"instrumentation_library","return_type":"OpenTelemetry::Proto::Common::V1::InstrumentationLibrary | ::Nil","visibility":"Public","body":"@instrumentation_library"}},{"html_id":"instrumentation_library=(instrumentation_library:OpenTelemetry::Proto::Common::V1::InstrumentationLibrary?)-instance-method","name":"instrumentation_library=","abstract":false,"args":[{"name":"instrumentation_library","external_name":"instrumentation_library","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationLibrary | ::Nil"}],"args_string":"(instrumentation_library : OpenTelemetry::Proto::Common::V1::InstrumentationLibrary?)","args_html":"(instrumentation_library : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/InstrumentationLibrary.html\">OpenTelemetry::Proto::Common::V1::InstrumentationLibrary</a>?)","def":{"name":"instrumentation_library=","args":[{"name":"instrumentation_library","external_name":"instrumentation_library","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationLibrary | ::Nil"}],"visibility":"Public","body":"@instrumentation_library = instrumentation_library"}},{"html_id":"schema_url:String?-instance-method","name":"schema_url","abstract":false,"def":{"name":"schema_url","return_type":"String | ::Nil","visibility":"Public","body":"@schema_url"}},{"html_id":"schema_url=(schema_url:String?)-instance-method","name":"schema_url=","abstract":false,"args":[{"name":"schema_url","external_name":"schema_url","restriction":"String | ::Nil"}],"args_string":"(schema_url : String?)","args_html":"(schema_url : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"schema_url=","args":[{"name":"schema_url","external_name":"schema_url","restriction":"String | ::Nil"}],"visibility":"Public","body":"@schema_url = schema_url"}},{"html_id":"spans:Array(Span)?-instance-method","name":"spans","abstract":false,"def":{"name":"spans","return_type":"Array(Span) | ::Nil","visibility":"Public","body":"@spans"}},{"html_id":"spans=(spans:Array(Span)?)-instance-method","name":"spans=","abstract":false,"args":[{"name":"spans","external_name":"spans","restriction":"Array(Span) | ::Nil"}],"args_string":"(spans : Array(Span)?)","args_html":"(spans : Array(<a href=\"../../../../OpenTelemetry/Proto/Trace/V1/Span.html\">Span</a>)?)","def":{"name":"spans=","args":[{"name":"spans","external_name":"spans","restriction":"Array(Span) | ::Nil"}],"visibility":"Public","body":"@spans = spans"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_558 = @instrumentation_library\n__temp_559 = __temp_558.is_a?(Enum) || (__temp_558.is_a?(Array) && __temp_558.first?.is_a?(Enum))\n__temp_560 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Common::V1::InstrumentationLibrary, __temp_559 ? 0 : 2)\nif !@instrumentation_library.nil?\n  buf.write_info(1, __temp_560)\n  buf.write_message(@instrumentation_library.not_nil!)\nend\n__temp_561 = @spans\n__temp_562 = __temp_561.is_a?(Enum) || (__temp_561.is_a?(Array) && __temp_561.first?.is_a?(Enum))\n__temp_563 = ::Protobuf::WIRE_TYPES.fetch(Span, __temp_562 ? 0 : 2)\nif !@spans.nil?\n  @spans.not_nil!.each do |item|\n    buf.write_info(2, __temp_563)\n    buf.write_message(item)\n  end\nend\n__temp_564 = @schema_url\n__temp_565 = __temp_564.is_a?(Enum) || (__temp_564.is_a?(Array) && __temp_564.first?.is_a?(Enum))\n__temp_566 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_565 ? 0 : 2)\nif !@schema_url.nil?\n  buf.write_info(3, __temp_566)\n  buf.write_string(@schema_url.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/RateLimitingSampler","path":"OpenTelemetry/Proto/Trace/V1/RateLimitingSampler.html","kind":"struct","full_name":"OpenTelemetry::Proto::Trace::V1::RateLimitingSampler","name":"RateLimitingSampler","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/trace_config.pb.cr","line_number":44,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :qps, pb_type: :int64, crystal_type: Int64, cast_type: Int64?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1","kind":"module","full_name":"OpenTelemetry::Proto::Trace::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(qps:Int64?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"qps","default_value":"nil","external_name":"qps","restriction":"Int64 | ::Nil"}],"args_string":"(qps : Int64? = nil)","args_html":"(qps : Int64? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"qps","default_value":"nil","external_name":"qps","restriction":"Int64 | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(qps)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"qps\" == key\n  return self.qps\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"qps:Int64?-instance-method","name":"qps","abstract":false,"def":{"name":"qps","return_type":"Int64 | ::Nil","visibility":"Public","body":"@qps"}},{"html_id":"qps=(qps:Int64?)-instance-method","name":"qps=","abstract":false,"args":[{"name":"qps","external_name":"qps","restriction":"Int64 | ::Nil"}],"args_string":"(qps : Int64?)","args_html":"(qps : Int64?)","def":{"name":"qps=","args":[{"name":"qps","external_name":"qps","restriction":"Int64 | ::Nil"}],"visibility":"Public","body":"@qps = qps"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1565 = @qps\n__temp_1566 = __temp_1565.is_a?(Enum) || (__temp_1565.is_a?(Array) && __temp_1565.first?.is_a?(Enum))\n__temp_1567 = ::Protobuf::WIRE_TYPES.fetch(:int64, __temp_1566 ? 0 : 2)\nif !@qps.nil?\n  buf.write_info(1, __temp_1567)\n  buf.write_int64(@qps.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/ResourceSpans","path":"OpenTelemetry/Proto/Trace/V1/ResourceSpans.html","kind":"struct","full_name":"OpenTelemetry::Proto::Trace::V1::ResourceSpans","name":"ResourceSpans","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/trace.pb.cr","line_number":19,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :resource, pb_type: OpenTelemetry::Proto::Resource::V1::Resource, crystal_type: OpenTelemetry::Proto::Resource::V1::Resource, cast_type: OpenTelemetry::Proto::Resource::V1::Resource?, native: false, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :scope_spans, pb_type: ScopeSpans, crystal_type: ScopeSpans, cast_type: Array(ScopeSpans)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 1000 => {name: :instrumentation_library_spans, pb_type: InstrumentationLibrarySpans, crystal_type: InstrumentationLibrarySpans, cast_type: Array(InstrumentationLibrarySpans)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 3 => {name: :schema_url, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1","kind":"module","full_name":"OpenTelemetry::Proto::Trace::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(resource:OpenTelemetry::Proto::Resource::V1::Resource?=nil,scope_spans:Array(ScopeSpans)?=nil,instrumentation_library_spans:Array(InstrumentationLibrarySpans)?=nil,schema_url:String?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"resource","default_value":"nil","external_name":"resource","restriction":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil"},{"name":"scope_spans","default_value":"nil","external_name":"scope_spans","restriction":"Array(ScopeSpans) | ::Nil"},{"name":"instrumentation_library_spans","default_value":"nil","external_name":"instrumentation_library_spans","restriction":"Array(InstrumentationLibrarySpans) | ::Nil"},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":"String | ::Nil"}],"args_string":"(resource : OpenTelemetry::Proto::Resource::V1::Resource? = nil, scope_spans : Array(ScopeSpans)? = nil, instrumentation_library_spans : Array(InstrumentationLibrarySpans)? = nil, schema_url : String? = nil)","args_html":"(resource : <a href=\"../../../../OpenTelemetry/Proto/Resource/V1/Resource.html\">OpenTelemetry::Proto::Resource::V1::Resource</a>? = <span class=\"n\">nil</span>, scope_spans : Array(<a href=\"../../../../OpenTelemetry/Proto/Trace/V1/ScopeSpans.html\">ScopeSpans</a>)? = <span class=\"n\">nil</span>, instrumentation_library_spans : Array(<a href=\"../../../../OpenTelemetry/Proto/Trace/V1/InstrumentationLibrarySpans.html\">InstrumentationLibrarySpans</a>)? = <span class=\"n\">nil</span>, schema_url : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"resource","default_value":"nil","external_name":"resource","restriction":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil"},{"name":"scope_spans","default_value":"nil","external_name":"scope_spans","restriction":"Array(ScopeSpans) | ::Nil"},{"name":"instrumentation_library_spans","default_value":"nil","external_name":"instrumentation_library_spans","restriction":"Array(InstrumentationLibrarySpans) | ::Nil"},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(resource, scope_spans, instrumentation_library_spans, schema_url)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"resource\" == key\n  return self.resource\nend\nif \"scope_spans\" == key\n  return self.scope_spans\nend\nif \"instrumentation_library_spans\" == key\n  return self.instrumentation_library_spans\nend\nif \"schema_url\" == key\n  return self.schema_url\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"instrumentation_library_spans:Array(InstrumentationLibrarySpans)?-instance-method","name":"instrumentation_library_spans","abstract":false,"def":{"name":"instrumentation_library_spans","return_type":"Array(InstrumentationLibrarySpans) | ::Nil","visibility":"Public","body":"@instrumentation_library_spans"}},{"html_id":"instrumentation_library_spans=(instrumentation_library_spans:Array(InstrumentationLibrarySpans)?)-instance-method","name":"instrumentation_library_spans=","abstract":false,"args":[{"name":"instrumentation_library_spans","external_name":"instrumentation_library_spans","restriction":"Array(InstrumentationLibrarySpans) | ::Nil"}],"args_string":"(instrumentation_library_spans : Array(InstrumentationLibrarySpans)?)","args_html":"(instrumentation_library_spans : Array(<a href=\"../../../../OpenTelemetry/Proto/Trace/V1/InstrumentationLibrarySpans.html\">InstrumentationLibrarySpans</a>)?)","def":{"name":"instrumentation_library_spans=","args":[{"name":"instrumentation_library_spans","external_name":"instrumentation_library_spans","restriction":"Array(InstrumentationLibrarySpans) | ::Nil"}],"visibility":"Public","body":"@instrumentation_library_spans = instrumentation_library_spans"}},{"html_id":"resource:OpenTelemetry::Proto::Resource::V1::Resource?-instance-method","name":"resource","abstract":false,"def":{"name":"resource","return_type":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil","visibility":"Public","body":"@resource"}},{"html_id":"resource=(resource:OpenTelemetry::Proto::Resource::V1::Resource?)-instance-method","name":"resource=","abstract":false,"args":[{"name":"resource","external_name":"resource","restriction":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil"}],"args_string":"(resource : OpenTelemetry::Proto::Resource::V1::Resource?)","args_html":"(resource : <a href=\"../../../../OpenTelemetry/Proto/Resource/V1/Resource.html\">OpenTelemetry::Proto::Resource::V1::Resource</a>?)","def":{"name":"resource=","args":[{"name":"resource","external_name":"resource","restriction":"OpenTelemetry::Proto::Resource::V1::Resource | ::Nil"}],"visibility":"Public","body":"@resource = resource"}},{"html_id":"schema_url:String?-instance-method","name":"schema_url","abstract":false,"def":{"name":"schema_url","return_type":"String | ::Nil","visibility":"Public","body":"@schema_url"}},{"html_id":"schema_url=(schema_url:String?)-instance-method","name":"schema_url=","abstract":false,"args":[{"name":"schema_url","external_name":"schema_url","restriction":"String | ::Nil"}],"args_string":"(schema_url : String?)","args_html":"(schema_url : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"schema_url=","args":[{"name":"schema_url","external_name":"schema_url","restriction":"String | ::Nil"}],"visibility":"Public","body":"@schema_url = schema_url"}},{"html_id":"scope_spans:Array(ScopeSpans)?-instance-method","name":"scope_spans","abstract":false,"def":{"name":"scope_spans","return_type":"Array(ScopeSpans) | ::Nil","visibility":"Public","body":"@scope_spans"}},{"html_id":"scope_spans=(scope_spans:Array(ScopeSpans)?)-instance-method","name":"scope_spans=","abstract":false,"args":[{"name":"scope_spans","external_name":"scope_spans","restriction":"Array(ScopeSpans) | ::Nil"}],"args_string":"(scope_spans : Array(ScopeSpans)?)","args_html":"(scope_spans : Array(<a href=\"../../../../OpenTelemetry/Proto/Trace/V1/ScopeSpans.html\">ScopeSpans</a>)?)","def":{"name":"scope_spans=","args":[{"name":"scope_spans","external_name":"scope_spans","restriction":"Array(ScopeSpans) | ::Nil"}],"visibility":"Public","body":"@scope_spans = scope_spans"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_515 = @resource\n__temp_516 = __temp_515.is_a?(Enum) || (__temp_515.is_a?(Array) && __temp_515.first?.is_a?(Enum))\n__temp_517 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Resource::V1::Resource, __temp_516 ? 0 : 2)\nif !@resource.nil?\n  buf.write_info(1, __temp_517)\n  buf.write_message(@resource.not_nil!)\nend\n__temp_518 = @scope_spans\n__temp_519 = __temp_518.is_a?(Enum) || (__temp_518.is_a?(Array) && __temp_518.first?.is_a?(Enum))\n__temp_520 = ::Protobuf::WIRE_TYPES.fetch(ScopeSpans, __temp_519 ? 0 : 2)\nif !@scope_spans.nil?\n  @scope_spans.not_nil!.each do |item|\n    buf.write_info(2, __temp_520)\n    buf.write_message(item)\n  end\nend\n__temp_521 = @instrumentation_library_spans\n__temp_522 = __temp_521.is_a?(Enum) || (__temp_521.is_a?(Array) && __temp_521.first?.is_a?(Enum))\n__temp_523 = ::Protobuf::WIRE_TYPES.fetch(InstrumentationLibrarySpans, __temp_522 ? 0 : 2)\nif !@instrumentation_library_spans.nil?\n  @instrumentation_library_spans.not_nil!.each do |item|\n    buf.write_info(1000, __temp_523)\n    buf.write_message(item)\n  end\nend\n__temp_524 = @schema_url\n__temp_525 = __temp_524.is_a?(Enum) || (__temp_524.is_a?(Array) && __temp_524.first?.is_a?(Enum))\n__temp_526 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_525 ? 0 : 2)\nif !@schema_url.nil?\n  buf.write_info(3, __temp_526)\n  buf.write_string(@schema_url.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/ScopeSpans","path":"OpenTelemetry/Proto/Trace/V1/ScopeSpans.html","kind":"struct","full_name":"OpenTelemetry::Proto::Trace::V1::ScopeSpans","name":"ScopeSpans","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/trace.pb.cr","line_number":30,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :scope, pb_type: OpenTelemetry::Proto::Common::V1::InstrumentationScope, crystal_type: OpenTelemetry::Proto::Common::V1::InstrumentationScope, cast_type: OpenTelemetry::Proto::Common::V1::InstrumentationScope?, native: false, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :spans, pb_type: Span, crystal_type: Span, cast_type: Array(Span)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 3 => {name: :schema_url, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1","kind":"module","full_name":"OpenTelemetry::Proto::Trace::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(scope:OpenTelemetry::Proto::Common::V1::InstrumentationScope?=nil,spans:Array(Span)?=nil,schema_url:String?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"scope","default_value":"nil","external_name":"scope","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationScope | ::Nil"},{"name":"spans","default_value":"nil","external_name":"spans","restriction":"Array(Span) | ::Nil"},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":"String | ::Nil"}],"args_string":"(scope : OpenTelemetry::Proto::Common::V1::InstrumentationScope? = nil, spans : Array(Span)? = nil, schema_url : String? = nil)","args_html":"(scope : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/InstrumentationScope.html\">OpenTelemetry::Proto::Common::V1::InstrumentationScope</a>? = <span class=\"n\">nil</span>, spans : Array(<a href=\"../../../../OpenTelemetry/Proto/Trace/V1/Span.html\">Span</a>)? = <span class=\"n\">nil</span>, schema_url : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"scope","default_value":"nil","external_name":"scope","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationScope | ::Nil"},{"name":"spans","default_value":"nil","external_name":"spans","restriction":"Array(Span) | ::Nil"},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(scope, spans, schema_url)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"scope\" == key\n  return self.scope\nend\nif \"spans\" == key\n  return self.spans\nend\nif \"schema_url\" == key\n  return self.schema_url\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"schema_url:String?-instance-method","name":"schema_url","abstract":false,"def":{"name":"schema_url","return_type":"String | ::Nil","visibility":"Public","body":"@schema_url"}},{"html_id":"schema_url=(schema_url:String?)-instance-method","name":"schema_url=","abstract":false,"args":[{"name":"schema_url","external_name":"schema_url","restriction":"String | ::Nil"}],"args_string":"(schema_url : String?)","args_html":"(schema_url : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"schema_url=","args":[{"name":"schema_url","external_name":"schema_url","restriction":"String | ::Nil"}],"visibility":"Public","body":"@schema_url = schema_url"}},{"html_id":"scope:OpenTelemetry::Proto::Common::V1::InstrumentationScope?-instance-method","name":"scope","abstract":false,"def":{"name":"scope","return_type":"OpenTelemetry::Proto::Common::V1::InstrumentationScope | ::Nil","visibility":"Public","body":"@scope"}},{"html_id":"scope=(scope:OpenTelemetry::Proto::Common::V1::InstrumentationScope?)-instance-method","name":"scope=","abstract":false,"args":[{"name":"scope","external_name":"scope","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationScope | ::Nil"}],"args_string":"(scope : OpenTelemetry::Proto::Common::V1::InstrumentationScope?)","args_html":"(scope : <a href=\"../../../../OpenTelemetry/Proto/Common/V1/InstrumentationScope.html\">OpenTelemetry::Proto::Common::V1::InstrumentationScope</a>?)","def":{"name":"scope=","args":[{"name":"scope","external_name":"scope","restriction":"OpenTelemetry::Proto::Common::V1::InstrumentationScope | ::Nil"}],"visibility":"Public","body":"@scope = scope"}},{"html_id":"spans:Array(Span)?-instance-method","name":"spans","abstract":false,"def":{"name":"spans","return_type":"Array(Span) | ::Nil","visibility":"Public","body":"@spans"}},{"html_id":"spans=(spans:Array(Span)?)-instance-method","name":"spans=","abstract":false,"args":[{"name":"spans","external_name":"spans","restriction":"Array(Span) | ::Nil"}],"args_string":"(spans : Array(Span)?)","args_html":"(spans : Array(<a href=\"../../../../OpenTelemetry/Proto/Trace/V1/Span.html\">Span</a>)?)","def":{"name":"spans=","args":[{"name":"spans","external_name":"spans","restriction":"Array(Span) | ::Nil"}],"visibility":"Public","body":"@spans = spans"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_538 = @scope\n__temp_539 = __temp_538.is_a?(Enum) || (__temp_538.is_a?(Array) && __temp_538.first?.is_a?(Enum))\n__temp_540 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Common::V1::InstrumentationScope, __temp_539 ? 0 : 2)\nif !@scope.nil?\n  buf.write_info(1, __temp_540)\n  buf.write_message(@scope.not_nil!)\nend\n__temp_541 = @spans\n__temp_542 = __temp_541.is_a?(Enum) || (__temp_541.is_a?(Array) && __temp_541.first?.is_a?(Enum))\n__temp_543 = ::Protobuf::WIRE_TYPES.fetch(Span, __temp_542 ? 0 : 2)\nif !@spans.nil?\n  @spans.not_nil!.each do |item|\n    buf.write_info(2, __temp_543)\n    buf.write_message(item)\n  end\nend\n__temp_544 = @schema_url\n__temp_545 = __temp_544.is_a?(Enum) || (__temp_544.is_a?(Array) && __temp_544.first?.is_a?(Enum))\n__temp_546 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_545 ? 0 : 2)\nif !@schema_url.nil?\n  buf.write_info(3, __temp_546)\n  buf.write_string(@schema_url.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/Span","path":"OpenTelemetry/Proto/Trace/V1/Span.html","kind":"struct","full_name":"OpenTelemetry::Proto::Trace::V1::Span","name":"Span","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/trace.pb.cr","line_number":50,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :trace_id, pb_type: :bytes, crystal_type: Slice(UInt8), cast_type: Slice(UInt8)?, native: true, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :span_id, pb_type: :bytes, crystal_type: Slice(UInt8), cast_type: Slice(UInt8)?, native: true, optional: true, repeated: false, default: nil, packed: false}, 3 => {name: :trace_state, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}, 4 => {name: :parent_span_id, pb_type: :bytes, crystal_type: Slice(UInt8), cast_type: Slice(UInt8)?, native: true, optional: true, repeated: false, default: nil, packed: false}, 5 => {name: :name, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}, 6 => {name: :kind, pb_type: Span::SpanKind, crystal_type: Span::SpanKind, cast_type: Span::SpanKind?, native: false, optional: true, repeated: false, default: nil, packed: false}, 7 => {name: :start_time_unix_nano, pb_type: :fixed64, crystal_type: UInt64, cast_type: UInt64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 8 => {name: :end_time_unix_nano, pb_type: :fixed64, crystal_type: UInt64, cast_type: UInt64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 9 => {name: :attributes, pb_type: OpenTelemetry::Proto::Common::V1::KeyValue, crystal_type: OpenTelemetry::Proto::Common::V1::KeyValue, cast_type: Array(OpenTelemetry::Proto::Common::V1::KeyValue)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 10 => {name: :dropped_attributes_count, pb_type: :uint32, crystal_type: UInt32, cast_type: UInt32?, native: true, optional: true, repeated: false, default: nil, packed: false}, 11 => {name: :events, pb_type: Span::Event, crystal_type: Span::Event, cast_type: Array(Span::Event)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 12 => {name: :dropped_events_count, pb_type: :uint32, crystal_type: UInt32, cast_type: UInt32?, native: true, optional: true, repeated: false, default: nil, packed: false}, 13 => {name: :links, pb_type: Span::Link, crystal_type: Span::Link, cast_type: Array(Span::Link)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 14 => {name: :dropped_links_count, pb_type: :uint32, crystal_type: UInt32, cast_type: UInt32?, native: true, optional: true, repeated: false, default: nil, packed: false}, 15 => {name: :status, pb_type: Status, crystal_type: Status, cast_type: Status?, native: false, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1","kind":"module","full_name":"OpenTelemetry::Proto::Trace::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(trace_id:Slice(UInt8)?=nil,span_id:Slice(UInt8)?=nil,trace_state:String?=nil,parent_span_id:Slice(UInt8)?=nil,name:String?=nil,kind:Span::SpanKind?=nil,start_time_unix_nano:UInt64?=nil,end_time_unix_nano:UInt64?=nil,attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?=nil,dropped_attributes_count:UInt32?=nil,events:Array(Span::Event)?=nil,dropped_events_count:UInt32?=nil,links:Array(Span::Link)?=nil,dropped_links_count:UInt32?=nil,status:Status?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"trace_id","default_value":"nil","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"span_id","default_value":"nil","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"trace_state","default_value":"nil","external_name":"trace_state","restriction":"String | ::Nil"},{"name":"parent_span_id","default_value":"nil","external_name":"parent_span_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"name","default_value":"nil","external_name":"name","restriction":"String | ::Nil"},{"name":"kind","default_value":"nil","external_name":"kind","restriction":"Span::SpanKind | ::Nil"},{"name":"start_time_unix_nano","default_value":"nil","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"end_time_unix_nano","default_value":"nil","external_name":"end_time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"dropped_attributes_count","default_value":"nil","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"},{"name":"events","default_value":"nil","external_name":"events","restriction":"Array(Span::Event) | ::Nil"},{"name":"dropped_events_count","default_value":"nil","external_name":"dropped_events_count","restriction":"UInt32 | ::Nil"},{"name":"links","default_value":"nil","external_name":"links","restriction":"Array(Span::Link) | ::Nil"},{"name":"dropped_links_count","default_value":"nil","external_name":"dropped_links_count","restriction":"UInt32 | ::Nil"},{"name":"status","default_value":"nil","external_name":"status","restriction":"Status | ::Nil"}],"args_string":"(trace_id : Slice(UInt8)? = nil, span_id : Slice(UInt8)? = nil, trace_state : String? = nil, parent_span_id : Slice(UInt8)? = nil, name : String? = nil, kind : Span::SpanKind? = nil, start_time_unix_nano : UInt64? = nil, end_time_unix_nano : UInt64? = nil, attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)? = nil, dropped_attributes_count : UInt32? = nil, events : Array(Span::Event)? = nil, dropped_events_count : UInt32? = nil, links : Array(Span::Link)? = nil, dropped_links_count : UInt32? = nil, status : Status? = nil)","args_html":"(trace_id : Slice(UInt8)? = <span class=\"n\">nil</span>, span_id : Slice(UInt8)? = <span class=\"n\">nil</span>, trace_state : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>, parent_span_id : Slice(UInt8)? = <span class=\"n\">nil</span>, name : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>, kind : <a href=\"../../../../OpenTelemetry/Proto/Trace/V1/Span/SpanKind.html\">Span::SpanKind</a>? = <span class=\"n\">nil</span>, start_time_unix_nano : UInt64? = <span class=\"n\">nil</span>, end_time_unix_nano : UInt64? = <span class=\"n\">nil</span>, attributes : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)? = <span class=\"n\">nil</span>, dropped_attributes_count : UInt32? = <span class=\"n\">nil</span>, events : Array(<a href=\"../../../../OpenTelemetry/Proto/Trace/V1/Span/Event.html\">Span::Event</a>)? = <span class=\"n\">nil</span>, dropped_events_count : UInt32? = <span class=\"n\">nil</span>, links : Array(<a href=\"../../../../OpenTelemetry/Proto/Trace/V1/Span/Link.html\">Span::Link</a>)? = <span class=\"n\">nil</span>, dropped_links_count : UInt32? = <span class=\"n\">nil</span>, status : <a href=\"../../../../OpenTelemetry/Proto/Trace/V1/Status.html\">Status</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"trace_id","default_value":"nil","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"span_id","default_value":"nil","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"trace_state","default_value":"nil","external_name":"trace_state","restriction":"String | ::Nil"},{"name":"parent_span_id","default_value":"nil","external_name":"parent_span_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"name","default_value":"nil","external_name":"name","restriction":"String | ::Nil"},{"name":"kind","default_value":"nil","external_name":"kind","restriction":"Span::SpanKind | ::Nil"},{"name":"start_time_unix_nano","default_value":"nil","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"end_time_unix_nano","default_value":"nil","external_name":"end_time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"dropped_attributes_count","default_value":"nil","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"},{"name":"events","default_value":"nil","external_name":"events","restriction":"Array(Span::Event) | ::Nil"},{"name":"dropped_events_count","default_value":"nil","external_name":"dropped_events_count","restriction":"UInt32 | ::Nil"},{"name":"links","default_value":"nil","external_name":"links","restriction":"Array(Span::Link) | ::Nil"},{"name":"dropped_links_count","default_value":"nil","external_name":"dropped_links_count","restriction":"UInt32 | ::Nil"},{"name":"status","default_value":"nil","external_name":"status","restriction":"Status | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(trace_id, span_id, trace_state, parent_span_id, name, kind, start_time_unix_nano, end_time_unix_nano, attributes, dropped_attributes_count, events, dropped_events_count, links, dropped_links_count, status)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"trace_id\" == key\n  return self.trace_id\nend\nif \"span_id\" == key\n  return self.span_id\nend\nif \"trace_state\" == key\n  return self.trace_state\nend\nif \"parent_span_id\" == key\n  return self.parent_span_id\nend\nif \"name\" == key\n  return self.name\nend\nif \"kind\" == key\n  return self.kind\nend\nif \"start_time_unix_nano\" == key\n  return self.start_time_unix_nano\nend\nif \"end_time_unix_nano\" == key\n  return self.end_time_unix_nano\nend\nif \"attributes\" == key\n  return self.attributes\nend\nif \"dropped_attributes_count\" == key\n  return self.dropped_attributes_count\nend\nif \"events\" == key\n  return self.events\nend\nif \"dropped_events_count\" == key\n  return self.dropped_events_count\nend\nif \"links\" == key\n  return self.links\nend\nif \"dropped_links_count\" == key\n  return self.dropped_links_count\nend\nif \"status\" == key\n  return self.status\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?-instance-method","name":"attributes","abstract":false,"def":{"name":"attributes","return_type":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil","visibility":"Public","body":"@attributes"}},{"html_id":"attributes=(attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)-instance-method","name":"attributes=","abstract":false,"args":[{"name":"attributes","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"args_string":"(attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)","args_html":"(attributes : Array(<a href=\"../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)?)","def":{"name":"attributes=","args":[{"name":"attributes","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"visibility":"Public","body":"@attributes = attributes"}},{"html_id":"dropped_attributes_count:UInt32?-instance-method","name":"dropped_attributes_count","abstract":false,"def":{"name":"dropped_attributes_count","return_type":"UInt32 | ::Nil","visibility":"Public","body":"@dropped_attributes_count"}},{"html_id":"dropped_attributes_count=(dropped_attributes_count:UInt32?)-instance-method","name":"dropped_attributes_count=","abstract":false,"args":[{"name":"dropped_attributes_count","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"}],"args_string":"(dropped_attributes_count : UInt32?)","args_html":"(dropped_attributes_count : UInt32?)","def":{"name":"dropped_attributes_count=","args":[{"name":"dropped_attributes_count","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"}],"visibility":"Public","body":"@dropped_attributes_count = dropped_attributes_count"}},{"html_id":"dropped_events_count:UInt32?-instance-method","name":"dropped_events_count","abstract":false,"def":{"name":"dropped_events_count","return_type":"UInt32 | ::Nil","visibility":"Public","body":"@dropped_events_count"}},{"html_id":"dropped_events_count=(dropped_events_count:UInt32?)-instance-method","name":"dropped_events_count=","abstract":false,"args":[{"name":"dropped_events_count","external_name":"dropped_events_count","restriction":"UInt32 | ::Nil"}],"args_string":"(dropped_events_count : UInt32?)","args_html":"(dropped_events_count : UInt32?)","def":{"name":"dropped_events_count=","args":[{"name":"dropped_events_count","external_name":"dropped_events_count","restriction":"UInt32 | ::Nil"}],"visibility":"Public","body":"@dropped_events_count = dropped_events_count"}},{"html_id":"dropped_links_count:UInt32?-instance-method","name":"dropped_links_count","abstract":false,"def":{"name":"dropped_links_count","return_type":"UInt32 | ::Nil","visibility":"Public","body":"@dropped_links_count"}},{"html_id":"dropped_links_count=(dropped_links_count:UInt32?)-instance-method","name":"dropped_links_count=","abstract":false,"args":[{"name":"dropped_links_count","external_name":"dropped_links_count","restriction":"UInt32 | ::Nil"}],"args_string":"(dropped_links_count : UInt32?)","args_html":"(dropped_links_count : UInt32?)","def":{"name":"dropped_links_count=","args":[{"name":"dropped_links_count","external_name":"dropped_links_count","restriction":"UInt32 | ::Nil"}],"visibility":"Public","body":"@dropped_links_count = dropped_links_count"}},{"html_id":"end_time_unix_nano:UInt64?-instance-method","name":"end_time_unix_nano","abstract":false,"def":{"name":"end_time_unix_nano","return_type":"UInt64 | ::Nil","visibility":"Public","body":"@end_time_unix_nano"}},{"html_id":"end_time_unix_nano=(end_time_unix_nano:UInt64?)-instance-method","name":"end_time_unix_nano=","abstract":false,"args":[{"name":"end_time_unix_nano","external_name":"end_time_unix_nano","restriction":"UInt64 | ::Nil"}],"args_string":"(end_time_unix_nano : UInt64?)","args_html":"(end_time_unix_nano : UInt64?)","def":{"name":"end_time_unix_nano=","args":[{"name":"end_time_unix_nano","external_name":"end_time_unix_nano","restriction":"UInt64 | ::Nil"}],"visibility":"Public","body":"@end_time_unix_nano = end_time_unix_nano"}},{"html_id":"events:Array(Span::Event)?-instance-method","name":"events","abstract":false,"def":{"name":"events","return_type":"Array(Span::Event) | ::Nil","visibility":"Public","body":"@events"}},{"html_id":"events=(events:Array(Span::Event)?)-instance-method","name":"events=","abstract":false,"args":[{"name":"events","external_name":"events","restriction":"Array(Span::Event) | ::Nil"}],"args_string":"(events : Array(Span::Event)?)","args_html":"(events : Array(<a href=\"../../../../OpenTelemetry/Proto/Trace/V1/Span/Event.html\">Span::Event</a>)?)","def":{"name":"events=","args":[{"name":"events","external_name":"events","restriction":"Array(Span::Event) | ::Nil"}],"visibility":"Public","body":"@events = events"}},{"html_id":"kind:Span::SpanKind?-instance-method","name":"kind","abstract":false,"def":{"name":"kind","return_type":"Span::SpanKind | ::Nil","visibility":"Public","body":"@kind"}},{"html_id":"kind=(kind:Span::SpanKind?)-instance-method","name":"kind=","abstract":false,"args":[{"name":"kind","external_name":"kind","restriction":"Span::SpanKind | ::Nil"}],"args_string":"(kind : Span::SpanKind?)","args_html":"(kind : <a href=\"../../../../OpenTelemetry/Proto/Trace/V1/Span/SpanKind.html\">Span::SpanKind</a>?)","def":{"name":"kind=","args":[{"name":"kind","external_name":"kind","restriction":"Span::SpanKind | ::Nil"}],"visibility":"Public","body":"@kind = kind"}},{"html_id":"links:Array(Span::Link)?-instance-method","name":"links","abstract":false,"def":{"name":"links","return_type":"Array(Span::Link) | ::Nil","visibility":"Public","body":"@links"}},{"html_id":"links=(links:Array(Span::Link)?)-instance-method","name":"links=","abstract":false,"args":[{"name":"links","external_name":"links","restriction":"Array(Span::Link) | ::Nil"}],"args_string":"(links : Array(Span::Link)?)","args_html":"(links : Array(<a href=\"../../../../OpenTelemetry/Proto/Trace/V1/Span/Link.html\">Span::Link</a>)?)","def":{"name":"links=","args":[{"name":"links","external_name":"links","restriction":"Array(Span::Link) | ::Nil"}],"visibility":"Public","body":"@links = links"}},{"html_id":"name:String?-instance-method","name":"name","abstract":false,"def":{"name":"name","return_type":"String | ::Nil","visibility":"Public","body":"@name"}},{"html_id":"name=(name:String?)-instance-method","name":"name=","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String | ::Nil"}],"args_string":"(name : String?)","args_html":"(name : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String | ::Nil"}],"visibility":"Public","body":"@name = name"}},{"html_id":"parent_span_id:Slice(UInt8)?-instance-method","name":"parent_span_id","abstract":false,"def":{"name":"parent_span_id","return_type":"Slice(UInt8) | ::Nil","visibility":"Public","body":"@parent_span_id"}},{"html_id":"parent_span_id=(parent_span_id:Slice(UInt8)?)-instance-method","name":"parent_span_id=","abstract":false,"args":[{"name":"parent_span_id","external_name":"parent_span_id","restriction":"Slice(UInt8) | ::Nil"}],"args_string":"(parent_span_id : Slice(UInt8)?)","args_html":"(parent_span_id : Slice(UInt8)?)","def":{"name":"parent_span_id=","args":[{"name":"parent_span_id","external_name":"parent_span_id","restriction":"Slice(UInt8) | ::Nil"}],"visibility":"Public","body":"@parent_span_id = parent_span_id"}},{"html_id":"span_id:Slice(UInt8)?-instance-method","name":"span_id","abstract":false,"def":{"name":"span_id","return_type":"Slice(UInt8) | ::Nil","visibility":"Public","body":"@span_id"}},{"html_id":"span_id=(span_id:Slice(UInt8)?)-instance-method","name":"span_id=","abstract":false,"args":[{"name":"span_id","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"}],"args_string":"(span_id : Slice(UInt8)?)","args_html":"(span_id : Slice(UInt8)?)","def":{"name":"span_id=","args":[{"name":"span_id","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"}],"visibility":"Public","body":"@span_id = span_id"}},{"html_id":"start_time_unix_nano:UInt64?-instance-method","name":"start_time_unix_nano","abstract":false,"def":{"name":"start_time_unix_nano","return_type":"UInt64 | ::Nil","visibility":"Public","body":"@start_time_unix_nano"}},{"html_id":"start_time_unix_nano=(start_time_unix_nano:UInt64?)-instance-method","name":"start_time_unix_nano=","abstract":false,"args":[{"name":"start_time_unix_nano","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"}],"args_string":"(start_time_unix_nano : UInt64?)","args_html":"(start_time_unix_nano : UInt64?)","def":{"name":"start_time_unix_nano=","args":[{"name":"start_time_unix_nano","external_name":"start_time_unix_nano","restriction":"UInt64 | ::Nil"}],"visibility":"Public","body":"@start_time_unix_nano = start_time_unix_nano"}},{"html_id":"status:Status?-instance-method","name":"status","abstract":false,"def":{"name":"status","return_type":"Status | ::Nil","visibility":"Public","body":"@status"}},{"html_id":"status=(status:Status?)-instance-method","name":"status=","abstract":false,"args":[{"name":"status","external_name":"status","restriction":"Status | ::Nil"}],"args_string":"(status : Status?)","args_html":"(status : <a href=\"../../../../OpenTelemetry/Proto/Trace/V1/Status.html\">Status</a>?)","def":{"name":"status=","args":[{"name":"status","external_name":"status","restriction":"Status | ::Nil"}],"visibility":"Public","body":"@status = status"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_673 = @trace_id\n__temp_674 = __temp_673.is_a?(Enum) || (__temp_673.is_a?(Array) && __temp_673.first?.is_a?(Enum))\n__temp_675 = ::Protobuf::WIRE_TYPES.fetch(:bytes, __temp_674 ? 0 : 2)\nif !@trace_id.nil?\n  buf.write_info(1, __temp_675)\n  buf.write_bytes(@trace_id.not_nil!)\nend\n__temp_676 = @span_id\n__temp_677 = __temp_676.is_a?(Enum) || (__temp_676.is_a?(Array) && __temp_676.first?.is_a?(Enum))\n__temp_678 = ::Protobuf::WIRE_TYPES.fetch(:bytes, __temp_677 ? 0 : 2)\nif !@span_id.nil?\n  buf.write_info(2, __temp_678)\n  buf.write_bytes(@span_id.not_nil!)\nend\n__temp_679 = @trace_state\n__temp_680 = __temp_679.is_a?(Enum) || (__temp_679.is_a?(Array) && __temp_679.first?.is_a?(Enum))\n__temp_681 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_680 ? 0 : 2)\nif !@trace_state.nil?\n  buf.write_info(3, __temp_681)\n  buf.write_string(@trace_state.not_nil!)\nend\n__temp_682 = @parent_span_id\n__temp_683 = __temp_682.is_a?(Enum) || (__temp_682.is_a?(Array) && __temp_682.first?.is_a?(Enum))\n__temp_684 = ::Protobuf::WIRE_TYPES.fetch(:bytes, __temp_683 ? 0 : 2)\nif !@parent_span_id.nil?\n  buf.write_info(4, __temp_684)\n  buf.write_bytes(@parent_span_id.not_nil!)\nend\n__temp_685 = @name\n__temp_686 = __temp_685.is_a?(Enum) || (__temp_685.is_a?(Array) && __temp_685.first?.is_a?(Enum))\n__temp_687 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_686 ? 0 : 2)\nif !@name.nil?\n  buf.write_info(5, __temp_687)\n  buf.write_string(@name.not_nil!)\nend\n__temp_688 = @kind\n__temp_689 = __temp_688.is_a?(Enum) || (__temp_688.is_a?(Array) && __temp_688.first?.is_a?(Enum))\n__temp_690 = ::Protobuf::WIRE_TYPES.fetch(Span::SpanKind, __temp_689 ? 0 : 2)\nif !@kind.nil?\n  buf.write_info(6, __temp_690)\n  buf.write_message(@kind.not_nil!)\nend\n__temp_691 = @start_time_unix_nano\n__temp_692 = __temp_691.is_a?(Enum) || (__temp_691.is_a?(Array) && __temp_691.first?.is_a?(Enum))\n__temp_693 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_692 ? 0 : 2)\nif !@start_time_unix_nano.nil?\n  buf.write_info(7, __temp_693)\n  buf.write_fixed64(@start_time_unix_nano.not_nil!)\nend\n__temp_694 = @end_time_unix_nano\n__temp_695 = __temp_694.is_a?(Enum) || (__temp_694.is_a?(Array) && __temp_694.first?.is_a?(Enum))\n__temp_696 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_695 ? 0 : 2)\nif !@end_time_unix_nano.nil?\n  buf.write_info(8, __temp_696)\n  buf.write_fixed64(@end_time_unix_nano.not_nil!)\nend\n__temp_697 = @attributes\n__temp_698 = __temp_697.is_a?(Enum) || (__temp_697.is_a?(Array) && __temp_697.first?.is_a?(Enum))\n__temp_699 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Common::V1::KeyValue, __temp_698 ? 0 : 2)\nif !@attributes.nil?\n  @attributes.not_nil!.each do |item|\n    buf.write_info(9, __temp_699)\n    buf.write_message(item)\n  end\nend\n__temp_700 = @dropped_attributes_count\n__temp_701 = __temp_700.is_a?(Enum) || (__temp_700.is_a?(Array) && __temp_700.first?.is_a?(Enum))\n__temp_702 = ::Protobuf::WIRE_TYPES.fetch(:uint32, __temp_701 ? 0 : 2)\nif !@dropped_attributes_count.nil?\n  buf.write_info(10, __temp_702)\n  buf.write_uint32(@dropped_attributes_count.not_nil!)\nend\n__temp_703 = @events\n__temp_704 = __temp_703.is_a?(Enum) || (__temp_703.is_a?(Array) && __temp_703.first?.is_a?(Enum))\n__temp_705 = ::Protobuf::WIRE_TYPES.fetch(Span::Event, __temp_704 ? 0 : 2)\nif !@events.nil?\n  @events.not_nil!.each do |item|\n    buf.write_info(11, __temp_705)\n    buf.write_message(item)\n  end\nend\n__temp_706 = @dropped_events_count\n__temp_707 = __temp_706.is_a?(Enum) || (__temp_706.is_a?(Array) && __temp_706.first?.is_a?(Enum))\n__temp_708 = ::Protobuf::WIRE_TYPES.fetch(:uint32, __temp_707 ? 0 : 2)\nif !@dropped_events_count.nil?\n  buf.write_info(12, __temp_708)\n  buf.write_uint32(@dropped_events_count.not_nil!)\nend\n__temp_709 = @links\n__temp_710 = __temp_709.is_a?(Enum) || (__temp_709.is_a?(Array) && __temp_709.first?.is_a?(Enum))\n__temp_711 = ::Protobuf::WIRE_TYPES.fetch(Span::Link, __temp_710 ? 0 : 2)\nif !@links.nil?\n  @links.not_nil!.each do |item|\n    buf.write_info(13, __temp_711)\n    buf.write_message(item)\n  end\nend\n__temp_712 = @dropped_links_count\n__temp_713 = __temp_712.is_a?(Enum) || (__temp_712.is_a?(Array) && __temp_712.first?.is_a?(Enum))\n__temp_714 = ::Protobuf::WIRE_TYPES.fetch(:uint32, __temp_713 ? 0 : 2)\nif !@dropped_links_count.nil?\n  buf.write_info(14, __temp_714)\n  buf.write_uint32(@dropped_links_count.not_nil!)\nend\n__temp_715 = @status\n__temp_716 = __temp_715.is_a?(Enum) || (__temp_715.is_a?(Array) && __temp_715.first?.is_a?(Enum))\n__temp_717 = ::Protobuf::WIRE_TYPES.fetch(Status, __temp_716 ? 0 : 2)\nif !@status.nil?\n  buf.write_info(15, __temp_717)\n  buf.write_message(@status.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}},{"html_id":"trace_id:Slice(UInt8)?-instance-method","name":"trace_id","abstract":false,"def":{"name":"trace_id","return_type":"Slice(UInt8) | ::Nil","visibility":"Public","body":"@trace_id"}},{"html_id":"trace_id=(trace_id:Slice(UInt8)?)-instance-method","name":"trace_id=","abstract":false,"args":[{"name":"trace_id","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"}],"args_string":"(trace_id : Slice(UInt8)?)","args_html":"(trace_id : Slice(UInt8)?)","def":{"name":"trace_id=","args":[{"name":"trace_id","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"}],"visibility":"Public","body":"@trace_id = trace_id"}},{"html_id":"trace_state:String?-instance-method","name":"trace_state","abstract":false,"def":{"name":"trace_state","return_type":"String | ::Nil","visibility":"Public","body":"@trace_state"}},{"html_id":"trace_state=(trace_state:String?)-instance-method","name":"trace_state=","abstract":false,"args":[{"name":"trace_state","external_name":"trace_state","restriction":"String | ::Nil"}],"args_string":"(trace_state : String?)","args_html":"(trace_state : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"trace_state=","args":[{"name":"trace_state","external_name":"trace_state","restriction":"String | ::Nil"}],"visibility":"Public","body":"@trace_state = trace_state"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/Span/Event","path":"OpenTelemetry/Proto/Trace/V1/Span/Event.html","kind":"struct","full_name":"OpenTelemetry::Proto::Trace::V1::Span::Event","name":"Event","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/trace.pb.cr","line_number":61,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :time_unix_nano, pb_type: :fixed64, crystal_type: UInt64, cast_type: UInt64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :name, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}, 3 => {name: :attributes, pb_type: OpenTelemetry::Proto::Common::V1::KeyValue, crystal_type: OpenTelemetry::Proto::Common::V1::KeyValue, cast_type: Array(OpenTelemetry::Proto::Common::V1::KeyValue)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 4 => {name: :dropped_attributes_count, pb_type: :uint32, crystal_type: UInt32, cast_type: UInt32?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/Span","kind":"struct","full_name":"OpenTelemetry::Proto::Trace::V1::Span","name":"Span"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(time_unix_nano:UInt64?=nil,name:String?=nil,attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?=nil,dropped_attributes_count:UInt32?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"time_unix_nano","default_value":"nil","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"name","default_value":"nil","external_name":"name","restriction":"String | ::Nil"},{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"dropped_attributes_count","default_value":"nil","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"}],"args_string":"(time_unix_nano : UInt64? = nil, name : String? = nil, attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)? = nil, dropped_attributes_count : UInt32? = nil)","args_html":"(time_unix_nano : UInt64? = <span class=\"n\">nil</span>, name : <a href=\"../../../../../String.html\">String</a>? = <span class=\"n\">nil</span>, attributes : Array(<a href=\"../../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)? = <span class=\"n\">nil</span>, dropped_attributes_count : UInt32? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"time_unix_nano","default_value":"nil","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"},{"name":"name","default_value":"nil","external_name":"name","restriction":"String | ::Nil"},{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"dropped_attributes_count","default_value":"nil","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(time_unix_nano, name, attributes, dropped_attributes_count)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"time_unix_nano\" == key\n  return self.time_unix_nano\nend\nif \"name\" == key\n  return self.name\nend\nif \"attributes\" == key\n  return self.attributes\nend\nif \"dropped_attributes_count\" == key\n  return self.dropped_attributes_count\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?-instance-method","name":"attributes","abstract":false,"def":{"name":"attributes","return_type":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil","visibility":"Public","body":"@attributes"}},{"html_id":"attributes=(attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)-instance-method","name":"attributes=","abstract":false,"args":[{"name":"attributes","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"args_string":"(attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)","args_html":"(attributes : Array(<a href=\"../../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)?)","def":{"name":"attributes=","args":[{"name":"attributes","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"visibility":"Public","body":"@attributes = attributes"}},{"html_id":"dropped_attributes_count:UInt32?-instance-method","name":"dropped_attributes_count","abstract":false,"def":{"name":"dropped_attributes_count","return_type":"UInt32 | ::Nil","visibility":"Public","body":"@dropped_attributes_count"}},{"html_id":"dropped_attributes_count=(dropped_attributes_count:UInt32?)-instance-method","name":"dropped_attributes_count=","abstract":false,"args":[{"name":"dropped_attributes_count","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"}],"args_string":"(dropped_attributes_count : UInt32?)","args_html":"(dropped_attributes_count : UInt32?)","def":{"name":"dropped_attributes_count=","args":[{"name":"dropped_attributes_count","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"}],"visibility":"Public","body":"@dropped_attributes_count = dropped_attributes_count"}},{"html_id":"name:String?-instance-method","name":"name","abstract":false,"def":{"name":"name","return_type":"String | ::Nil","visibility":"Public","body":"@name"}},{"html_id":"name=(name:String?)-instance-method","name":"name=","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String | ::Nil"}],"args_string":"(name : String?)","args_html":"(name : <a href=\"../../../../../String.html\">String</a>?)","def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String | ::Nil"}],"visibility":"Public","body":"@name = name"}},{"html_id":"time_unix_nano:UInt64?-instance-method","name":"time_unix_nano","abstract":false,"def":{"name":"time_unix_nano","return_type":"UInt64 | ::Nil","visibility":"Public","body":"@time_unix_nano"}},{"html_id":"time_unix_nano=(time_unix_nano:UInt64?)-instance-method","name":"time_unix_nano=","abstract":false,"args":[{"name":"time_unix_nano","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"}],"args_string":"(time_unix_nano : UInt64?)","args_html":"(time_unix_nano : UInt64?)","def":{"name":"time_unix_nano=","args":[{"name":"time_unix_nano","external_name":"time_unix_nano","restriction":"UInt64 | ::Nil"}],"visibility":"Public","body":"@time_unix_nano = time_unix_nano"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_580 = @time_unix_nano\n__temp_581 = __temp_580.is_a?(Enum) || (__temp_580.is_a?(Array) && __temp_580.first?.is_a?(Enum))\n__temp_582 = ::Protobuf::WIRE_TYPES.fetch(:fixed64, __temp_581 ? 0 : 2)\nif !@time_unix_nano.nil?\n  buf.write_info(1, __temp_582)\n  buf.write_fixed64(@time_unix_nano.not_nil!)\nend\n__temp_583 = @name\n__temp_584 = __temp_583.is_a?(Enum) || (__temp_583.is_a?(Array) && __temp_583.first?.is_a?(Enum))\n__temp_585 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_584 ? 0 : 2)\nif !@name.nil?\n  buf.write_info(2, __temp_585)\n  buf.write_string(@name.not_nil!)\nend\n__temp_586 = @attributes\n__temp_587 = __temp_586.is_a?(Enum) || (__temp_586.is_a?(Array) && __temp_586.first?.is_a?(Enum))\n__temp_588 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Common::V1::KeyValue, __temp_587 ? 0 : 2)\nif !@attributes.nil?\n  @attributes.not_nil!.each do |item|\n    buf.write_info(3, __temp_588)\n    buf.write_message(item)\n  end\nend\n__temp_589 = @dropped_attributes_count\n__temp_590 = __temp_589.is_a?(Enum) || (__temp_589.is_a?(Array) && __temp_589.first?.is_a?(Enum))\n__temp_591 = ::Protobuf::WIRE_TYPES.fetch(:uint32, __temp_590 ? 0 : 2)\nif !@dropped_attributes_count.nil?\n  buf.write_info(4, __temp_591)\n  buf.write_uint32(@dropped_attributes_count.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/Span/Link","path":"OpenTelemetry/Proto/Trace/V1/Span/Link.html","kind":"struct","full_name":"OpenTelemetry::Proto::Trace::V1::Span::Link","name":"Link","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/trace.pb.cr","line_number":72,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :trace_id, pb_type: :bytes, crystal_type: Slice(UInt8), cast_type: Slice(UInt8)?, native: true, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :span_id, pb_type: :bytes, crystal_type: Slice(UInt8), cast_type: Slice(UInt8)?, native: true, optional: true, repeated: false, default: nil, packed: false}, 3 => {name: :trace_state, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}, 4 => {name: :attributes, pb_type: OpenTelemetry::Proto::Common::V1::KeyValue, crystal_type: OpenTelemetry::Proto::Common::V1::KeyValue, cast_type: Array(OpenTelemetry::Proto::Common::V1::KeyValue)?, native: false, optional: true, repeated: true, default: nil, packed: false}, 5 => {name: :dropped_attributes_count, pb_type: :uint32, crystal_type: UInt32, cast_type: UInt32?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/Span","kind":"struct","full_name":"OpenTelemetry::Proto::Trace::V1::Span","name":"Span"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(trace_id:Slice(UInt8)?=nil,span_id:Slice(UInt8)?=nil,trace_state:String?=nil,attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?=nil,dropped_attributes_count:UInt32?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"trace_id","default_value":"nil","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"span_id","default_value":"nil","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"trace_state","default_value":"nil","external_name":"trace_state","restriction":"String | ::Nil"},{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"dropped_attributes_count","default_value":"nil","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"}],"args_string":"(trace_id : Slice(UInt8)? = nil, span_id : Slice(UInt8)? = nil, trace_state : String? = nil, attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)? = nil, dropped_attributes_count : UInt32? = nil)","args_html":"(trace_id : Slice(UInt8)? = <span class=\"n\">nil</span>, span_id : Slice(UInt8)? = <span class=\"n\">nil</span>, trace_state : <a href=\"../../../../../String.html\">String</a>? = <span class=\"n\">nil</span>, attributes : Array(<a href=\"../../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)? = <span class=\"n\">nil</span>, dropped_attributes_count : UInt32? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"trace_id","default_value":"nil","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"span_id","default_value":"nil","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"},{"name":"trace_state","default_value":"nil","external_name":"trace_state","restriction":"String | ::Nil"},{"name":"attributes","default_value":"nil","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"},{"name":"dropped_attributes_count","default_value":"nil","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(trace_id, span_id, trace_state, attributes, dropped_attributes_count)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"trace_id\" == key\n  return self.trace_id\nend\nif \"span_id\" == key\n  return self.span_id\nend\nif \"trace_state\" == key\n  return self.trace_state\nend\nif \"attributes\" == key\n  return self.attributes\nend\nif \"dropped_attributes_count\" == key\n  return self.dropped_attributes_count\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?-instance-method","name":"attributes","abstract":false,"def":{"name":"attributes","return_type":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil","visibility":"Public","body":"@attributes"}},{"html_id":"attributes=(attributes:Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)-instance-method","name":"attributes=","abstract":false,"args":[{"name":"attributes","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"args_string":"(attributes : Array(OpenTelemetry::Proto::Common::V1::KeyValue)?)","args_html":"(attributes : Array(<a href=\"../../../../../OpenTelemetry/Proto/Common/V1/KeyValue.html\">OpenTelemetry::Proto::Common::V1::KeyValue</a>)?)","def":{"name":"attributes=","args":[{"name":"attributes","external_name":"attributes","restriction":"Array(OpenTelemetry::Proto::Common::V1::KeyValue) | ::Nil"}],"visibility":"Public","body":"@attributes = attributes"}},{"html_id":"dropped_attributes_count:UInt32?-instance-method","name":"dropped_attributes_count","abstract":false,"def":{"name":"dropped_attributes_count","return_type":"UInt32 | ::Nil","visibility":"Public","body":"@dropped_attributes_count"}},{"html_id":"dropped_attributes_count=(dropped_attributes_count:UInt32?)-instance-method","name":"dropped_attributes_count=","abstract":false,"args":[{"name":"dropped_attributes_count","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"}],"args_string":"(dropped_attributes_count : UInt32?)","args_html":"(dropped_attributes_count : UInt32?)","def":{"name":"dropped_attributes_count=","args":[{"name":"dropped_attributes_count","external_name":"dropped_attributes_count","restriction":"UInt32 | ::Nil"}],"visibility":"Public","body":"@dropped_attributes_count = dropped_attributes_count"}},{"html_id":"span_id:Slice(UInt8)?-instance-method","name":"span_id","abstract":false,"def":{"name":"span_id","return_type":"Slice(UInt8) | ::Nil","visibility":"Public","body":"@span_id"}},{"html_id":"span_id=(span_id:Slice(UInt8)?)-instance-method","name":"span_id=","abstract":false,"args":[{"name":"span_id","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"}],"args_string":"(span_id : Slice(UInt8)?)","args_html":"(span_id : Slice(UInt8)?)","def":{"name":"span_id=","args":[{"name":"span_id","external_name":"span_id","restriction":"Slice(UInt8) | ::Nil"}],"visibility":"Public","body":"@span_id = span_id"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_608 = @trace_id\n__temp_609 = __temp_608.is_a?(Enum) || (__temp_608.is_a?(Array) && __temp_608.first?.is_a?(Enum))\n__temp_610 = ::Protobuf::WIRE_TYPES.fetch(:bytes, __temp_609 ? 0 : 2)\nif !@trace_id.nil?\n  buf.write_info(1, __temp_610)\n  buf.write_bytes(@trace_id.not_nil!)\nend\n__temp_611 = @span_id\n__temp_612 = __temp_611.is_a?(Enum) || (__temp_611.is_a?(Array) && __temp_611.first?.is_a?(Enum))\n__temp_613 = ::Protobuf::WIRE_TYPES.fetch(:bytes, __temp_612 ? 0 : 2)\nif !@span_id.nil?\n  buf.write_info(2, __temp_613)\n  buf.write_bytes(@span_id.not_nil!)\nend\n__temp_614 = @trace_state\n__temp_615 = __temp_614.is_a?(Enum) || (__temp_614.is_a?(Array) && __temp_614.first?.is_a?(Enum))\n__temp_616 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_615 ? 0 : 2)\nif !@trace_state.nil?\n  buf.write_info(3, __temp_616)\n  buf.write_string(@trace_state.not_nil!)\nend\n__temp_617 = @attributes\n__temp_618 = __temp_617.is_a?(Enum) || (__temp_617.is_a?(Array) && __temp_617.first?.is_a?(Enum))\n__temp_619 = ::Protobuf::WIRE_TYPES.fetch(OpenTelemetry::Proto::Common::V1::KeyValue, __temp_618 ? 0 : 2)\nif !@attributes.nil?\n  @attributes.not_nil!.each do |item|\n    buf.write_info(4, __temp_619)\n    buf.write_message(item)\n  end\nend\n__temp_620 = @dropped_attributes_count\n__temp_621 = __temp_620.is_a?(Enum) || (__temp_620.is_a?(Array) && __temp_620.first?.is_a?(Enum))\n__temp_622 = ::Protobuf::WIRE_TYPES.fetch(:uint32, __temp_621 ? 0 : 2)\nif !@dropped_attributes_count.nil?\n  buf.write_info(5, __temp_622)\n  buf.write_uint32(@dropped_attributes_count.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}},{"html_id":"trace_id:Slice(UInt8)?-instance-method","name":"trace_id","abstract":false,"def":{"name":"trace_id","return_type":"Slice(UInt8) | ::Nil","visibility":"Public","body":"@trace_id"}},{"html_id":"trace_id=(trace_id:Slice(UInt8)?)-instance-method","name":"trace_id=","abstract":false,"args":[{"name":"trace_id","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"}],"args_string":"(trace_id : Slice(UInt8)?)","args_html":"(trace_id : Slice(UInt8)?)","def":{"name":"trace_id=","args":[{"name":"trace_id","external_name":"trace_id","restriction":"Slice(UInt8) | ::Nil"}],"visibility":"Public","body":"@trace_id = trace_id"}},{"html_id":"trace_state:String?-instance-method","name":"trace_state","abstract":false,"def":{"name":"trace_state","return_type":"String | ::Nil","visibility":"Public","body":"@trace_state"}},{"html_id":"trace_state=(trace_state:String?)-instance-method","name":"trace_state=","abstract":false,"args":[{"name":"trace_state","external_name":"trace_state","restriction":"String | ::Nil"}],"args_string":"(trace_state : String?)","args_html":"(trace_state : <a href=\"../../../../../String.html\">String</a>?)","def":{"name":"trace_state=","args":[{"name":"trace_state","external_name":"trace_state","restriction":"String | ::Nil"}],"visibility":"Public","body":"@trace_state = trace_state"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/Span/SpanKind","path":"OpenTelemetry/Proto/Trace/V1/Span/SpanKind.html","kind":"enum","full_name":"OpenTelemetry::Proto::Trace::V1::Span::SpanKind","name":"SpanKind","abstract":false,"ancestors":[{"html_id":"opentelemetry-api/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"opentelemetry-api/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/trace.pb.cr","line_number":52,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"SPANKINDUNSPECIFIED","name":"SPANKINDUNSPECIFIED","value":"0"},{"id":"SPANKINDINTERNAL","name":"SPANKINDINTERNAL","value":"1"},{"id":"SPANKINDSERVER","name":"SPANKINDSERVER","value":"2"},{"id":"SPANKINDCLIENT","name":"SPANKINDCLIENT","value":"3"},{"id":"SPANKINDPRODUCER","name":"SPANKINDPRODUCER","value":"4"},{"id":"SPANKINDCONSUMER","name":"SPANKINDCONSUMER","value":"5"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/Span","kind":"struct","full_name":"OpenTelemetry::Proto::Trace::V1::Span","name":"Span"},"instance_methods":[{"html_id":"spankindclient?-instance-method","name":"spankindclient?","abstract":false,"location":{"filename":"src/proto/trace.pb.cr","line_number":56,"url":null},"def":{"name":"spankindclient?","visibility":"Public","body":"self == SPANKINDCLIENT"}},{"html_id":"spankindconsumer?-instance-method","name":"spankindconsumer?","abstract":false,"location":{"filename":"src/proto/trace.pb.cr","line_number":58,"url":null},"def":{"name":"spankindconsumer?","visibility":"Public","body":"self == SPANKINDCONSUMER"}},{"html_id":"spankindinternal?-instance-method","name":"spankindinternal?","abstract":false,"location":{"filename":"src/proto/trace.pb.cr","line_number":54,"url":null},"def":{"name":"spankindinternal?","visibility":"Public","body":"self == SPANKINDINTERNAL"}},{"html_id":"spankindproducer?-instance-method","name":"spankindproducer?","abstract":false,"location":{"filename":"src/proto/trace.pb.cr","line_number":57,"url":null},"def":{"name":"spankindproducer?","visibility":"Public","body":"self == SPANKINDPRODUCER"}},{"html_id":"spankindserver?-instance-method","name":"spankindserver?","abstract":false,"location":{"filename":"src/proto/trace.pb.cr","line_number":55,"url":null},"def":{"name":"spankindserver?","visibility":"Public","body":"self == SPANKINDSERVER"}},{"html_id":"spankindunspecified?-instance-method","name":"spankindunspecified?","abstract":false,"location":{"filename":"src/proto/trace.pb.cr","line_number":53,"url":null},"def":{"name":"spankindunspecified?","visibility":"Public","body":"self == SPANKINDUNSPECIFIED"}}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/Status","path":"OpenTelemetry/Proto/Trace/V1/Status.html","kind":"struct","full_name":"OpenTelemetry::Proto::Trace::V1::Status","name":"Status","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/trace.pb.cr","line_number":103,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{2 => {name: :message, pb_type: :string, crystal_type: String, cast_type: String?, native: true, optional: true, repeated: false, default: nil, packed: false}, 3 => {name: :code, pb_type: Status::StatusCode, crystal_type: Status::StatusCode, cast_type: Status::StatusCode?, native: false, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1","kind":"module","full_name":"OpenTelemetry::Proto::Trace::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(message:String?=nil,code:Status::StatusCode?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"message","default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"code","default_value":"nil","external_name":"code","restriction":"Status::StatusCode | ::Nil"}],"args_string":"(message : String? = nil, code : Status::StatusCode? = nil)","args_html":"(message : <a href=\"../../../../String.html\">String</a>? = <span class=\"n\">nil</span>, code : <a href=\"../../../../OpenTelemetry/Proto/Trace/V1/Status/StatusCode.html\">Status::StatusCode</a>? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"message","default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"code","default_value":"nil","external_name":"code","restriction":"Status::StatusCode | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(message, code)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"message\" == key\n  return self.message\nend\nif \"code\" == key\n  return self.code\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"code:Status::StatusCode?-instance-method","name":"code","abstract":false,"def":{"name":"code","return_type":"Status::StatusCode | ::Nil","visibility":"Public","body":"@code"}},{"html_id":"code=(code:Status::StatusCode?)-instance-method","name":"code=","abstract":false,"args":[{"name":"code","external_name":"code","restriction":"Status::StatusCode | ::Nil"}],"args_string":"(code : Status::StatusCode?)","args_html":"(code : <a href=\"../../../../OpenTelemetry/Proto/Trace/V1/Status/StatusCode.html\">Status::StatusCode</a>?)","def":{"name":"code=","args":[{"name":"code","external_name":"code","restriction":"Status::StatusCode | ::Nil"}],"visibility":"Public","body":"@code = code"}},{"html_id":"message:String?-instance-method","name":"message","abstract":false,"def":{"name":"message","return_type":"String | ::Nil","visibility":"Public","body":"@message"}},{"html_id":"message=(message:String?)-instance-method","name":"message=","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String | ::Nil"}],"args_string":"(message : String?)","args_html":"(message : <a href=\"../../../../String.html\">String</a>?)","def":{"name":"message=","args":[{"name":"message","external_name":"message","restriction":"String | ::Nil"}],"visibility":"Public","body":"@message = message"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_725 = @message\n__temp_726 = __temp_725.is_a?(Enum) || (__temp_725.is_a?(Array) && __temp_725.first?.is_a?(Enum))\n__temp_727 = ::Protobuf::WIRE_TYPES.fetch(:string, __temp_726 ? 0 : 2)\nif !@message.nil?\n  buf.write_info(2, __temp_727)\n  buf.write_string(@message.not_nil!)\nend\n__temp_728 = @code\n__temp_729 = __temp_728.is_a?(Enum) || (__temp_728.is_a?(Array) && __temp_728.first?.is_a?(Enum))\n__temp_730 = ::Protobuf::WIRE_TYPES.fetch(Status::StatusCode, __temp_729 ? 0 : 2)\nif !@code.nil?\n  buf.write_info(3, __temp_730)\n  buf.write_message(@code.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/Status/StatusCode","path":"OpenTelemetry/Proto/Trace/V1/Status/StatusCode.html","kind":"enum","full_name":"OpenTelemetry::Proto::Trace::V1::Status::StatusCode","name":"StatusCode","abstract":false,"ancestors":[{"html_id":"opentelemetry-api/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"opentelemetry-api/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/trace.pb.cr","line_number":105,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"STATUSCODEUNSET","name":"STATUSCODEUNSET","value":"0"},{"id":"STATUSCODEOK","name":"STATUSCODEOK","value":"1"},{"id":"STATUSCODEERROR","name":"STATUSCODEERROR","value":"2"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/Status","kind":"struct","full_name":"OpenTelemetry::Proto::Trace::V1::Status","name":"Status"},"instance_methods":[{"html_id":"statuscodeerror?-instance-method","name":"statuscodeerror?","abstract":false,"location":{"filename":"src/proto/trace.pb.cr","line_number":108,"url":null},"def":{"name":"statuscodeerror?","visibility":"Public","body":"self == STATUSCODEERROR"}},{"html_id":"statuscodeok?-instance-method","name":"statuscodeok?","abstract":false,"location":{"filename":"src/proto/trace.pb.cr","line_number":107,"url":null},"def":{"name":"statuscodeok?","visibility":"Public","body":"self == STATUSCODEOK"}},{"html_id":"statuscodeunset?-instance-method","name":"statuscodeunset?","abstract":false,"location":{"filename":"src/proto/trace.pb.cr","line_number":106,"url":null},"def":{"name":"statuscodeunset?","visibility":"Public","body":"self == STATUSCODEUNSET"}}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/TraceConfig","path":"OpenTelemetry/Proto/Trace/V1/TraceConfig.html","kind":"struct","full_name":"OpenTelemetry::Proto::Trace::V1::TraceConfig","name":"TraceConfig","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/trace_config.pb.cr","line_number":8,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :constant_sampler, pb_type: ConstantSampler, crystal_type: ConstantSampler, cast_type: ConstantSampler?, native: false, optional: true, repeated: false, default: nil, packed: false}, 2 => {name: :trace_id_ratio_based, pb_type: TraceIdRatioBased, crystal_type: TraceIdRatioBased, cast_type: TraceIdRatioBased?, native: false, optional: true, repeated: false, default: nil, packed: false}, 3 => {name: :rate_limiting_sampler, pb_type: RateLimitingSampler, crystal_type: RateLimitingSampler, cast_type: RateLimitingSampler?, native: false, optional: true, repeated: false, default: nil, packed: false}, 4 => {name: :max_number_of_attributes, pb_type: :int64, crystal_type: Int64, cast_type: Int64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 5 => {name: :max_number_of_timed_events, pb_type: :int64, crystal_type: Int64, cast_type: Int64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 6 => {name: :max_number_of_attributes_per_timed_event, pb_type: :int64, crystal_type: Int64, cast_type: Int64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 7 => {name: :max_number_of_links, pb_type: :int64, crystal_type: Int64, cast_type: Int64?, native: true, optional: true, repeated: false, default: nil, packed: false}, 8 => {name: :max_number_of_attributes_per_link, pb_type: :int64, crystal_type: Int64, cast_type: Int64?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1","kind":"module","full_name":"OpenTelemetry::Proto::Trace::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(constant_sampler:ConstantSampler?=nil,trace_id_ratio_based:TraceIdRatioBased?=nil,rate_limiting_sampler:RateLimitingSampler?=nil,max_number_of_attributes:Int64?=nil,max_number_of_timed_events:Int64?=nil,max_number_of_attributes_per_timed_event:Int64?=nil,max_number_of_links:Int64?=nil,max_number_of_attributes_per_link:Int64?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"constant_sampler","default_value":"nil","external_name":"constant_sampler","restriction":"ConstantSampler | ::Nil"},{"name":"trace_id_ratio_based","default_value":"nil","external_name":"trace_id_ratio_based","restriction":"TraceIdRatioBased | ::Nil"},{"name":"rate_limiting_sampler","default_value":"nil","external_name":"rate_limiting_sampler","restriction":"RateLimitingSampler | ::Nil"},{"name":"max_number_of_attributes","default_value":"nil","external_name":"max_number_of_attributes","restriction":"Int64 | ::Nil"},{"name":"max_number_of_timed_events","default_value":"nil","external_name":"max_number_of_timed_events","restriction":"Int64 | ::Nil"},{"name":"max_number_of_attributes_per_timed_event","default_value":"nil","external_name":"max_number_of_attributes_per_timed_event","restriction":"Int64 | ::Nil"},{"name":"max_number_of_links","default_value":"nil","external_name":"max_number_of_links","restriction":"Int64 | ::Nil"},{"name":"max_number_of_attributes_per_link","default_value":"nil","external_name":"max_number_of_attributes_per_link","restriction":"Int64 | ::Nil"}],"args_string":"(constant_sampler : ConstantSampler? = nil, trace_id_ratio_based : TraceIdRatioBased? = nil, rate_limiting_sampler : RateLimitingSampler? = nil, max_number_of_attributes : Int64? = nil, max_number_of_timed_events : Int64? = nil, max_number_of_attributes_per_timed_event : Int64? = nil, max_number_of_links : Int64? = nil, max_number_of_attributes_per_link : Int64? = nil)","args_html":"(constant_sampler : <a href=\"../../../../OpenTelemetry/Proto/Trace/V1/ConstantSampler.html\">ConstantSampler</a>? = <span class=\"n\">nil</span>, trace_id_ratio_based : <a href=\"../../../../OpenTelemetry/Proto/Trace/V1/TraceIdRatioBased.html\">TraceIdRatioBased</a>? = <span class=\"n\">nil</span>, rate_limiting_sampler : <a href=\"../../../../OpenTelemetry/Proto/Trace/V1/RateLimitingSampler.html\">RateLimitingSampler</a>? = <span class=\"n\">nil</span>, max_number_of_attributes : Int64? = <span class=\"n\">nil</span>, max_number_of_timed_events : Int64? = <span class=\"n\">nil</span>, max_number_of_attributes_per_timed_event : Int64? = <span class=\"n\">nil</span>, max_number_of_links : Int64? = <span class=\"n\">nil</span>, max_number_of_attributes_per_link : Int64? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"constant_sampler","default_value":"nil","external_name":"constant_sampler","restriction":"ConstantSampler | ::Nil"},{"name":"trace_id_ratio_based","default_value":"nil","external_name":"trace_id_ratio_based","restriction":"TraceIdRatioBased | ::Nil"},{"name":"rate_limiting_sampler","default_value":"nil","external_name":"rate_limiting_sampler","restriction":"RateLimitingSampler | ::Nil"},{"name":"max_number_of_attributes","default_value":"nil","external_name":"max_number_of_attributes","restriction":"Int64 | ::Nil"},{"name":"max_number_of_timed_events","default_value":"nil","external_name":"max_number_of_timed_events","restriction":"Int64 | ::Nil"},{"name":"max_number_of_attributes_per_timed_event","default_value":"nil","external_name":"max_number_of_attributes_per_timed_event","restriction":"Int64 | ::Nil"},{"name":"max_number_of_links","default_value":"nil","external_name":"max_number_of_links","restriction":"Int64 | ::Nil"},{"name":"max_number_of_attributes_per_link","default_value":"nil","external_name":"max_number_of_attributes_per_link","restriction":"Int64 | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(constant_sampler, trace_id_ratio_based, rate_limiting_sampler, max_number_of_attributes, max_number_of_timed_events, max_number_of_attributes_per_timed_event, max_number_of_links, max_number_of_attributes_per_link)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"constant_sampler\" == key\n  return self.constant_sampler\nend\nif \"trace_id_ratio_based\" == key\n  return self.trace_id_ratio_based\nend\nif \"rate_limiting_sampler\" == key\n  return self.rate_limiting_sampler\nend\nif \"max_number_of_attributes\" == key\n  return self.max_number_of_attributes\nend\nif \"max_number_of_timed_events\" == key\n  return self.max_number_of_timed_events\nend\nif \"max_number_of_attributes_per_timed_event\" == key\n  return self.max_number_of_attributes_per_timed_event\nend\nif \"max_number_of_links\" == key\n  return self.max_number_of_links\nend\nif \"max_number_of_attributes_per_link\" == key\n  return self.max_number_of_attributes_per_link\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"constant_sampler:ConstantSampler?-instance-method","name":"constant_sampler","abstract":false,"def":{"name":"constant_sampler","return_type":"ConstantSampler | ::Nil","visibility":"Public","body":"@constant_sampler"}},{"html_id":"constant_sampler=(constant_sampler:ConstantSampler?)-instance-method","name":"constant_sampler=","abstract":false,"args":[{"name":"constant_sampler","external_name":"constant_sampler","restriction":"ConstantSampler | ::Nil"}],"args_string":"(constant_sampler : ConstantSampler?)","args_html":"(constant_sampler : <a href=\"../../../../OpenTelemetry/Proto/Trace/V1/ConstantSampler.html\">ConstantSampler</a>?)","def":{"name":"constant_sampler=","args":[{"name":"constant_sampler","external_name":"constant_sampler","restriction":"ConstantSampler | ::Nil"}],"visibility":"Public","body":"@constant_sampler = constant_sampler"}},{"html_id":"max_number_of_attributes:Int64?-instance-method","name":"max_number_of_attributes","abstract":false,"def":{"name":"max_number_of_attributes","return_type":"Int64 | ::Nil","visibility":"Public","body":"@max_number_of_attributes"}},{"html_id":"max_number_of_attributes=(max_number_of_attributes:Int64?)-instance-method","name":"max_number_of_attributes=","abstract":false,"args":[{"name":"max_number_of_attributes","external_name":"max_number_of_attributes","restriction":"Int64 | ::Nil"}],"args_string":"(max_number_of_attributes : Int64?)","args_html":"(max_number_of_attributes : Int64?)","def":{"name":"max_number_of_attributes=","args":[{"name":"max_number_of_attributes","external_name":"max_number_of_attributes","restriction":"Int64 | ::Nil"}],"visibility":"Public","body":"@max_number_of_attributes = max_number_of_attributes"}},{"html_id":"max_number_of_attributes_per_link:Int64?-instance-method","name":"max_number_of_attributes_per_link","abstract":false,"def":{"name":"max_number_of_attributes_per_link","return_type":"Int64 | ::Nil","visibility":"Public","body":"@max_number_of_attributes_per_link"}},{"html_id":"max_number_of_attributes_per_link=(max_number_of_attributes_per_link:Int64?)-instance-method","name":"max_number_of_attributes_per_link=","abstract":false,"args":[{"name":"max_number_of_attributes_per_link","external_name":"max_number_of_attributes_per_link","restriction":"Int64 | ::Nil"}],"args_string":"(max_number_of_attributes_per_link : Int64?)","args_html":"(max_number_of_attributes_per_link : Int64?)","def":{"name":"max_number_of_attributes_per_link=","args":[{"name":"max_number_of_attributes_per_link","external_name":"max_number_of_attributes_per_link","restriction":"Int64 | ::Nil"}],"visibility":"Public","body":"@max_number_of_attributes_per_link = max_number_of_attributes_per_link"}},{"html_id":"max_number_of_attributes_per_timed_event:Int64?-instance-method","name":"max_number_of_attributes_per_timed_event","abstract":false,"def":{"name":"max_number_of_attributes_per_timed_event","return_type":"Int64 | ::Nil","visibility":"Public","body":"@max_number_of_attributes_per_timed_event"}},{"html_id":"max_number_of_attributes_per_timed_event=(max_number_of_attributes_per_timed_event:Int64?)-instance-method","name":"max_number_of_attributes_per_timed_event=","abstract":false,"args":[{"name":"max_number_of_attributes_per_timed_event","external_name":"max_number_of_attributes_per_timed_event","restriction":"Int64 | ::Nil"}],"args_string":"(max_number_of_attributes_per_timed_event : Int64?)","args_html":"(max_number_of_attributes_per_timed_event : Int64?)","def":{"name":"max_number_of_attributes_per_timed_event=","args":[{"name":"max_number_of_attributes_per_timed_event","external_name":"max_number_of_attributes_per_timed_event","restriction":"Int64 | ::Nil"}],"visibility":"Public","body":"@max_number_of_attributes_per_timed_event = max_number_of_attributes_per_timed_event"}},{"html_id":"max_number_of_links:Int64?-instance-method","name":"max_number_of_links","abstract":false,"def":{"name":"max_number_of_links","return_type":"Int64 | ::Nil","visibility":"Public","body":"@max_number_of_links"}},{"html_id":"max_number_of_links=(max_number_of_links:Int64?)-instance-method","name":"max_number_of_links=","abstract":false,"args":[{"name":"max_number_of_links","external_name":"max_number_of_links","restriction":"Int64 | ::Nil"}],"args_string":"(max_number_of_links : Int64?)","args_html":"(max_number_of_links : Int64?)","def":{"name":"max_number_of_links=","args":[{"name":"max_number_of_links","external_name":"max_number_of_links","restriction":"Int64 | ::Nil"}],"visibility":"Public","body":"@max_number_of_links = max_number_of_links"}},{"html_id":"max_number_of_timed_events:Int64?-instance-method","name":"max_number_of_timed_events","abstract":false,"def":{"name":"max_number_of_timed_events","return_type":"Int64 | ::Nil","visibility":"Public","body":"@max_number_of_timed_events"}},{"html_id":"max_number_of_timed_events=(max_number_of_timed_events:Int64?)-instance-method","name":"max_number_of_timed_events=","abstract":false,"args":[{"name":"max_number_of_timed_events","external_name":"max_number_of_timed_events","restriction":"Int64 | ::Nil"}],"args_string":"(max_number_of_timed_events : Int64?)","args_html":"(max_number_of_timed_events : Int64?)","def":{"name":"max_number_of_timed_events=","args":[{"name":"max_number_of_timed_events","external_name":"max_number_of_timed_events","restriction":"Int64 | ::Nil"}],"visibility":"Public","body":"@max_number_of_timed_events = max_number_of_timed_events"}},{"html_id":"rate_limiting_sampler:RateLimitingSampler?-instance-method","name":"rate_limiting_sampler","abstract":false,"def":{"name":"rate_limiting_sampler","return_type":"RateLimitingSampler | ::Nil","visibility":"Public","body":"@rate_limiting_sampler"}},{"html_id":"rate_limiting_sampler=(rate_limiting_sampler:RateLimitingSampler?)-instance-method","name":"rate_limiting_sampler=","abstract":false,"args":[{"name":"rate_limiting_sampler","external_name":"rate_limiting_sampler","restriction":"RateLimitingSampler | ::Nil"}],"args_string":"(rate_limiting_sampler : RateLimitingSampler?)","args_html":"(rate_limiting_sampler : <a href=\"../../../../OpenTelemetry/Proto/Trace/V1/RateLimitingSampler.html\">RateLimitingSampler</a>?)","def":{"name":"rate_limiting_sampler=","args":[{"name":"rate_limiting_sampler","external_name":"rate_limiting_sampler","restriction":"RateLimitingSampler | ::Nil"}],"visibility":"Public","body":"@rate_limiting_sampler = rate_limiting_sampler"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1525 = @constant_sampler\n__temp_1526 = __temp_1525.is_a?(Enum) || (__temp_1525.is_a?(Array) && __temp_1525.first?.is_a?(Enum))\n__temp_1527 = ::Protobuf::WIRE_TYPES.fetch(ConstantSampler, __temp_1526 ? 0 : 2)\nif !@constant_sampler.nil?\n  buf.write_info(1, __temp_1527)\n  buf.write_message(@constant_sampler.not_nil!)\nend\n__temp_1528 = @trace_id_ratio_based\n__temp_1529 = __temp_1528.is_a?(Enum) || (__temp_1528.is_a?(Array) && __temp_1528.first?.is_a?(Enum))\n__temp_1530 = ::Protobuf::WIRE_TYPES.fetch(TraceIdRatioBased, __temp_1529 ? 0 : 2)\nif !@trace_id_ratio_based.nil?\n  buf.write_info(2, __temp_1530)\n  buf.write_message(@trace_id_ratio_based.not_nil!)\nend\n__temp_1531 = @rate_limiting_sampler\n__temp_1532 = __temp_1531.is_a?(Enum) || (__temp_1531.is_a?(Array) && __temp_1531.first?.is_a?(Enum))\n__temp_1533 = ::Protobuf::WIRE_TYPES.fetch(RateLimitingSampler, __temp_1532 ? 0 : 2)\nif !@rate_limiting_sampler.nil?\n  buf.write_info(3, __temp_1533)\n  buf.write_message(@rate_limiting_sampler.not_nil!)\nend\n__temp_1534 = @max_number_of_attributes\n__temp_1535 = __temp_1534.is_a?(Enum) || (__temp_1534.is_a?(Array) && __temp_1534.first?.is_a?(Enum))\n__temp_1536 = ::Protobuf::WIRE_TYPES.fetch(:int64, __temp_1535 ? 0 : 2)\nif !@max_number_of_attributes.nil?\n  buf.write_info(4, __temp_1536)\n  buf.write_int64(@max_number_of_attributes.not_nil!)\nend\n__temp_1537 = @max_number_of_timed_events\n__temp_1538 = __temp_1537.is_a?(Enum) || (__temp_1537.is_a?(Array) && __temp_1537.first?.is_a?(Enum))\n__temp_1539 = ::Protobuf::WIRE_TYPES.fetch(:int64, __temp_1538 ? 0 : 2)\nif !@max_number_of_timed_events.nil?\n  buf.write_info(5, __temp_1539)\n  buf.write_int64(@max_number_of_timed_events.not_nil!)\nend\n__temp_1540 = @max_number_of_attributes_per_timed_event\n__temp_1541 = __temp_1540.is_a?(Enum) || (__temp_1540.is_a?(Array) && __temp_1540.first?.is_a?(Enum))\n__temp_1542 = ::Protobuf::WIRE_TYPES.fetch(:int64, __temp_1541 ? 0 : 2)\nif !@max_number_of_attributes_per_timed_event.nil?\n  buf.write_info(6, __temp_1542)\n  buf.write_int64(@max_number_of_attributes_per_timed_event.not_nil!)\nend\n__temp_1543 = @max_number_of_links\n__temp_1544 = __temp_1543.is_a?(Enum) || (__temp_1543.is_a?(Array) && __temp_1543.first?.is_a?(Enum))\n__temp_1545 = ::Protobuf::WIRE_TYPES.fetch(:int64, __temp_1544 ? 0 : 2)\nif !@max_number_of_links.nil?\n  buf.write_info(7, __temp_1545)\n  buf.write_int64(@max_number_of_links.not_nil!)\nend\n__temp_1546 = @max_number_of_attributes_per_link\n__temp_1547 = __temp_1546.is_a?(Enum) || (__temp_1546.is_a?(Array) && __temp_1546.first?.is_a?(Enum))\n__temp_1548 = ::Protobuf::WIRE_TYPES.fetch(:int64, __temp_1547 ? 0 : 2)\nif !@max_number_of_attributes_per_link.nil?\n  buf.write_info(8, __temp_1548)\n  buf.write_int64(@max_number_of_attributes_per_link.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}},{"html_id":"trace_id_ratio_based:TraceIdRatioBased?-instance-method","name":"trace_id_ratio_based","abstract":false,"def":{"name":"trace_id_ratio_based","return_type":"TraceIdRatioBased | ::Nil","visibility":"Public","body":"@trace_id_ratio_based"}},{"html_id":"trace_id_ratio_based=(trace_id_ratio_based:TraceIdRatioBased?)-instance-method","name":"trace_id_ratio_based=","abstract":false,"args":[{"name":"trace_id_ratio_based","external_name":"trace_id_ratio_based","restriction":"TraceIdRatioBased | ::Nil"}],"args_string":"(trace_id_ratio_based : TraceIdRatioBased?)","args_html":"(trace_id_ratio_based : <a href=\"../../../../OpenTelemetry/Proto/Trace/V1/TraceIdRatioBased.html\">TraceIdRatioBased</a>?)","def":{"name":"trace_id_ratio_based=","args":[{"name":"trace_id_ratio_based","external_name":"trace_id_ratio_based","restriction":"TraceIdRatioBased | ::Nil"}],"visibility":"Public","body":"@trace_id_ratio_based = trace_id_ratio_based"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/TraceIdRatioBased","path":"OpenTelemetry/Proto/Trace/V1/TraceIdRatioBased.html","kind":"struct","full_name":"OpenTelemetry::Proto::Trace::V1::TraceIdRatioBased","name":"TraceIdRatioBased","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/trace_config.pb.cr","line_number":36,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :sampling_ratio, pb_type: :double, crystal_type: Float64, cast_type: Float64?, native: true, optional: true, repeated: false, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1","kind":"module","full_name":"OpenTelemetry::Proto::Trace::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(sampling_ratio:Float64?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"sampling_ratio","default_value":"nil","external_name":"sampling_ratio","restriction":"Float64 | ::Nil"}],"args_string":"(sampling_ratio : Float64? = nil)","args_html":"(sampling_ratio : Float64? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"sampling_ratio","default_value":"nil","external_name":"sampling_ratio","restriction":"Float64 | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(sampling_ratio)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"sampling_ratio\" == key\n  return self.sampling_ratio\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"sampling_ratio:Float64?-instance-method","name":"sampling_ratio","abstract":false,"def":{"name":"sampling_ratio","return_type":"Float64 | ::Nil","visibility":"Public","body":"@sampling_ratio"}},{"html_id":"sampling_ratio=(sampling_ratio:Float64?)-instance-method","name":"sampling_ratio=","abstract":false,"args":[{"name":"sampling_ratio","external_name":"sampling_ratio","restriction":"Float64 | ::Nil"}],"args_string":"(sampling_ratio : Float64?)","args_html":"(sampling_ratio : Float64?)","def":{"name":"sampling_ratio=","args":[{"name":"sampling_ratio","external_name":"sampling_ratio","restriction":"Float64 | ::Nil"}],"visibility":"Public","body":"@sampling_ratio = sampling_ratio"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_1559 = @sampling_ratio\n__temp_1560 = __temp_1559.is_a?(Enum) || (__temp_1559.is_a?(Array) && __temp_1559.first?.is_a?(Enum))\n__temp_1561 = ::Protobuf::WIRE_TYPES.fetch(:double, __temp_1560 ? 0 : 2)\nif !@sampling_ratio.nil?\n  buf.write_info(1, __temp_1561)\n  buf.write_double(@sampling_ratio.not_nil!)\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1/TracesData","path":"OpenTelemetry/Proto/Trace/V1/TracesData.html","kind":"struct","full_name":"OpenTelemetry::Proto::Trace::V1::TracesData","name":"TracesData","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"},{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proto/trace.pb.cr","line_number":11,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FIELDS","name":"FIELDS","value":"{1 => {name: :resource_spans, pb_type: ResourceSpans, crystal_type: ResourceSpans, cast_type: Array(ResourceSpans)?, native: false, optional: true, repeated: true, default: nil, packed: false}} of Int32 => HashLiteral(Symbol, ASTNode)"}],"included_modules":[{"html_id":"opentelemetry-api/Protobuf/Message","kind":"module","full_name":"Protobuf::Message","name":"Message"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Proto/Trace/V1","kind":"module","full_name":"OpenTelemetry::Proto::Trace::V1","name":"V1"},"class_methods":[{"html_id":"from_protobuf(io)-class-method","name":"from_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","def":{"name":"from_protobuf","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"new(::Protobuf::Buffer.new(io))"}}],"constructors":[{"html_id":"new(buf:Protobuf::Buffer)-class-method","name":"new","abstract":false,"args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"args_string":"(buf : Protobuf::Buffer)","args_html":"(buf : Protobuf::Buffer)","def":{"name":"new","args":[{"name":"buf","external_name":"buf","restriction":"::Protobuf::Buffer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(buf)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(resource_spans:Array(ResourceSpans)?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"resource_spans","default_value":"nil","external_name":"resource_spans","restriction":"Array(ResourceSpans) | ::Nil"}],"args_string":"(resource_spans : Array(ResourceSpans)? = nil)","args_html":"(resource_spans : Array(<a href=\"../../../../OpenTelemetry/Proto/Trace/V1/ResourceSpans.html\">ResourceSpans</a>)? = <span class=\"n\">nil</span>)","def":{"name":"new","args":[{"name":"resource_spans","default_value":"nil","external_name":"resource_spans","restriction":"Array(ResourceSpans) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(resource_spans)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key:String)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : <a href=\"../../../../String.html\">String</a>)","def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"if \"resource_spans\" == key\n  return self.resource_spans\nend\nraise(::Protobuf::Error.new(\"Field not found: `#{key}`\"))\n"}},{"html_id":"resource_spans:Array(ResourceSpans)?-instance-method","name":"resource_spans","abstract":false,"def":{"name":"resource_spans","return_type":"Array(ResourceSpans) | ::Nil","visibility":"Public","body":"@resource_spans"}},{"html_id":"resource_spans=(resource_spans:Array(ResourceSpans)?)-instance-method","name":"resource_spans=","abstract":false,"args":[{"name":"resource_spans","external_name":"resource_spans","restriction":"Array(ResourceSpans) | ::Nil"}],"args_string":"(resource_spans : Array(ResourceSpans)?)","args_html":"(resource_spans : Array(<a href=\"../../../../OpenTelemetry/Proto/Trace/V1/ResourceSpans.html\">ResourceSpans</a>)?)","def":{"name":"resource_spans=","args":[{"name":"resource_spans","external_name":"resource_spans","restriction":"Array(ResourceSpans) | ::Nil"}],"visibility":"Public","body":"@resource_spans = resource_spans"}},{"html_id":"to_protobuf(io:IO,embedded=false)-instance-method","name":"to_protobuf","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"args_string":"(io : IO, embedded = false)","args_html":"(io : IO, embedded = <span class=\"n\">false</span>)","def":{"name":"to_protobuf","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"embedded","default_value":"false","external_name":"embedded","restriction":""}],"visibility":"Public","body":"buf = ::Protobuf::Buffer.new(io)\n__temp_497 = @resource_spans\n__temp_498 = __temp_497.is_a?(Enum) || (__temp_497.is_a?(Array) && __temp_497.first?.is_a?(Enum))\n__temp_499 = ::Protobuf::WIRE_TYPES.fetch(ResourceSpans, __temp_498 ? 0 : 2)\nif !@resource_spans.nil?\n  @resource_spans.not_nil!.each do |item|\n    buf.write_info(1, __temp_499)\n    buf.write_message(item)\n  end\nend\nio\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"def":{"name":"to_protobuf","visibility":"Public","body":"io = IO::Memory.new\nto_protobuf(io)\nio.rewind\n"}}]}]}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Provider","path":"OpenTelemetry/Provider.html","kind":"class","full_name":"OpenTelemetry::Provider","name":"Provider","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/provider.cr","line_number":8,"url":null},{"filename":"src/opentelemetry-api/provider/configuration.cr","line_number":4,"url":null},{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":7,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"opentelemetry-api/OpenTelemetry/LogProvider","kind":"class","full_name":"OpenTelemetry::LogProvider","name":"LogProvider"},{"html_id":"opentelemetry-api/OpenTelemetry/MeterProvider","kind":"class","full_name":"OpenTelemetry::MeterProvider","name":"MeterProvider"},{"html_id":"opentelemetry-api/OpenTelemetry/TraceProvider","kind":"class","full_name":"OpenTelemetry::TraceProvider","name":"TraceProvider"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"doc":"Provider is an abstract superclass of other specific providers, such as the TraceProvider\nor the MetricsProvider. It supplies some common faculties for dealing with configuration.","summary":"<p>Provider is an abstract superclass of other specific providers, such as the TraceProvider or the MetricsProvider.</p>","constructors":[{"html_id":"new(service_name:String=\"\",service_version:String=\"\",schema_url:String=\"\",exporter:Exporter?=nil,id_generator=\"unique\")-class-method","name":"new","abstract":false,"args":[{"name":"service_name","default_value":"\"\"","external_name":"service_name","restriction":"String"},{"name":"service_version","default_value":"\"\"","external_name":"service_version","restriction":"String"},{"name":"schema_url","default_value":"\"\"","external_name":"schema_url","restriction":"String"},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":"Exporter | ::Nil"},{"name":"id_generator","default_value":"\"unique\"","external_name":"id_generator","restriction":""}],"args_string":"(service_name : String = \"\", service_version : String = \"\", schema_url : String = \"\", exporter : Exporter? = nil, id_generator = \"unique\")","args_html":"(service_name : <a href=\"../String.html\">String</a> = <span class=\"s\">&quot;&quot;</span>, service_version : <a href=\"../String.html\">String</a> = <span class=\"s\">&quot;&quot;</span>, schema_url : <a href=\"../String.html\">String</a> = <span class=\"s\">&quot;&quot;</span>, exporter : <a href=\"../OpenTelemetry/Exporter.html\">Exporter</a>? = <span class=\"n\">nil</span>, id_generator = <span class=\"s\">&quot;unique&quot;</span>)","location":{"filename":"src/opentelemetry-api/provider.cr","line_number":22,"url":null},"def":{"name":"new","args":[{"name":"service_name","default_value":"\"\"","external_name":"service_name","restriction":"String"},{"name":"service_version","default_value":"\"\"","external_name":"service_version","restriction":"String"},{"name":"schema_url","default_value":"\"\"","external_name":"schema_url","restriction":"String"},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":"Exporter | ::Nil"},{"name":"id_generator","default_value":"\"unique\"","external_name":"id_generator","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(service_name, service_version, schema_url, exporter, id_generator)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(&block:Configuration::Factory->)-class-method","name":"new","abstract":false,"location":{"filename":"src/opentelemetry-api/provider.cr","line_number":16,"url":null},"def":{"name":"new","yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Configuration::Factory ->)"},"visibility":"Public","body":"_ = allocate\n_.initialize(&block) do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"config:Configuration-instance-method","name":"config","abstract":false,"location":{"filename":"src/opentelemetry-api/provider.cr","line_number":9,"url":null},"def":{"name":"config","return_type":"Configuration","visibility":"Public","body":"@config"}},{"html_id":"configure!(new_config)-instance-method","name":"configure!","abstract":false,"args":[{"name":"new_config","external_name":"new_config","restriction":""}],"args_string":"(new_config)","args_html":"(new_config)","location":{"filename":"src/opentelemetry-api/provider.cr","line_number":37,"url":null},"def":{"name":"configure!","args":[{"name":"new_config","external_name":"new_config","restriction":""}],"visibility":"Public","body":"@config = new_config.dup\nself\n"}},{"html_id":"exporter-instance-method","name":"exporter","abstract":false,"location":{"filename":"src/opentelemetry-api/provider.cr","line_number":85,"url":null},"def":{"name":"exporter","visibility":"Public","body":"@config.exporter"}},{"html_id":"exporter=(val)-instance-method","name":"exporter=","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/opentelemetry-api/provider.cr","line_number":89,"url":null},"def":{"name":"exporter=","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"@config = Configuration::Factory.build(@config) do |cfg|\n  cfg.exporter = val\nend"}},{"html_id":"id_generator-instance-method","name":"id_generator","abstract":false,"location":{"filename":"src/opentelemetry-api/provider.cr","line_number":95,"url":null},"def":{"name":"id_generator","visibility":"Public","body":"@config.id_generator"}},{"html_id":"id_generator=(val)-instance-method","name":"id_generator=","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/opentelemetry-api/provider.cr","line_number":99,"url":null},"def":{"name":"id_generator=","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"@config = Configuration::Factory.build(@config) do |cfg|\n  cfg.id_generator = val\nend"}},{"html_id":"merge_configuration(secondary_config)-instance-method","name":"merge_configuration","abstract":false,"args":[{"name":"secondary_config","external_name":"secondary_config","restriction":""}],"args_string":"(secondary_config)","args_html":"(secondary_config)","location":{"filename":"src/opentelemetry-api/provider.cr","line_number":43,"url":null},"def":{"name":"merge_configuration","args":[{"name":"secondary_config","external_name":"secondary_config","restriction":""}],"visibility":"Public","body":"@config = Configuration::Factory.build(@config) do |cfg|\n  if cfg.service_name.empty? || (cfg.service_name =~ (/service_[a-f\\d]{8}-[a-f\\d]{4}-[a-f\\d]{4}-[a-f\\d]{4}-[a-f\\d]{12}/))\n    cfg.service_name = secondary_config.service_name\n  end\n  if cfg.service_version.empty?\n    cfg.service_version = secondary_config.service_version\n  end\n  if cfg.schema_url.empty?\n    cfg.schema_url = secondary_config.schema_url\n  end\n  if cfg.exporter.nil? || cfg.exporter.try(&.exporter).is_a?(Exporter::Abstract)\n    cfg.exporter = secondary_config.exporter\n  end\n  if cfg.id_generator.nil? || cfg.id_generator.generator.is_a?(AbstractIdGenerator)\n    cfg.id_generator = secondary_config.id_generator\n  end\nend\nself\n"}},{"html_id":"schema_url-instance-method","name":"schema_url","abstract":false,"location":{"filename":"src/opentelemetry-api/provider.cr","line_number":75,"url":null},"def":{"name":"schema_url","visibility":"Public","body":"@config.schema_url"}},{"html_id":"schema_url=(val)-instance-method","name":"schema_url=","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/opentelemetry-api/provider.cr","line_number":79,"url":null},"def":{"name":"schema_url=","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"@config = Configuration::Factory.build(@config) do |cfg|\n  cfg.schema_url = val\nend"}},{"html_id":"service_name-instance-method","name":"service_name","abstract":false,"location":{"filename":"src/opentelemetry-api/provider.cr","line_number":55,"url":null},"def":{"name":"service_name","visibility":"Public","body":"@config.service_name"}},{"html_id":"service_name=(val)-instance-method","name":"service_name=","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/opentelemetry-api/provider.cr","line_number":59,"url":null},"def":{"name":"service_name=","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"@config = Configuration::Factory.build(@config) do |cfg|\n  cfg.service_name = val\nend"}},{"html_id":"service_version-instance-method","name":"service_version","abstract":false,"location":{"filename":"src/opentelemetry-api/provider.cr","line_number":71,"url":null},"def":{"name":"service_version","visibility":"Public","body":"@config.service_version"}},{"html_id":"service_version=(val)-instance-method","name":"service_version=","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/opentelemetry-api/provider.cr","line_number":65,"url":null},"def":{"name":"service_version=","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"@config = Configuration::Factory.build(@config) do |cfg|\n  cfg.service_version = val\nend"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Provider/Configuration","path":"OpenTelemetry/Provider/Configuration.html","kind":"struct","full_name":"OpenTelemetry::Provider::Configuration","name":"Configuration","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/provider/configuration.cr","line_number":6,"url":null},{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":8,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Provider","kind":"class","full_name":"OpenTelemetry::Provider","name":"Provider"},"doc":"This class encapsulates the configuration for a TraceProvider.","summary":"<p>This class encapsulates the configuration for a TraceProvider.</p>","constructors":[{"html_id":"new(service_name:String=\"\",service_version:String=\"\",schema_url:String=\"\",exporter:Exporter?=nil,interval:Int32=5000,id_generator:String=\"unique\")-class-method","name":"new","abstract":false,"args":[{"name":"service_name","default_value":"\"\"","external_name":"service_name","restriction":"String"},{"name":"service_version","default_value":"\"\"","external_name":"service_version","restriction":"String"},{"name":"schema_url","default_value":"\"\"","external_name":"schema_url","restriction":"String"},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":"Exporter | ::Nil"},{"name":"interval","default_value":"5000","external_name":"interval","restriction":"Int32"},{"name":"id_generator","default_value":"\"unique\"","external_name":"id_generator","restriction":"String"}],"args_string":"(service_name : String = \"\", service_version : String = \"\", schema_url : String = \"\", exporter : Exporter? = nil, interval : Int32 = 5000, id_generator : String = \"unique\")","args_html":"(service_name : <a href=\"../../String.html\">String</a> = <span class=\"s\">&quot;&quot;</span>, service_version : <a href=\"../../String.html\">String</a> = <span class=\"s\">&quot;&quot;</span>, schema_url : <a href=\"../../String.html\">String</a> = <span class=\"s\">&quot;&quot;</span>, exporter : <a href=\"../../OpenTelemetry/Exporter.html\">Exporter</a>? = <span class=\"n\">nil</span>, interval : Int32 = <span class=\"n\">5000</span>, id_generator : <a href=\"../../String.html\">String</a> = <span class=\"s\">&quot;unique&quot;</span>)","location":{"filename":"src/opentelemetry-api/provider/configuration.cr","line_number":13,"url":null},"def":{"name":"new","args":[{"name":"service_name","default_value":"\"\"","external_name":"service_name","restriction":"String"},{"name":"service_version","default_value":"\"\"","external_name":"service_version","restriction":"String"},{"name":"schema_url","default_value":"\"\"","external_name":"schema_url","restriction":"String"},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":"Exporter | ::Nil"},{"name":"interval","default_value":"5000","external_name":"interval","restriction":"Int32"},{"name":"id_generator","default_value":"\"unique\"","external_name":"id_generator","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(service_name, service_version, schema_url, exporter, interval, id_generator)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(service_name:String=\"\",service_version:String=\"\",schema_url:String=\"\",exporter:Exporter?=nil,interval:Int32=5000,id_generator:IdGenerator=IdGenerator.new(\"unique\"))-class-method","name":"new","abstract":false,"args":[{"name":"service_name","default_value":"\"\"","external_name":"service_name","restriction":"String"},{"name":"service_version","default_value":"\"\"","external_name":"service_version","restriction":"String"},{"name":"schema_url","default_value":"\"\"","external_name":"schema_url","restriction":"String"},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":"Exporter | ::Nil"},{"name":"interval","default_value":"5000","external_name":"interval","restriction":"Int32"},{"name":"id_generator","default_value":"IdGenerator.new(\"unique\")","external_name":"id_generator","restriction":"IdGenerator"}],"args_string":"(service_name : String = \"\", service_version : String = \"\", schema_url : String = \"\", exporter : Exporter? = nil, interval : Int32 = 5000, id_generator : IdGenerator = IdGenerator.new(\"unique\"))","args_html":"(service_name : <a href=\"../../String.html\">String</a> = <span class=\"s\">&quot;&quot;</span>, service_version : <a href=\"../../String.html\">String</a> = <span class=\"s\">&quot;&quot;</span>, schema_url : <a href=\"../../String.html\">String</a> = <span class=\"s\">&quot;&quot;</span>, exporter : <a href=\"../../OpenTelemetry/Exporter.html\">Exporter</a>? = <span class=\"n\">nil</span>, interval : Int32 = <span class=\"n\">5000</span>, id_generator : <a href=\"../../OpenTelemetry/IdGenerator.html\">IdGenerator</a> = <span class=\"t\">IdGenerator</span>.<span class=\"k\">new</span>(<span class=\"s\">&quot;unique&quot;</span>))","location":{"filename":"src/opentelemetry-api/provider/configuration.cr","line_number":6,"url":null},"def":{"name":"new","args":[{"name":"service_name","default_value":"\"\"","external_name":"service_name","restriction":"String"},{"name":"service_version","default_value":"\"\"","external_name":"service_version","restriction":"String"},{"name":"schema_url","default_value":"\"\"","external_name":"schema_url","restriction":"String"},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":"Exporter | ::Nil"},{"name":"interval","default_value":"5000","external_name":"interval","restriction":"Int32"},{"name":"id_generator","default_value":"IdGenerator.new(\"unique\")","external_name":"id_generator","restriction":"IdGenerator"}],"visibility":"Public","body":"_ = allocate\n_.initialize(service_name, service_version, schema_url, exporter, interval, id_generator)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/opentelemetry-api/provider/configuration.cr","line_number":6,"url":null},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@service_name.clone, @service_version.clone, @schema_url.clone, @exporter.clone, @interval.clone, @id_generator.clone)"}},{"html_id":"copy_with(service_name_service_name=@service_name,service_version_service_version=@service_version,schema_url_schema_url=@schema_url,exporter_exporter=@exporter,interval_interval=@interval,id_generator_id_generator=@id_generator)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_service_name","default_value":"@service_name","external_name":"service_name","restriction":""},{"name":"_service_version","default_value":"@service_version","external_name":"service_version","restriction":""},{"name":"_schema_url","default_value":"@schema_url","external_name":"schema_url","restriction":""},{"name":"_exporter","default_value":"@exporter","external_name":"exporter","restriction":""},{"name":"_interval","default_value":"@interval","external_name":"interval","restriction":""},{"name":"_id_generator","default_value":"@id_generator","external_name":"id_generator","restriction":""}],"args_string":"(service_name _service_name = @service_name, service_version _service_version = @service_version, schema_url _schema_url = @schema_url, exporter _exporter = @exporter, interval _interval = @interval, id_generator _id_generator = @id_generator)","args_html":"(service_name _service_name = @service_name, service_version _service_version = @service_version, schema_url _schema_url = @schema_url, exporter _exporter = @exporter, interval _interval = @interval, id_generator _id_generator = @id_generator)","location":{"filename":"src/opentelemetry-api/provider/configuration.cr","line_number":6,"url":null},"def":{"name":"copy_with","args":[{"name":"_service_name","default_value":"@service_name","external_name":"service_name","restriction":""},{"name":"_service_version","default_value":"@service_version","external_name":"service_version","restriction":""},{"name":"_schema_url","default_value":"@schema_url","external_name":"schema_url","restriction":""},{"name":"_exporter","default_value":"@exporter","external_name":"exporter","restriction":""},{"name":"_interval","default_value":"@interval","external_name":"interval","restriction":""},{"name":"_id_generator","default_value":"@id_generator","external_name":"id_generator","restriction":""}],"visibility":"Public","body":"self.class.new(_service_name, _service_version, _schema_url, _exporter, _interval, _id_generator)"}},{"html_id":"exporter:Exporter?-instance-method","name":"exporter","abstract":false,"def":{"name":"exporter","return_type":"Exporter | ::Nil","visibility":"Public","body":"@exporter"}},{"html_id":"id_generator:IdGenerator-instance-method","name":"id_generator","abstract":false,"def":{"name":"id_generator","return_type":"IdGenerator","visibility":"Public","body":"@id_generator"}},{"html_id":"interval:Int32-instance-method","name":"interval","abstract":false,"def":{"name":"interval","return_type":"Int32","visibility":"Public","body":"@interval"}},{"html_id":"schema_url:String-instance-method","name":"schema_url","abstract":false,"def":{"name":"schema_url","return_type":"String","visibility":"Public","body":"@schema_url"}},{"html_id":"service_name:String-instance-method","name":"service_name","abstract":false,"def":{"name":"service_name","return_type":"String","visibility":"Public","body":"@service_name"}},{"html_id":"service_version:String-instance-method","name":"service_version","abstract":false,"def":{"name":"service_version","return_type":"String","visibility":"Public","body":"@service_version"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Provider/Configuration/Factory","path":"OpenTelemetry/Provider/Configuration/Factory.html","kind":"class","full_name":"OpenTelemetry::Provider::Configuration::Factory","name":"Factory","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":9,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Provider/Configuration","kind":"struct","full_name":"OpenTelemetry::Provider::Configuration","name":"Configuration"},"class_methods":[{"html_id":"build(new_config:Configuration,&block:Factory->)-class-method","name":"build","abstract":false,"args":[{"name":"new_config","external_name":"new_config","restriction":"Configuration"}],"args_string":"(new_config : Configuration, &block : Factory -> )","args_html":"(new_config : <a href=\"../../../OpenTelemetry/Provider/Configuration.html\">Configuration</a>, &block : <a href=\"../../../OpenTelemetry/Provider/Configuration/Factory.html\">Factory</a> -> )","location":{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":29,"url":null},"def":{"name":"build","args":[{"name":"new_config","external_name":"new_config","restriction":"Configuration"}],"yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Factory ->)"},"visibility":"Public","body":"build(service_name: new_config.service_name, service_version: new_config.service_version, schema_url: new_config.schema_url, exporter: new_config.exporter, interval: new_config.interval, id_generator: new_config.id_generator) do |instance|\n  block.call(instance)\nend"}},{"html_id":"build(service_name=\"service_#{CSUUID.unique}\",service_version=\"\",schema_url=\"\",exporter=Exporter.new(:abstract),interval=5000,id_generator=IdGenerator.new(\"unique\"),&)-class-method","name":"build","abstract":false,"args":[{"name":"service_name","default_value":"\"service_#{CSUUID.unique}\"","external_name":"service_name","restriction":""},{"name":"service_version","default_value":"\"\"","external_name":"service_version","restriction":""},{"name":"schema_url","default_value":"\"\"","external_name":"schema_url","restriction":""},{"name":"exporter","default_value":"Exporter.new(:abstract)","external_name":"exporter","restriction":""},{"name":"interval","default_value":"5000","external_name":"interval","restriction":""},{"name":"id_generator","default_value":"IdGenerator.new(\"unique\")","external_name":"id_generator","restriction":""}],"args_string":"(service_name = \"service_#{CSUUID.unique}\", service_version = \"\", schema_url = \"\", exporter = Exporter.new(:abstract), interval = 5000, id_generator = IdGenerator.new(\"unique\"), &)","args_html":"(service_name = <span class=\"s\">&quot;service_</span><span class=\"i\">#{</span><span class=\"t\">CSUUID</span>.unique<span class=\"i\">}</span><span class=\"s\">&quot;</span>, service_version = <span class=\"s\">&quot;&quot;</span>, schema_url = <span class=\"s\">&quot;&quot;</span>, exporter = <span class=\"t\">Exporter</span>.<span class=\"k\">new</span>(<span class=\"n\">:abstract</span>), interval = <span class=\"n\">5000</span>, id_generator = <span class=\"t\">IdGenerator</span>.<span class=\"k\">new</span>(<span class=\"s\">&quot;unique&quot;</span>), &)","location":{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":42,"url":null},"def":{"name":"build","args":[{"name":"service_name","default_value":"\"service_#{CSUUID.unique}\"","external_name":"service_name","restriction":""},{"name":"service_version","default_value":"\"\"","external_name":"service_version","restriction":""},{"name":"schema_url","default_value":"\"\"","external_name":"schema_url","restriction":""},{"name":"exporter","default_value":"Exporter.new(:abstract)","external_name":"exporter","restriction":""},{"name":"interval","default_value":"5000","external_name":"interval","restriction":""},{"name":"id_generator","default_value":"IdGenerator.new(\"unique\")","external_name":"id_generator","restriction":""}],"yields":1,"visibility":"Public","body":"instance = Factory.allocate\ninstance.initialize(service_name: service_name, service_version: service_version, schema_url: schema_url, exporter: exporter, interval: interval, id_generator: id_generator)\nyield instance\n_build(instance)\n"}},{"html_id":"build(service_name=\"service_#{CSUUID.unique}\",service_version=\"\",schema_url=\"\",exporter=Exporter.new(:abstract),interval=5000,id_generator=IdGenerator.new(\"unique\"))-class-method","name":"build","abstract":false,"args":[{"name":"service_name","default_value":"\"service_#{CSUUID.unique}\"","external_name":"service_name","restriction":""},{"name":"service_version","default_value":"\"\"","external_name":"service_version","restriction":""},{"name":"schema_url","default_value":"\"\"","external_name":"schema_url","restriction":""},{"name":"exporter","default_value":"Exporter.new(:abstract)","external_name":"exporter","restriction":""},{"name":"interval","default_value":"5000","external_name":"interval","restriction":""},{"name":"id_generator","default_value":"IdGenerator.new(\"unique\")","external_name":"id_generator","restriction":""}],"args_string":"(service_name = \"service_#{CSUUID.unique}\", service_version = \"\", schema_url = \"\", exporter = Exporter.new(:abstract), interval = 5000, id_generator = IdGenerator.new(\"unique\"))","args_html":"(service_name = <span class=\"s\">&quot;service_</span><span class=\"i\">#{</span><span class=\"t\">CSUUID</span>.unique<span class=\"i\">}</span><span class=\"s\">&quot;</span>, service_version = <span class=\"s\">&quot;&quot;</span>, schema_url = <span class=\"s\">&quot;&quot;</span>, exporter = <span class=\"t\">Exporter</span>.<span class=\"k\">new</span>(<span class=\"n\">:abstract</span>), interval = <span class=\"n\">5000</span>, id_generator = <span class=\"t\">IdGenerator</span>.<span class=\"k\">new</span>(<span class=\"s\">&quot;unique&quot;</span>))","location":{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":62,"url":null},"def":{"name":"build","args":[{"name":"service_name","default_value":"\"service_#{CSUUID.unique}\"","external_name":"service_name","restriction":""},{"name":"service_version","default_value":"\"\"","external_name":"service_version","restriction":""},{"name":"schema_url","default_value":"\"\"","external_name":"schema_url","restriction":""},{"name":"exporter","default_value":"Exporter.new(:abstract)","external_name":"exporter","restriction":""},{"name":"interval","default_value":"5000","external_name":"interval","restriction":""},{"name":"id_generator","default_value":"IdGenerator.new(\"unique\")","external_name":"id_generator","restriction":""}],"visibility":"Public","body":"instance = Factory.allocate\ninstance.initialize(service_name: service_name, service_version: service_version, schema_url: schema_url, exporter: exporter, interval: interval, id_generator: id_generator)\n_build(instance)\n"}}],"constructors":[{"html_id":"new(service_name,service_version,schema_url,exporter,interval,id_generator)-class-method","name":"new","abstract":false,"args":[{"name":"service_name","external_name":"service_name","restriction":""},{"name":"service_version","external_name":"service_version","restriction":""},{"name":"schema_url","external_name":"schema_url","restriction":""},{"name":"exporter","external_name":"exporter","restriction":""},{"name":"interval","external_name":"interval","restriction":""},{"name":"id_generator","external_name":"id_generator","restriction":""}],"args_string":"(service_name, service_version, schema_url, exporter, interval, id_generator)","args_html":"(service_name, service_version, schema_url, exporter, interval, id_generator)","location":{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":81,"url":null},"def":{"name":"new","args":[{"name":"service_name","external_name":"service_name","restriction":""},{"name":"service_version","external_name":"service_version","restriction":""},{"name":"schema_url","external_name":"schema_url","restriction":""},{"name":"exporter","external_name":"exporter","restriction":""},{"name":"interval","external_name":"interval","restriction":""},{"name":"id_generator","external_name":"id_generator","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(service_name, service_version, schema_url, exporter, interval, id_generator)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"exporter:Exporter?-instance-method","name":"exporter","abstract":false,"location":{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":13,"url":null},"def":{"name":"exporter","return_type":"Exporter | ::Nil","visibility":"Public","body":"@exporter"}},{"html_id":"exporter=(exporter:Exporter?)-instance-method","name":"exporter=","abstract":false,"args":[{"name":"exporter","external_name":"exporter","restriction":"Exporter | ::Nil"}],"args_string":"(exporter : Exporter?)","args_html":"(exporter : <a href=\"../../../OpenTelemetry/Exporter.html\">Exporter</a>?)","location":{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":13,"url":null},"def":{"name":"exporter=","args":[{"name":"exporter","external_name":"exporter","restriction":"Exporter | ::Nil"}],"visibility":"Public","body":"@exporter = exporter"}},{"html_id":"id_generator:IdGenerator-instance-method","name":"id_generator","abstract":false,"location":{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":15,"url":null},"def":{"name":"id_generator","return_type":"IdGenerator","visibility":"Public","body":"@id_generator"}},{"html_id":"id_generator=(id_generator:IdGenerator)-instance-method","name":"id_generator=","abstract":false,"args":[{"name":"id_generator","external_name":"id_generator","restriction":"IdGenerator"}],"args_string":"(id_generator : IdGenerator)","args_html":"(id_generator : <a href=\"../../../OpenTelemetry/IdGenerator.html\">IdGenerator</a>)","location":{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":15,"url":null},"def":{"name":"id_generator=","args":[{"name":"id_generator","external_name":"id_generator","restriction":"IdGenerator"}],"visibility":"Public","body":"@id_generator = id_generator"}},{"html_id":"interval:Int32-instance-method","name":"interval","abstract":false,"location":{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":14,"url":null},"def":{"name":"interval","return_type":"Int32","visibility":"Public","body":"@interval"}},{"html_id":"interval=(interval:Int32)-instance-method","name":"interval=","abstract":false,"args":[{"name":"interval","external_name":"interval","restriction":"Int32"}],"args_string":"(interval : Int32)","args_html":"(interval : Int32)","location":{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":14,"url":null},"def":{"name":"interval=","args":[{"name":"interval","external_name":"interval","restriction":"Int32"}],"visibility":"Public","body":"@interval = interval"}},{"html_id":"schema_url:String-instance-method","name":"schema_url","abstract":false,"location":{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":12,"url":null},"def":{"name":"schema_url","return_type":"String","visibility":"Public","body":"@schema_url"}},{"html_id":"schema_url=(schema_url:String)-instance-method","name":"schema_url=","abstract":false,"args":[{"name":"schema_url","external_name":"schema_url","restriction":"String"}],"args_string":"(schema_url : String)","args_html":"(schema_url : <a href=\"../../../String.html\">String</a>)","location":{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":12,"url":null},"def":{"name":"schema_url=","args":[{"name":"schema_url","external_name":"schema_url","restriction":"String"}],"visibility":"Public","body":"@schema_url = schema_url"}},{"html_id":"service_name:String-instance-method","name":"service_name","abstract":false,"location":{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":10,"url":null},"def":{"name":"service_name","return_type":"String","visibility":"Public","body":"@service_name"}},{"html_id":"service_name=(service_name:String)-instance-method","name":"service_name=","abstract":false,"args":[{"name":"service_name","external_name":"service_name","restriction":"String"}],"args_string":"(service_name : String)","args_html":"(service_name : <a href=\"../../../String.html\">String</a>)","location":{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":10,"url":null},"def":{"name":"service_name=","args":[{"name":"service_name","external_name":"service_name","restriction":"String"}],"visibility":"Public","body":"@service_name = service_name"}},{"html_id":"service_version:String-instance-method","name":"service_version","abstract":false,"location":{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":11,"url":null},"def":{"name":"service_version","return_type":"String","visibility":"Public","body":"@service_version"}},{"html_id":"service_version=(service_version:String)-instance-method","name":"service_version=","abstract":false,"args":[{"name":"service_version","external_name":"service_version","restriction":"String"}],"args_string":"(service_version : String)","args_html":"(service_version : <a href=\"../../../String.html\">String</a>)","location":{"filename":"src/opentelemetry-api/provider/configuration/factory.cr","line_number":11,"url":null},"def":{"name":"service_version=","args":[{"name":"service_version","external_name":"service_version","restriction":"String"}],"visibility":"Public","body":"@service_version = service_version"}}]}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Resource","path":"OpenTelemetry/Resource.html","kind":"class","full_name":"OpenTelemetry::Resource","name":"Resource","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/Sendable","kind":"module","full_name":"OpenTelemetry::Sendable","name":"Sendable"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/resource.cr","line_number":5,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"opentelemetry-api/OpenTelemetry/Sendable","kind":"module","full_name":"OpenTelemetry::Sendable","name":"Sendable"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"constructors":[{"html_id":"new(attrs)-class-method","name":"new","abstract":false,"args":[{"name":"attrs","external_name":"attrs","restriction":""}],"args_string":"(attrs)","args_html":"(attrs)","location":{"filename":"src/opentelemetry-api/resource.cr","line_number":13,"url":null},"def":{"name":"new","args":[{"name":"attrs","external_name":"attrs","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(attrs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/opentelemetry-api/resource.cr","line_number":17,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/opentelemetry-api/resource.cr","line_number":28,"url":null},"def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"attributes[key].value"}},{"html_id":"[]=(key,value)-instance-method","name":"[]=","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(key, value)","args_html":"(key, value)","location":{"filename":"src/opentelemetry-api/resource.cr","line_number":20,"url":null},"def":{"name":"[]=","args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"attributes[key] = AnyAttribute.new(key: key, value: value)"}},{"html_id":"attribute_list(indent=4)-instance-method","name":"attribute_list","abstract":false,"args":[{"name":"indent","default_value":"4","external_name":"indent","restriction":""}],"args_string":"(indent = 4)","args_html":"(indent = <span class=\"n\">4</span>)","location":{"filename":"src/opentelemetry-api/resource.cr","line_number":62,"url":null},"def":{"name":"attribute_list","args":[{"name":"indent","default_value":"4","external_name":"indent","restriction":""}],"visibility":"Public","body":"spacer = \" \" * indent\nString.build do |attribute_list|\n  attributes.each do |_, value|\n    attribute_list << \"#{spacer}#{value.to_json},\\n\"\n  end\nend.chomp(\",\\n\")\n"}},{"html_id":"attributes:Hash(String,AnyAttribute)-instance-method","name":"attributes","abstract":false,"location":{"filename":"src/opentelemetry-api/resource.cr","line_number":8,"url":null},"def":{"name":"attributes","return_type":"Hash(String, AnyAttribute)","visibility":"Public","body":"@attributes"}},{"html_id":"attributes=(attributes:Hash(String,AnyAttribute))-instance-method","name":"attributes=","abstract":false,"args":[{"name":"attributes","external_name":"attributes","restriction":"Hash(String, AnyAttribute)"}],"args_string":"(attributes : Hash(String, AnyAttribute))","args_html":"(attributes : Hash(<a href=\"../String.html\">String</a>, <a href=\"../OpenTelemetry/AnyAttribute.html\">AnyAttribute</a>))","location":{"filename":"src/opentelemetry-api/resource.cr","line_number":8,"url":null},"def":{"name":"attributes=","args":[{"name":"attributes","external_name":"attributes","restriction":"Hash(String, AnyAttribute)"}],"visibility":"Public","body":"@attributes = attributes"}},{"html_id":"dropped_attribute_count:UInt32-instance-method","name":"dropped_attribute_count","abstract":false,"location":{"filename":"src/opentelemetry-api/resource.cr","line_number":9,"url":null},"def":{"name":"dropped_attribute_count","return_type":"UInt32","visibility":"Public","body":"@dropped_attribute_count"}},{"html_id":"dropped_attribute_count=(dropped_attribute_count:UInt32)-instance-method","name":"dropped_attribute_count=","abstract":false,"args":[{"name":"dropped_attribute_count","external_name":"dropped_attribute_count","restriction":"UInt32"}],"args_string":"(dropped_attribute_count : UInt32)","args_html":"(dropped_attribute_count : UInt32)","location":{"filename":"src/opentelemetry-api/resource.cr","line_number":9,"url":null},"def":{"name":"dropped_attribute_count=","args":[{"name":"dropped_attribute_count","external_name":"dropped_attribute_count","restriction":"UInt32"}],"visibility":"Public","body":"@dropped_attribute_count = dropped_attribute_count"}},{"html_id":"empty?-instance-method","name":"empty?","abstract":false,"location":{"filename":"src/opentelemetry-api/resource.cr","line_number":36,"url":null},"def":{"name":"empty?","visibility":"Public","body":"attributes.empty?"}},{"html_id":"get_attribute(key)-instance-method","name":"get_attribute","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/opentelemetry-api/resource.cr","line_number":32,"url":null},"def":{"name":"get_attribute","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"attributes[key]"}},{"html_id":"set_attribute(key,value)-instance-method","name":"set_attribute","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(key, value)","args_html":"(key, value)","location":{"filename":"src/opentelemetry-api/resource.cr","line_number":24,"url":null},"def":{"name":"set_attribute","args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"self[key] = value"}},{"html_id":"to_json-instance-method","name":"to_json","abstract":false,"location":{"filename":"src/opentelemetry-api/resource.cr","line_number":52,"url":null},"def":{"name":"to_json","visibility":"Public","body":"String.build do |json|\n  json << \"{\\n\"\n  json << \"  \\\"resource\\\":{\\n\"\n  json << attribute_list\n  json << \"  }\\n\"\n  json << \"}\\n\"\nend"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","doc":"The ProtoBuf differs a LOT from the current Spec. Methinks this has changed a bunch since I last updated it.","summary":"<p>The ProtoBuf differs a LOT from the current Spec.</p>","abstract":false,"location":{"filename":"src/opentelemetry-api/resource.cr","line_number":41,"url":null},"def":{"name":"to_protobuf","visibility":"Public","body":"resource = Proto::Resource::V1::Resource.new\nresource.attributes = attributes.map do |key, value|\n  Proto::Common::V1::KeyValue.new(key: key, value: Attribute.to_anyvalue(value))\nend\nresource\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Sendable","path":"OpenTelemetry/Sendable.html","kind":"module","full_name":"OpenTelemetry::Sendable","name":"Sendable","abstract":false,"locations":[{"filename":"src/opentelemetry-api/sendable.cr","line_number":2,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"opentelemetry-api/OpenTelemetry/LogColletion","kind":"class","full_name":"OpenTelemetry::LogColletion","name":"LogColletion"},{"html_id":"opentelemetry-api/OpenTelemetry/LogRecord","kind":"class","full_name":"OpenTelemetry::LogRecord","name":"LogRecord"},{"html_id":"opentelemetry-api/OpenTelemetry/Resource","kind":"class","full_name":"OpenTelemetry::Resource","name":"Resource"},{"html_id":"opentelemetry-api/OpenTelemetry/Span","kind":"class","full_name":"OpenTelemetry::Span","name":"Span"},{"html_id":"opentelemetry-api/OpenTelemetry/Trace","kind":"class","full_name":"OpenTelemetry::Trace","name":"Trace"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"instance_methods":[{"html_id":"size-instance-method","name":"size","abstract":false,"location":{"filename":"src/opentelemetry-api/sendable.cr","line_number":6,"url":null},"def":{"name":"size","visibility":"Public","body":"1"}},{"html_id":"to_json-instance-method","name":"to_json","abstract":true,"location":{"filename":"src/opentelemetry-api/sendable.cr","line_number":4,"url":null},"def":{"name":"to_json","visibility":"Public","body":""}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":true,"location":{"filename":"src/opentelemetry-api/sendable.cr","line_number":3,"url":null},"def":{"name":"to_protobuf","visibility":"Public","body":""}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Span","path":"OpenTelemetry/Span.html","kind":"class","full_name":"OpenTelemetry::Span","name":"Span","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/Sendable","kind":"module","full_name":"OpenTelemetry::Sendable","name":"Sendable"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/span.cr","line_number":11,"url":null},{"filename":"src/opentelemetry-api/span/kind.cr","line_number":2,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MATCH","name":"MATCH","value":"/(?<span_id>[A-Fa-f0-9]{16})/"}],"included_modules":[{"html_id":"opentelemetry-api/OpenTelemetry/Sendable","kind":"module","full_name":"OpenTelemetry::Sendable","name":"Sendable"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"doc":"A `Span` represents a single measured timespan, and all data associated\nwith that measurement. A `Span` may nest other `Span` instances.","summary":"<p>A <code><a href=\"../OpenTelemetry/Span.html\">Span</a></code> represents a single measured timespan, and all data associated with that measurement.</p>","class_methods":[{"html_id":"build(name=\"\",&)-class-method","name":"build","abstract":false,"args":[{"name":"name","default_value":"\"\"","external_name":"name","restriction":""}],"args_string":"(name = \"\", &)","args_html":"(name = <span class=\"s\">&quot;&quot;</span>, &)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":38,"url":null},"def":{"name":"build","args":[{"name":"name","default_value":"\"\"","external_name":"name","restriction":""}],"yields":1,"visibility":"Public","body":"span = new(name)\nyield span\nspan\n"}},{"html_id":"validate_id(id:Slice(UInt8))-class-method","name":"validate_id","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Slice(UInt8)"}],"args_string":"(id : Slice(UInt8))","args_html":"(id : Slice(UInt8))","location":{"filename":"src/opentelemetry-api/span.cr","line_number":30,"url":null},"def":{"name":"validate_id","args":[{"name":"id","external_name":"id","restriction":"Slice(UInt8)"}],"visibility":"Public","body":"validate_id(id.hexstring)"}},{"html_id":"validate_id(id:Slice)-class-method","name":"validate_id","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Slice"}],"args_string":"(id : Slice)","args_html":"(id : Slice)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":34,"url":null},"def":{"name":"validate_id","args":[{"name":"id","external_name":"id","restriction":"Slice"}],"visibility":"Public","body":"!(!(MATCH.match(id)))"}}],"constructors":[{"html_id":"new(name=\"\")-class-method","name":"new","abstract":false,"args":[{"name":"name","default_value":"\"\"","external_name":"name","restriction":""}],"args_string":"(name = \"\")","args_html":"(name = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":45,"url":null},"def":{"name":"new","args":[{"name":"name","default_value":"\"\"","external_name":"name","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":60,"url":null},"def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"attributes[key].value"}},{"html_id":"[]=(key,value)-instance-method","name":"[]=","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(key, value)","args_html":"(key, value)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":52,"url":null},"def":{"name":"[]=","args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"attributes[key] = AnyAttribute.new(key: key, value: value)"}},{"html_id":"add_event(name,attributes:Hash(String,AnyAttribute)={}ofString=>AnyAttribute)-instance-method","name":"add_event","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"attributes","default_value":"{} of String => AnyAttribute","external_name":"attributes","restriction":"Hash(String, AnyAttribute)"}],"args_string":"(name, attributes : Hash(String, AnyAttribute) = {} of String => AnyAttribute)","args_html":"(name, attributes : Hash(<a href=\"../String.html\">String</a>, <a href=\"../OpenTelemetry/AnyAttribute.html\">AnyAttribute</a>) = {} <span class=\"k\">of</span> <span class=\"t\">String</span> =&gt; <span class=\"t\">AnyAttribute</span>)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":78,"url":null},"def":{"name":"add_event","args":[{"name":"name","external_name":"name","restriction":""},{"name":"attributes","default_value":"{} of String => AnyAttribute","external_name":"attributes","restriction":"Hash(String, AnyAttribute)"}],"visibility":"Public","body":"events << Event.new(name: name, attributes: attributes)"}},{"html_id":"add_event(name=\"\",&)-instance-method","name":"add_event","abstract":false,"args":[{"name":"name","default_value":"\"\"","external_name":"name","restriction":""}],"args_string":"(name = \"\", &)","args_html":"(name = <span class=\"s\">&quot;&quot;</span>, &)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":72,"url":null},"def":{"name":"add_event","args":[{"name":"name","default_value":"\"\"","external_name":"name","restriction":""}],"yields":1,"visibility":"Public","body":"events << Event.new(name: name) do |event|\n  yield event\nend"}},{"html_id":"attributes:Hash(String,AnyAttribute)-instance-method","name":"attributes","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":20,"url":null},"def":{"name":"attributes","return_type":"Hash(String, AnyAttribute)","visibility":"Public","body":"@attributes"}},{"html_id":"attributes=(attributes:Hash(String,AnyAttribute))-instance-method","name":"attributes=","abstract":false,"args":[{"name":"attributes","external_name":"attributes","restriction":"Hash(String, AnyAttribute)"}],"args_string":"(attributes : Hash(String, AnyAttribute))","args_html":"(attributes : Hash(<a href=\"../String.html\">String</a>, <a href=\"../OpenTelemetry/AnyAttribute.html\">AnyAttribute</a>))","location":{"filename":"src/opentelemetry-api/span.cr","line_number":20,"url":null},"def":{"name":"attributes=","args":[{"name":"attributes","external_name":"attributes","restriction":"Hash(String, AnyAttribute)"}],"visibility":"Public","body":"@attributes = attributes"}},{"html_id":"children:Array(Span)-instance-method","name":"children","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":22,"url":null},"def":{"name":"children","return_type":"Array(Span)","visibility":"Public","body":"@children"}},{"html_id":"children=(children:Array(Span))-instance-method","name":"children=","abstract":false,"args":[{"name":"children","external_name":"children","restriction":"Array(Span)"}],"args_string":"(children : Array(Span))","args_html":"(children : Array(<a href=\"../OpenTelemetry/Span.html\">Span</a>))","location":{"filename":"src/opentelemetry-api/span.cr","line_number":22,"url":null},"def":{"name":"children=","args":[{"name":"children","external_name":"children","restriction":"Array(Span)"}],"visibility":"Public","body":"@children = children"}},{"html_id":"client!-instance-method","name":"client!","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":102,"url":null},"def":{"name":"client!","visibility":"Public","body":"self.kind = Kind::Client"}},{"html_id":"consumer!-instance-method","name":"consumer!","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":114,"url":null},"def":{"name":"consumer!","visibility":"Public","body":"self.kind = Kind::Consumer"}},{"html_id":"context:SpanContext-instance-method","name":"context","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":23,"url":null},"def":{"name":"context","return_type":"SpanContext","visibility":"Public","body":"@context"}},{"html_id":"context=(context:SpanContext)-instance-method","name":"context=","abstract":false,"args":[{"name":"context","external_name":"context","restriction":"SpanContext"}],"args_string":"(context : SpanContext)","args_html":"(context : <a href=\"../OpenTelemetry/SpanContext.html\">SpanContext</a>)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":23,"url":null},"def":{"name":"context=","args":[{"name":"context","external_name":"context","restriction":"SpanContext"}],"visibility":"Public","body":"@context = context"}},{"html_id":"end_time_unix_nano-instance-method","name":"end_time_unix_nano","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":94,"url":null},"def":{"name":"end_time_unix_nano","visibility":"Public","body":"if _wall_finish = wall_finish\n  (_wall_finish - Time::UNIX_EPOCH).total_nanoseconds.to_u64\nelse\n  0_u64\nend"}},{"html_id":"events:Array(Event)-instance-method","name":"events","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":19,"url":null},"def":{"name":"events","return_type":"Array(Event)","visibility":"Public","body":"@events"}},{"html_id":"events=(events:Array(Event))-instance-method","name":"events=","abstract":false,"args":[{"name":"events","external_name":"events","restriction":"Array(Event)"}],"args_string":"(events : Array(Event))","args_html":"(events : Array(<a href=\"../OpenTelemetry/Event.html\">Event</a>))","location":{"filename":"src/opentelemetry-api/span.cr","line_number":19,"url":null},"def":{"name":"events=","args":[{"name":"events","external_name":"events","restriction":"Array(Event)"}],"visibility":"Public","body":"@events = events"}},{"html_id":"finish:Time::Span?-instance-method","name":"finish","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":17,"url":null},"def":{"name":"finish","return_type":"Time::Span | ::Nil","visibility":"Public","body":"@finish"}},{"html_id":"finish=(finish:Time::Span?)-instance-method","name":"finish=","abstract":false,"args":[{"name":"finish","external_name":"finish","restriction":"Time::Span | ::Nil"}],"args_string":"(finish : Time::Span?)","args_html":"(finish : Time::Span?)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":17,"url":null},"def":{"name":"finish=","args":[{"name":"finish","external_name":"finish","restriction":"Time::Span | ::Nil"}],"visibility":"Public","body":"@finish = finish"}},{"html_id":"get_attribute(key)-instance-method","name":"get_attribute","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":64,"url":null},"def":{"name":"get_attribute","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"attributes[key]"}},{"html_id":"id-instance-method","name":"id","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":82,"url":null},"def":{"name":"id","visibility":"Public","body":"context.span_id"}},{"html_id":"internal!-instance-method","name":"internal!","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":118,"url":null},"def":{"name":"internal!","visibility":"Public","body":"self.kind = Kind::Internal"}},{"html_id":"is_recording:Bool-instance-method","name":"is_recording","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":26,"url":null},"def":{"name":"is_recording","return_type":"Bool","visibility":"Public","body":"@is_recording"}},{"html_id":"is_recording=(is_recording:Bool)-instance-method","name":"is_recording=","abstract":false,"args":[{"name":"is_recording","external_name":"is_recording","restriction":"Bool"}],"args_string":"(is_recording : Bool)","args_html":"(is_recording : Bool)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":26,"url":null},"def":{"name":"is_recording=","args":[{"name":"is_recording","external_name":"is_recording","restriction":"Bool"}],"visibility":"Public","body":"@is_recording = is_recording"}},{"html_id":"kind:Kind-instance-method","name":"kind","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":24,"url":null},"def":{"name":"kind","return_type":"Kind","visibility":"Public","body":"@kind"}},{"html_id":"kind=(kind:Kind)-instance-method","name":"kind=","abstract":false,"args":[{"name":"kind","external_name":"kind","restriction":"Kind"}],"args_string":"(kind : Kind)","args_html":"(kind : <a href=\"../OpenTelemetry/Span/Kind.html\">Kind</a>)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":24,"url":null},"def":{"name":"kind=","args":[{"name":"kind","external_name":"kind","restriction":"Kind"}],"visibility":"Public","body":"@kind = kind"}},{"html_id":"name:String-instance-method","name":"name","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":14,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"}},{"html_id":"name=(name:String)-instance-method","name":"name=","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : <a href=\"../String.html\">String</a>)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":14,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"}},{"html_id":"parent:Span?-instance-method","name":"parent","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":21,"url":null},"def":{"name":"parent","return_type":"Span | ::Nil","visibility":"Public","body":"@parent"}},{"html_id":"parent=(parent:Span?)-instance-method","name":"parent=","abstract":false,"args":[{"name":"parent","external_name":"parent","restriction":"Span | ::Nil"}],"args_string":"(parent : Span?)","args_html":"(parent : <a href=\"../OpenTelemetry/Span.html\">Span</a>?)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":21,"url":null},"def":{"name":"parent=","args":[{"name":"parent","external_name":"parent","restriction":"Span | ::Nil"}],"visibility":"Public","body":"@parent = parent"}},{"html_id":"pb_span_kind-instance-method","name":"pb_span_kind","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":122,"url":null},"def":{"name":"pb_span_kind","visibility":"Public","body":"case @kind\nwhen Kind::Client\n  Proto::Trace::V1::Span::SpanKind::SPANKINDCLIENT\nwhen Kind::Server\n  Proto::Trace::V1::Span::SpanKind::SPANKINDSERVER\nwhen Kind::Producer\n  Proto::Trace::V1::Span::SpanKind::SPANKINDPRODUCER\nwhen Kind::Consumer\n  Proto::Trace::V1::Span::SpanKind::SPANKINDCONSUMER\nwhen Kind::Internal\n  Proto::Trace::V1::Span::SpanKind::SPANKINDINTERNAL\nelse\n  Proto::Trace::V1::Span::SpanKind::SPANKINDUNSPECIFIED\nend"}},{"html_id":"pb_span_status-instance-method","name":"pb_span_status","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":139,"url":null},"def":{"name":"pb_span_status","visibility":"Public","body":"case @status\nwhen Status::Unset\n  Proto::Trace::V1::Status::StatusCode::STATUSCODEUNSET\nwhen Status::Ok\n  Proto::Trace::V1::Status::StatusCode::STATUSCODEOK\nelse\n  Proto::Trace::V1::Status::StatusCode::STATUSCODEERROR\nend"}},{"html_id":"producer!-instance-method","name":"producer!","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":110,"url":null},"def":{"name":"producer!","visibility":"Public","body":"self.kind = Kind::Producer"}},{"html_id":"recording?:Bool-instance-method","name":"recording?","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":48,"url":null},"def":{"name":"recording?","visibility":"Public","body":"@is_recording"}},{"html_id":"server!-instance-method","name":"server!","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":106,"url":null},"def":{"name":"server!","visibility":"Public","body":"self.kind = Kind::Server"}},{"html_id":"set_attribute(key,value)-instance-method","name":"set_attribute","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(key, value)","args_html":"(key, value)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":56,"url":null},"def":{"name":"set_attribute","args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"self[key] = value"}},{"html_id":"span_id-instance-method","name":"span_id","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":86,"url":null},"def":{"name":"span_id","visibility":"Public","body":"id"}},{"html_id":"start:Time::Span-instance-method","name":"start","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":15,"url":null},"def":{"name":"start","return_type":"Time::Span","visibility":"Public","body":"@start"}},{"html_id":"start=(start:Time::Span)-instance-method","name":"start=","abstract":false,"args":[{"name":"start","external_name":"start","restriction":"Time::Span"}],"args_string":"(start : Time::Span)","args_html":"(start : Time::Span)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":15,"url":null},"def":{"name":"start=","args":[{"name":"start","external_name":"start","restriction":"Time::Span"}],"visibility":"Public","body":"@start = start"}},{"html_id":"start_time_unix_nano-instance-method","name":"start_time_unix_nano","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":90,"url":null},"def":{"name":"start_time_unix_nano","visibility":"Public","body":"(wall_start - Time::UNIX_EPOCH).total_nanoseconds.to_u64"}},{"html_id":"status:Status-instance-method","name":"status","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":25,"url":null},"def":{"name":"status","return_type":"Status","visibility":"Public","body":"@status"}},{"html_id":"status=(status:Status)-instance-method","name":"status=","abstract":false,"args":[{"name":"status","external_name":"status","restriction":"Status"}],"args_string":"(status : Status)","args_html":"(status : <a href=\"../OpenTelemetry/Status.html\">Status</a>)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":25,"url":null},"def":{"name":"status=","args":[{"name":"status","external_name":"status","restriction":"Status"}],"visibility":"Public","body":"@status = status"}},{"html_id":"to_json-instance-method","name":"to_json","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":176,"url":null},"def":{"name":"to_json","visibility":"Public","body":"if recording?\nelse\n  return \"\"\nend\nString.build do |json|\n  json << \"{\\n\"\n  json << \"      \\\"type\\\":\\\"span\\\",\\n\"\n  json << \"      \\\"traceId\\\":\\\"#{context.trace_id.hexstring}\\\",\\n\"\n  json << \"      \\\"spanId\\\":\\\"#{context.span_id.hexstring}\\\",\\n\"\n  json << \"      \\\"parentSpanId\\\":\\\"#{parent.try do |__arg2|\n    __arg2.context.span_id.hexstring\n  end}\\\",\\n\"\n  json << \"      \\\"kind\\\":#{kind.value},\\n\"\n  json << \"      \\\"name\\\":\\\"#{name}\\\",\\n\"\n  json << \"      \\\"status\\\":#{status.to_json},\\n\"\n  json << \"      \\\"startTime\\\":#{start_time_unix_nano},\\n\"\n  json << \"      \\\"endTime\\\":#{end_time_unix_nano},\\n\"\n  json << \"      \\\"attributes\\\":{\\n\"\n  json << (String.build do |attribute_list|\n    attributes.each do |_, value|\n      attribute_list << \"        #{value.to_json},\\n\"\n    end\n  end.chomp(\",\\n\"))\n  json << \"      },\\n\"\n  json << \"      \\\"events\\\":[\\n\"\n  json << (String.build do |event_list|\n    events.each do |event|\n      event_list << \"    #{event.to_json},\\n\"\n    end\n  end.chomp(\",\\n\"))\n  json << \"\\n      ]\\n\"\n  json << \"    }\"\nend\n"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","doc":"Return the Protobuf object for the Span.","summary":"<p>Return the Protobuf object for the Span.</p>","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":151,"url":null},"def":{"name":"to_protobuf","visibility":"Public","body":"if recording?\nelse\n  return\nend\nspan = Proto::Trace::V1::Span.new(name: name, trace_id: context.trace_id, span_id: context.span_id, parent_span_id: parent.try do |__arg0|\n  __arg0.context.span_id\nend, start_time_unix_nano: start_time_unix_nano, end_time_unix_nano: end_time_unix_nano, kind: pb_span_kind, status: status.to_protobuf)\nspan.attributes = attributes.map do |key, value|\n  Proto::Common::V1::KeyValue.new(key: key, value: Attribute.to_anyvalue(value))\nend\nspan.events = events.map(&.to_protobuf)\nspan\n"}},{"html_id":"wall_finish:Time?-instance-method","name":"wall_finish","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":18,"url":null},"def":{"name":"wall_finish","return_type":"Time | ::Nil","visibility":"Public","body":"@wall_finish"}},{"html_id":"wall_finish=(wall_finish:Time?)-instance-method","name":"wall_finish=","abstract":false,"args":[{"name":"wall_finish","external_name":"wall_finish","restriction":"Time | ::Nil"}],"args_string":"(wall_finish : Time?)","args_html":"(wall_finish : Time?)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":18,"url":null},"def":{"name":"wall_finish=","args":[{"name":"wall_finish","external_name":"wall_finish","restriction":"Time | ::Nil"}],"visibility":"Public","body":"@wall_finish = wall_finish"}},{"html_id":"wall_start:Time-instance-method","name":"wall_start","abstract":false,"location":{"filename":"src/opentelemetry-api/span.cr","line_number":16,"url":null},"def":{"name":"wall_start","return_type":"Time","visibility":"Public","body":"@wall_start"}},{"html_id":"wall_start=(wall_start:Time)-instance-method","name":"wall_start=","abstract":false,"args":[{"name":"wall_start","external_name":"wall_start","restriction":"Time"}],"args_string":"(wall_start : Time)","args_html":"(wall_start : Time)","location":{"filename":"src/opentelemetry-api/span.cr","line_number":16,"url":null},"def":{"name":"wall_start=","args":[{"name":"wall_start","external_name":"wall_start","restriction":"Time"}],"visibility":"Public","body":"@wall_start = wall_start"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Span/Kind","path":"OpenTelemetry/Span/Kind.html","kind":"enum","full_name":"OpenTelemetry::Span::Kind","name":"Kind","abstract":false,"ancestors":[{"html_id":"opentelemetry-api/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"opentelemetry-api/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/span/kind.cr","line_number":3,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Unspecified","name":"Unspecified","value":"0"},{"id":"Internal","name":"Internal","value":"1"},{"id":"Server","name":"Server","value":"2"},{"id":"Client","name":"Client","value":"3"},{"id":"Producer","name":"Producer","value":"4"},{"id":"Consumer","name":"Consumer","value":"5"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Span","kind":"class","full_name":"OpenTelemetry::Span","name":"Span"},"instance_methods":[{"html_id":"client?-instance-method","name":"client?","abstract":false,"location":{"filename":"src/opentelemetry-api/span/kind.cr","line_number":7,"url":null},"def":{"name":"client?","visibility":"Public","body":"self == Client"}},{"html_id":"consumer?-instance-method","name":"consumer?","abstract":false,"location":{"filename":"src/opentelemetry-api/span/kind.cr","line_number":9,"url":null},"def":{"name":"consumer?","visibility":"Public","body":"self == Consumer"}},{"html_id":"internal?-instance-method","name":"internal?","abstract":false,"location":{"filename":"src/opentelemetry-api/span/kind.cr","line_number":5,"url":null},"def":{"name":"internal?","visibility":"Public","body":"self == Internal"}},{"html_id":"producer?-instance-method","name":"producer?","abstract":false,"location":{"filename":"src/opentelemetry-api/span/kind.cr","line_number":8,"url":null},"def":{"name":"producer?","visibility":"Public","body":"self == Producer"}},{"html_id":"server?-instance-method","name":"server?","abstract":false,"location":{"filename":"src/opentelemetry-api/span/kind.cr","line_number":6,"url":null},"def":{"name":"server?","visibility":"Public","body":"self == Server"}},{"html_id":"unspecified?-instance-method","name":"unspecified?","abstract":false,"location":{"filename":"src/opentelemetry-api/span/kind.cr","line_number":4,"url":null},"def":{"name":"unspecified?","visibility":"Public","body":"self == Unspecified"}}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/SpanContext","path":"OpenTelemetry/SpanContext.html","kind":"struct","full_name":"OpenTelemetry::SpanContext","name":"SpanContext","abstract":false,"superclass":{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"opentelemetry-api/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/span_context.cr","line_number":4,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"class_methods":[{"html_id":"build(inherited_context:SpanContext?=nil,&)-class-method","name":"build","abstract":false,"args":[{"name":"inherited_context","default_value":"nil","external_name":"inherited_context","restriction":"SpanContext | ::Nil"}],"args_string":"(inherited_context : SpanContext? = nil, &)","args_html":"(inherited_context : <a href=\"../OpenTelemetry/SpanContext.html\">SpanContext</a>? = <span class=\"n\">nil</span>, &)","location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":66,"url":null},"def":{"name":"build","args":[{"name":"inherited_context","default_value":"nil","external_name":"inherited_context","restriction":"SpanContext | ::Nil"}],"yields":1,"visibility":"Public","body":"if inherited_context\n  config = Config.new(inherited_context)\nelse\n  config = Config.new(Slice(UInt8).new(16, 0), IdGenerator.span_id)\nend\nyield config\nnew(config)\n"}}],"constructors":[{"html_id":"new(trace_id,span_id,trace_flags,trace_state,remote=false)-class-method","name":"new","abstract":false,"args":[{"name":"trace_id","external_name":"trace_id","restriction":""},{"name":"span_id","external_name":"span_id","restriction":""},{"name":"trace_flags","external_name":"trace_flags","restriction":""},{"name":"trace_state","external_name":"trace_state","restriction":""},{"name":"remote","default_value":"false","external_name":"remote","restriction":""}],"args_string":"(trace_id, span_id, trace_flags, trace_state, remote = false)","args_html":"(trace_id, span_id, trace_flags, trace_state, remote = <span class=\"n\">false</span>)","location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":19,"url":null},"def":{"name":"new","args":[{"name":"trace_id","external_name":"trace_id","restriction":""},{"name":"span_id","external_name":"span_id","restriction":""},{"name":"trace_flags","external_name":"trace_flags","restriction":""},{"name":"trace_state","external_name":"trace_state","restriction":""},{"name":"remote","default_value":"false","external_name":"remote","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(trace_id, span_id, trace_flags, trace_state, remote)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(inherited_context:SpanContext)-class-method","name":"new","abstract":false,"args":[{"name":"inherited_context","external_name":"inherited_context","restriction":"SpanContext"}],"args_string":"(inherited_context : SpanContext)","args_html":"(inherited_context : <a href=\"../OpenTelemetry/SpanContext.html\">SpanContext</a>)","location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":22,"url":null},"def":{"name":"new","args":[{"name":"inherited_context","external_name":"inherited_context","restriction":"SpanContext"}],"visibility":"Public","body":"_ = allocate\n_.initialize(inherited_context)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(configuration:Config)-class-method","name":"new","abstract":false,"args":[{"name":"configuration","external_name":"configuration","restriction":"Config"}],"args_string":"(configuration : Config)","args_html":"(configuration : <a href=\"../OpenTelemetry/SpanContext/Config.html\">Config</a>)","location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":30,"url":null},"def":{"name":"new","args":[{"name":"configuration","external_name":"configuration","restriction":"Config"}],"visibility":"Public","body":"_ = allocate\n_.initialize(configuration)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":13,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](val)-instance-method","name":"[]","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":58,"url":null},"def":{"name":"[]","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"@trace_state[val]"}},{"html_id":"[]=(val,val2)-instance-method","name":"[]=","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""},{"name":"val2","external_name":"val2","restriction":""}],"args_string":"(val, val2)","args_html":"(val, val2)","location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":62,"url":null},"def":{"name":"[]=","args":[{"name":"val","external_name":"val","restriction":""},{"name":"val2","external_name":"val2","restriction":""}],"visibility":"Public","body":"@trace_state[val] = val2"}},{"html_id":"is_remote-instance-method","name":"is_remote","doc":"The spec dictates that this name be available: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#isvalid","summary":"<p>The spec dictates that this name be available: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#isvalid</p>","abstract":false,"location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":54,"url":null},"def":{"name":"is_remote","visibility":"Public","body":"remote?"}},{"html_id":"is_valid-instance-method","name":"is_valid","doc":"The spec dictates that this name be available: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#isvalid","summary":"<p>The spec dictates that this name be available: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#isvalid</p>","abstract":false,"location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":45,"url":null},"def":{"name":"is_valid","visibility":"Public","body":"valid?"}},{"html_id":"remote:Bool-instance-method","name":"remote","abstract":false,"location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":11,"url":null},"def":{"name":"remote","return_type":"Bool","visibility":"Public","body":"@remote"}},{"html_id":"remote=(remote:Bool)-instance-method","name":"remote=","abstract":false,"args":[{"name":"remote","external_name":"remote","restriction":"Bool"}],"args_string":"(remote : Bool)","args_html":"(remote : Bool)","location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":11,"url":null},"def":{"name":"remote=","args":[{"name":"remote","external_name":"remote","restriction":"Bool"}],"visibility":"Public","body":"@remote = remote"}},{"html_id":"remote?-instance-method","name":"remote?","abstract":false,"location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":49,"url":null},"def":{"name":"remote?","visibility":"Public","body":"!(!@remote)"}},{"html_id":"span_id:Slice(UInt8)-instance-method","name":"span_id","abstract":false,"location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":6,"url":null},"def":{"name":"span_id","return_type":"Slice(UInt8)","visibility":"Public","body":"@span_id"}},{"html_id":"span_id=(span_id:Slice(UInt8))-instance-method","name":"span_id=","abstract":false,"args":[{"name":"span_id","external_name":"span_id","restriction":"Slice(UInt8)"}],"args_string":"(span_id : Slice(UInt8))","args_html":"(span_id : Slice(UInt8))","location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":6,"url":null},"def":{"name":"span_id=","args":[{"name":"span_id","external_name":"span_id","restriction":"Slice(UInt8)"}],"visibility":"Public","body":"@span_id = span_id"}},{"html_id":"trace_flags:TraceFlags-instance-method","name":"trace_flags","abstract":false,"location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":7,"url":null},"def":{"name":"trace_flags","return_type":"TraceFlags","visibility":"Public","body":"@trace_flags"}},{"html_id":"trace_flags=(trace_flags:TraceFlags)-instance-method","name":"trace_flags=","abstract":false,"args":[{"name":"trace_flags","external_name":"trace_flags","restriction":"TraceFlags"}],"args_string":"(trace_flags : TraceFlags)","args_html":"(trace_flags : <a href=\"../OpenTelemetry/TraceFlags.html\">TraceFlags</a>)","location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":7,"url":null},"def":{"name":"trace_flags=","args":[{"name":"trace_flags","external_name":"trace_flags","restriction":"TraceFlags"}],"visibility":"Public","body":"@trace_flags = trace_flags"}},{"html_id":"trace_id:Slice(UInt8)-instance-method","name":"trace_id","abstract":false,"location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":5,"url":null},"def":{"name":"trace_id","return_type":"Slice(UInt8)","visibility":"Public","body":"@trace_id"}},{"html_id":"trace_id=(trace_id:Slice(UInt8))-instance-method","name":"trace_id=","abstract":false,"args":[{"name":"trace_id","external_name":"trace_id","restriction":"Slice(UInt8)"}],"args_string":"(trace_id : Slice(UInt8))","args_html":"(trace_id : Slice(UInt8))","location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":5,"url":null},"def":{"name":"trace_id=","args":[{"name":"trace_id","external_name":"trace_id","restriction":"Slice(UInt8)"}],"visibility":"Public","body":"@trace_id = trace_id"}},{"html_id":"trace_state:Hash(String,String)-instance-method","name":"trace_state","doc":"TODO: We're currenty playing fast and loose with TraceState. TraceState, per the spec,\nshould be immutable, however, so this will need to be revised.","summary":"<p><span class=\"flag orange\">TODO</span>  We're currenty playing fast and loose with TraceState.</p>","abstract":false,"location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":10,"url":null},"def":{"name":"trace_state","return_type":"Hash(String, String)","visibility":"Public","body":"@trace_state"}},{"html_id":"trace_state=(trace_state:Hash(String,String))-instance-method","name":"trace_state=","doc":"TODO: We're currenty playing fast and loose with TraceState. TraceState, per the spec,\nshould be immutable, however, so this will need to be revised.","summary":"<p><span class=\"flag orange\">TODO</span>  We're currenty playing fast and loose with TraceState.</p>","abstract":false,"args":[{"name":"trace_state","external_name":"trace_state","restriction":"Hash(String, String)"}],"args_string":"(trace_state : Hash(String, String))","args_html":"(trace_state : Hash(<a href=\"../String.html\">String</a>, <a href=\"../String.html\">String</a>))","location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":10,"url":null},"def":{"name":"trace_state=","args":[{"name":"trace_state","external_name":"trace_state","restriction":"Hash(String, String)"}],"visibility":"Public","body":"@trace_state = trace_state"}},{"html_id":"valid?-instance-method","name":"valid?","doc":"Returns true is the trace id and span id are non-zero","summary":"<p>Returns true is the trace id and span id are non-zero</p>","abstract":false,"location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":40,"url":null},"def":{"name":"valid?","visibility":"Public","body":"(@trace_id != Bytes(16, 0)) && (@span_id != Bytes(8, 0))"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/SpanContext/Config","path":"OpenTelemetry/SpanContext/Config.html","kind":"class","full_name":"OpenTelemetry::SpanContext::Config","name":"Config","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/span_context.cr","line_number":78,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/SpanContext","kind":"struct","full_name":"OpenTelemetry::SpanContext","name":"SpanContext"},"constructors":[{"html_id":"new(trace_id,span_id)-class-method","name":"new","abstract":false,"args":[{"name":"trace_id","external_name":"trace_id","restriction":""},{"name":"span_id","external_name":"span_id","restriction":""}],"args_string":"(trace_id, span_id)","args_html":"(trace_id, span_id)","location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":85,"url":null},"def":{"name":"new","args":[{"name":"trace_id","external_name":"trace_id","restriction":""},{"name":"span_id","external_name":"span_id","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(trace_id, span_id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(inherited_context:SpanContext)-class-method","name":"new","abstract":false,"args":[{"name":"inherited_context","external_name":"inherited_context","restriction":"SpanContext"}],"args_string":"(inherited_context : SpanContext)","args_html":"(inherited_context : <a href=\"../../OpenTelemetry/SpanContext.html\">SpanContext</a>)","location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":89,"url":null},"def":{"name":"new","args":[{"name":"inherited_context","external_name":"inherited_context","restriction":"SpanContext"}],"visibility":"Public","body":"_ = allocate\n_.initialize(inherited_context)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"remote:Bool-instance-method","name":"remote","abstract":false,"location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":83,"url":null},"def":{"name":"remote","return_type":"Bool","visibility":"Public","body":"@remote"}},{"html_id":"remote=(remote:Bool)-instance-method","name":"remote=","abstract":false,"args":[{"name":"remote","external_name":"remote","restriction":"Bool"}],"args_string":"(remote : Bool)","args_html":"(remote : Bool)","location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":83,"url":null},"def":{"name":"remote=","args":[{"name":"remote","external_name":"remote","restriction":"Bool"}],"visibility":"Public","body":"@remote = remote"}},{"html_id":"span_id:Slice(UInt8)-instance-method","name":"span_id","abstract":false,"location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":80,"url":null},"def":{"name":"span_id","return_type":"Slice(UInt8)","visibility":"Public","body":"@span_id"}},{"html_id":"span_id=(span_id:Slice(UInt8))-instance-method","name":"span_id=","abstract":false,"args":[{"name":"span_id","external_name":"span_id","restriction":"Slice(UInt8)"}],"args_string":"(span_id : Slice(UInt8))","args_html":"(span_id : Slice(UInt8))","location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":80,"url":null},"def":{"name":"span_id=","args":[{"name":"span_id","external_name":"span_id","restriction":"Slice(UInt8)"}],"visibility":"Public","body":"@span_id = span_id"}},{"html_id":"trace_flags:TraceFlags-instance-method","name":"trace_flags","abstract":false,"location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":81,"url":null},"def":{"name":"trace_flags","return_type":"TraceFlags","visibility":"Public","body":"@trace_flags"}},{"html_id":"trace_flags=(trace_flags:TraceFlags)-instance-method","name":"trace_flags=","abstract":false,"args":[{"name":"trace_flags","external_name":"trace_flags","restriction":"TraceFlags"}],"args_string":"(trace_flags : TraceFlags)","args_html":"(trace_flags : <a href=\"../../OpenTelemetry/TraceFlags.html\">TraceFlags</a>)","location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":81,"url":null},"def":{"name":"trace_flags=","args":[{"name":"trace_flags","external_name":"trace_flags","restriction":"TraceFlags"}],"visibility":"Public","body":"@trace_flags = trace_flags"}},{"html_id":"trace_id:Slice(UInt8)-instance-method","name":"trace_id","abstract":false,"location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":79,"url":null},"def":{"name":"trace_id","return_type":"Slice(UInt8)","visibility":"Public","body":"@trace_id"}},{"html_id":"trace_id=(trace_id:Slice(UInt8))-instance-method","name":"trace_id=","abstract":false,"args":[{"name":"trace_id","external_name":"trace_id","restriction":"Slice(UInt8)"}],"args_string":"(trace_id : Slice(UInt8))","args_html":"(trace_id : Slice(UInt8))","location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":79,"url":null},"def":{"name":"trace_id=","args":[{"name":"trace_id","external_name":"trace_id","restriction":"Slice(UInt8)"}],"visibility":"Public","body":"@trace_id = trace_id"}},{"html_id":"trace_state:Hash(String,String)-instance-method","name":"trace_state","abstract":false,"location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":82,"url":null},"def":{"name":"trace_state","return_type":"Hash(String, String)","visibility":"Public","body":"@trace_state"}},{"html_id":"trace_state=(trace_state:Hash(String,String))-instance-method","name":"trace_state=","abstract":false,"args":[{"name":"trace_state","external_name":"trace_state","restriction":"Hash(String, String)"}],"args_string":"(trace_state : Hash(String, String))","args_html":"(trace_state : Hash(<a href=\"../../String.html\">String</a>, <a href=\"../../String.html\">String</a>))","location":{"filename":"src/opentelemetry-api/span_context.cr","line_number":82,"url":null},"def":{"name":"trace_state=","args":[{"name":"trace_state","external_name":"trace_state","restriction":"Hash(String, String)"}],"visibility":"Public","body":"@trace_state = trace_state"}}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/Status","path":"OpenTelemetry/Status.html","kind":"class","full_name":"OpenTelemetry::Status","name":"Status","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/status.cr","line_number":2,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"constructors":[{"html_id":"new(code=StatusCode::Unset,message=\"\")-class-method","name":"new","abstract":false,"args":[{"name":"code","default_value":"StatusCode::Unset","external_name":"code","restriction":""},{"name":"message","default_value":"\"\"","external_name":"message","restriction":""}],"args_string":"(code = StatusCode::Unset, message = \"\")","args_html":"(code = <span class=\"t\">StatusCode</span><span class=\"t\">::</span><span class=\"t\">Unset</span>, message = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/opentelemetry-api/status.cr","line_number":12,"url":null},"def":{"name":"new","args":[{"name":"code","default_value":"StatusCode::Unset","external_name":"code","restriction":""},{"name":"message","default_value":"\"\"","external_name":"message","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(code, message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"code:StatusCode-instance-method","name":"code","abstract":false,"location":{"filename":"src/opentelemetry-api/status.cr","line_number":3,"url":null},"def":{"name":"code","return_type":"StatusCode","visibility":"Public","body":"@code"}},{"html_id":"code=(code:StatusCode)-instance-method","name":"code=","abstract":false,"args":[{"name":"code","external_name":"code","restriction":"StatusCode"}],"args_string":"(code : StatusCode)","args_html":"(code : <a href=\"../OpenTelemetry/Status/StatusCode.html\">StatusCode</a>)","location":{"filename":"src/opentelemetry-api/status.cr","line_number":3,"url":null},"def":{"name":"code=","args":[{"name":"code","external_name":"code","restriction":"StatusCode"}],"visibility":"Public","body":"@code = code"}},{"html_id":"error!(message=nil)-instance-method","name":"error!","abstract":false,"args":[{"name":"message","default_value":"nil","external_name":"message","restriction":""}],"args_string":"(message = nil)","args_html":"(message = <span class=\"n\">nil</span>)","location":{"filename":"src/opentelemetry-api/status.cr","line_number":20,"url":null},"def":{"name":"error!","args":[{"name":"message","default_value":"nil","external_name":"message","restriction":""}],"visibility":"Public","body":"@code = StatusCode::Error\nif message\n  @message = message\nend\n"}},{"html_id":"message:String-instance-method","name":"message","abstract":false,"location":{"filename":"src/opentelemetry-api/status.cr","line_number":4,"url":null},"def":{"name":"message","return_type":"String","visibility":"Public","body":"@message"}},{"html_id":"message=(message:String)-instance-method","name":"message=","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : <a href=\"../String.html\">String</a>)","location":{"filename":"src/opentelemetry-api/status.cr","line_number":4,"url":null},"def":{"name":"message=","args":[{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"@message = message"}},{"html_id":"ok!(message=nil)-instance-method","name":"ok!","abstract":false,"args":[{"name":"message","default_value":"nil","external_name":"message","restriction":""}],"args_string":"(message = nil)","args_html":"(message = <span class=\"n\">nil</span>)","location":{"filename":"src/opentelemetry-api/status.cr","line_number":15,"url":null},"def":{"name":"ok!","args":[{"name":"message","default_value":"nil","external_name":"message","restriction":""}],"visibility":"Public","body":"@code = StatusCode::Ok\nif message\n  @message = message\nend\n"}},{"html_id":"pb_status_code-instance-method","name":"pb_status_code","abstract":false,"location":{"filename":"src/opentelemetry-api/status.cr","line_number":30,"url":null},"def":{"name":"pb_status_code","visibility":"Public","body":"case @code\nwhen StatusCode::Unset\n  Proto::Trace::V1::Status::StatusCode::STATUSCODEUNSET\nwhen StatusCode::Ok\n  Proto::Trace::V1::Status::StatusCode::STATUSCODEOK\nelse\n  Proto::Trace::V1::Status::StatusCode::STATUSCODEERROR\nend"}},{"html_id":"to_json-instance-method","name":"to_json","abstract":false,"location":{"filename":"src/opentelemetry-api/status.cr","line_number":48,"url":null},"def":{"name":"to_json","visibility":"Public","body":"String.build do |json|\n  json << \"{\\n\"\n  json << \"  \\\"code\\\": #{@code.value},\\n\"\n  json << \"  \\\"message\\\": \\\"#{@message}\\\"\\n\"\n  json << \"}\"\nend"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","abstract":false,"location":{"filename":"src/opentelemetry-api/status.cr","line_number":41,"url":null},"def":{"name":"to_protobuf","visibility":"Public","body":"OpenTelemetry::Proto::Trace::V1::Status.new(message: @message, code: pb_status_code)"}},{"html_id":"unset!(message=nil)-instance-method","name":"unset!","abstract":false,"args":[{"name":"message","default_value":"nil","external_name":"message","restriction":""}],"args_string":"(message = nil)","args_html":"(message = <span class=\"n\">nil</span>)","location":{"filename":"src/opentelemetry-api/status.cr","line_number":25,"url":null},"def":{"name":"unset!","args":[{"name":"message","default_value":"nil","external_name":"message","restriction":""}],"visibility":"Public","body":"@code = StatusCode::Unset\nif message\n  @message = message\nend\n"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Status/StatusCode","path":"OpenTelemetry/Status/StatusCode.html","kind":"enum","full_name":"OpenTelemetry::Status::StatusCode","name":"StatusCode","abstract":false,"ancestors":[{"html_id":"opentelemetry-api/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"opentelemetry-api/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/status.cr","line_number":6,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Unset","name":"Unset","value":"0"},{"id":"Ok","name":"Ok","value":"1"},{"id":"Error","name":"Error","value":"2"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Status","kind":"class","full_name":"OpenTelemetry::Status","name":"Status"},"instance_methods":[{"html_id":"error?-instance-method","name":"error?","abstract":false,"location":{"filename":"src/opentelemetry-api/status.cr","line_number":9,"url":null},"def":{"name":"error?","visibility":"Public","body":"self == Error"}},{"html_id":"ok?-instance-method","name":"ok?","abstract":false,"location":{"filename":"src/opentelemetry-api/status.cr","line_number":8,"url":null},"def":{"name":"ok?","visibility":"Public","body":"self == Ok"}},{"html_id":"unset?-instance-method","name":"unset?","abstract":false,"location":{"filename":"src/opentelemetry-api/status.cr","line_number":7,"url":null},"def":{"name":"unset?","visibility":"Public","body":"self == Unset"}}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/TextMapPropagator","path":"OpenTelemetry/TextMapPropagator.html","kind":"class","full_name":"OpenTelemetry::TextMapPropagator","name":"TextMapPropagator","abstract":true,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/text_map_propagator.cr","line_number":7,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"opentelemetry-api/OpenTelemetry/Propagation/TraceContext","kind":"class","full_name":"OpenTelemetry::Propagation::TraceContext","name":"TraceContext"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"doc":"An `OpenTelemetry::Propagator` encapsulates common behavior for typical\npropagators. Propagators are used to carry and transfer state, typically\nvia either a TraceContext or via Baggage. This class will be subclassed\nto provide additional specific behavior to conform with the specs for\nthe relevant type of propagator.","summary":"<p>An <code>OpenTelemetry::Propagator</code> encapsulates common behavior for typical propagators.</p>","instance_methods":[{"html_id":"extract(carrier,context:Context)-instance-method","name":"extract","abstract":true,"args":[{"name":"carrier","external_name":"carrier","restriction":""},{"name":"context","external_name":"context","restriction":"Context"}],"args_string":"(carrier, context : Context)","args_html":"(carrier, context : <a href=\"../OpenTelemetry/Context.html\">Context</a>)","location":{"filename":"src/opentelemetry-api/text_map_propagator.cr","line_number":9,"url":null},"def":{"name":"extract","args":[{"name":"carrier","external_name":"carrier","restriction":""},{"name":"context","external_name":"context","restriction":"Context"}],"visibility":"Public","body":""}},{"html_id":"fields-instance-method","name":"fields","abstract":true,"location":{"filename":"src/opentelemetry-api/text_map_propagator.cr","line_number":10,"url":null},"def":{"name":"fields","visibility":"Public","body":""}},{"html_id":"inject(carrier,context:Context)-instance-method","name":"inject","abstract":true,"args":[{"name":"carrier","external_name":"carrier","restriction":""},{"name":"context","external_name":"context","restriction":"Context"}],"args_string":"(carrier, context : Context)","args_html":"(carrier, context : <a href=\"../OpenTelemetry/Context.html\">Context</a>)","location":{"filename":"src/opentelemetry-api/text_map_propagator.cr","line_number":8,"url":null},"def":{"name":"inject","args":[{"name":"carrier","external_name":"carrier","restriction":""},{"name":"context","external_name":"context","restriction":"Context"}],"visibility":"Public","body":""}}]},{"html_id":"opentelemetry-api/OpenTelemetry/Trace","path":"OpenTelemetry/Trace.html","kind":"class","full_name":"OpenTelemetry::Trace","name":"Trace","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/Sendable","kind":"module","full_name":"OpenTelemetry::Sendable","name":"Sendable"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/trace.cr","line_number":9,"url":null},{"filename":"src/opentelemetry-api/trace/exceptions.cr","line_number":2,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MATCH","name":"MATCH","value":"/(?<trace_id>[A-Fa-f0-9]{32})/"}],"included_modules":[{"html_id":"opentelemetry-api/OpenTelemetry/Sendable","kind":"module","full_name":"OpenTelemetry::Sendable","name":"Sendable"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"class_methods":[{"html_id":"current_span-class-method","name":"current_span","abstract":false,"location":{"filename":"src/opentelemetry-api/trace.cr","line_number":38,"url":null},"def":{"name":"current_span","visibility":"Public","body":"Fiber.current.current_span"}},{"html_id":"current_trace-class-method","name":"current_trace","abstract":false,"location":{"filename":"src/opentelemetry-api/trace.cr","line_number":34,"url":null},"def":{"name":"current_trace","visibility":"Public","body":"Fiber.current.current_trace"}},{"html_id":"prng:Random::PCG32-class-method","name":"prng","abstract":false,"location":{"filename":"src/opentelemetry-api/trace.cr","line_number":30,"url":null},"def":{"name":"prng","return_type":"Random::PCG32","visibility":"Public","body":"@@prng"}},{"html_id":"validate_id(id:Slice(Uint8))-class-method","name":"validate_id","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Slice(Uint8)"}],"args_string":"(id : Slice(Uint8))","args_html":"(id : Slice(Uint8))","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":42,"url":null},"def":{"name":"validate_id","args":[{"name":"id","external_name":"id","restriction":"Slice(Uint8)"}],"visibility":"Public","body":"validate_id(id.hexstring)"}},{"html_id":"validate_id(id:String)-class-method","name":"validate_id","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":46,"url":null},"def":{"name":"validate_id","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"!(!(MATCH.match(id)))"}}],"constructors":[{"html_id":"new(service_name=nil,service_version=nil,schema_url=nil,exporter=nil,provider=nil)-class-method","name":"new","abstract":false,"args":[{"name":"service_name","default_value":"nil","external_name":"service_name","restriction":""},{"name":"service_version","default_value":"nil","external_name":"service_version","restriction":""},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":""},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":""},{"name":"provider","default_value":"nil","external_name":"provider","restriction":""}],"args_string":"(service_name = nil, service_version = nil, schema_url = nil, exporter = nil, provider = nil)","args_html":"(service_name = <span class=\"n\">nil</span>, service_version = <span class=\"n\">nil</span>, schema_url = <span class=\"n\">nil</span>, exporter = <span class=\"n\">nil</span>, provider = <span class=\"n\">nil</span>)","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":50,"url":null},"def":{"name":"new","args":[{"name":"service_name","default_value":"nil","external_name":"service_name","restriction":""},{"name":"service_version","default_value":"nil","external_name":"service_version","restriction":""},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":""},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":""},{"name":"provider","default_value":"nil","external_name":"provider","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(service_name, service_version, schema_url, exporter, provider)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](key)-instance-method","name":"[]","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":77,"url":null},"def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"resource[key].value"}},{"html_id":"[]=(key,value)-instance-method","name":"[]=","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(key, value)","args_html":"(key, value)","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":69,"url":null},"def":{"name":"[]=","args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"resource[key] = value"}},{"html_id":"close_span(span=OpenTelemetry.current_span)-instance-method","name":"close_span","doc":"Close a previosly opened span.","summary":"<p>Close a previosly opened span.</p>","abstract":false,"args":[{"name":"span","default_value":"OpenTelemetry.current_span","external_name":"span","restriction":""}],"args_string":"(span = OpenTelemetry.current_span)","args_html":"(span = <span class=\"t\">OpenTelemetry</span>.current_span)","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":200,"url":null},"def":{"name":"close_span","args":[{"name":"span","default_value":"OpenTelemetry.current_span","external_name":"span","restriction":""}],"visibility":"Public","body":"begin\n  close_span_impl(span)\nensure\n  @lock.unlock\nend"}},{"html_id":"current_span:Span?-instance-method","name":"current_span","abstract":false,"location":{"filename":"src/opentelemetry-api/trace.cr","line_number":23,"url":null},"def":{"name":"current_span","return_type":"Span | ::Nil","visibility":"Public","body":"@current_span"}},{"html_id":"current_span=(current_span:Span?)-instance-method","name":"current_span=","abstract":false,"args":[{"name":"current_span","external_name":"current_span","restriction":"Span | ::Nil"}],"args_string":"(current_span : Span?)","args_html":"(current_span : <a href=\"../OpenTelemetry/Span.html\">Span</a>?)","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":23,"url":null},"def":{"name":"current_span=","args":[{"name":"current_span","external_name":"current_span","restriction":"Span | ::Nil"}],"visibility":"Public","body":"@current_span = current_span"}},{"html_id":"exporter:Exporter?-instance-method","name":"exporter","abstract":false,"location":{"filename":"src/opentelemetry-api/trace.cr","line_number":18,"url":null},"def":{"name":"exporter","return_type":"Exporter | ::Nil","visibility":"Public","body":"@exporter"}},{"html_id":"exporter=(exporter:Exporter?)-instance-method","name":"exporter=","abstract":false,"args":[{"name":"exporter","external_name":"exporter","restriction":"Exporter | ::Nil"}],"args_string":"(exporter : Exporter?)","args_html":"(exporter : <a href=\"../OpenTelemetry/Exporter.html\">Exporter</a>?)","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":18,"url":null},"def":{"name":"exporter=","args":[{"name":"exporter","external_name":"exporter","restriction":"Exporter | ::Nil"}],"visibility":"Public","body":"@exporter = exporter"}},{"html_id":"get_attribute(key)-instance-method","name":"get_attribute","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":81,"url":null},"def":{"name":"get_attribute","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"resource[key]"}},{"html_id":"id-instance-method","name":"id","abstract":false,"location":{"filename":"src/opentelemetry-api/trace.cr","line_number":103,"url":null},"def":{"name":"id","visibility":"Public","body":"trace_id"}},{"html_id":"in_span(span_name)-instance-method","name":"in_span","doc":"Start a new span in the current trace. A matching `#close_span` call *must* be made to complete the span.","summary":"<p>Start a new span in the current trace.</p>","abstract":false,"args":[{"name":"span_name","external_name":"span_name","restriction":""}],"args_string":"(span_name)","args_html":"(span_name)","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":124,"url":null},"def":{"name":"in_span","args":[{"name":"span_name","external_name":"span_name","restriction":""}],"visibility":"Public","body":"@lock.lock\nin_span_impl(span_name)\n"}},{"html_id":"in_span(span_name,&)-instance-method","name":"in_span","doc":"Start a new span in the current trace. The block provided will be executed within the context of the new span,\nand the span will be closed automatically when the block returns.","summary":"<p>Start a new span in the current trace.</p>","abstract":false,"args":[{"name":"span_name","external_name":"span_name","restriction":""}],"args_string":"(span_name, &)","args_html":"(span_name, &)","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":132,"url":null},"def":{"name":"in_span","args":[{"name":"span_name","external_name":"span_name","restriction":""}],"yields":1,"visibility":"Public","body":"@lock.synchronize do\n  span = in_span_impl(span_name)\n  exception = nil\n  begin\n    result = yield span\n  rescue exception\n    if exception.span_status_message_set\n    else\n      span.status.error!(exception.message)\n      exception.span_status_message_set = true\n    end\n  end\n  close_span_impl(span)\n  if exception\n    raise(exception)\n  end\n  begin\n    result.as(typeof(yield span))\n  rescue ex : TypeCastError\n    result.not_nil!\n  end\nend"}},{"html_id":"merge_configuration_from_provider=(val)-instance-method","name":"merge_configuration_from_provider=","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":115,"url":null},"def":{"name":"merge_configuration_from_provider=","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"if self.service_name.nil? || self.service_name.empty?\n  self.service_name = val.service_name\nend\nif self.service_version.nil? || self.service_version.empty?\n  self.service_version = val.service_version\nend\nif self.schema_url.nil? || self.schema_url.empty?\n  self.schema_url = val.schema_url\nend\nif self.exporter.nil? || self.exporter.try(&.exporter).is_a?(Exporter::Abstract)\n  self.exporter = val.exporter\nend\n@provider = val\n"}},{"html_id":"provider:TraceProvider-instance-method","name":"provider","abstract":false,"location":{"filename":"src/opentelemetry-api/trace.cr","line_number":19,"url":null},"def":{"name":"provider","return_type":"TraceProvider","visibility":"Public","body":"@provider"}},{"html_id":"provider=(val)-instance-method","name":"provider=","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":107,"url":null},"def":{"name":"provider=","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"self.service_name = @provider.service_name\nself.service_version = @provider.service_version\nself.schema_url = @provider.schema_url\nself.exporter = @provider.exporter\n@provider = val\n"}},{"html_id":"resource:Resource-instance-method","name":"resource","abstract":false,"location":{"filename":"src/opentelemetry-api/trace.cr","line_number":22,"url":null},"def":{"name":"resource","return_type":"Resource","visibility":"Public","body":"@resource"}},{"html_id":"root_span:Span?-instance-method","name":"root_span","abstract":false,"location":{"filename":"src/opentelemetry-api/trace.cr","line_number":21,"url":null},"def":{"name":"root_span","return_type":"Span | ::Nil","visibility":"Public","body":"@root_span"}},{"html_id":"schema_url:String-instance-method","name":"schema_url","abstract":false,"location":{"filename":"src/opentelemetry-api/trace.cr","line_number":17,"url":null},"def":{"name":"schema_url","return_type":"String","visibility":"Public","body":"@schema_url"}},{"html_id":"schema_url=(schema_url:String)-instance-method","name":"schema_url=","abstract":false,"args":[{"name":"schema_url","external_name":"schema_url","restriction":"String"}],"args_string":"(schema_url : String)","args_html":"(schema_url : <a href=\"../String.html\">String</a>)","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":17,"url":null},"def":{"name":"schema_url=","args":[{"name":"schema_url","external_name":"schema_url","restriction":"String"}],"visibility":"Public","body":"@schema_url = schema_url"}},{"html_id":"service_name:String-instance-method","name":"service_name","abstract":false,"location":{"filename":"src/opentelemetry-api/trace.cr","line_number":85,"url":null},"def":{"name":"service_name","visibility":"Public","body":"@service_name"}},{"html_id":"service_name=(val)-instance-method","name":"service_name=","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":89,"url":null},"def":{"name":"service_name=","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"@service_name = val\nself[\"service.name\"] = val\n"}},{"html_id":"service_version:String-instance-method","name":"service_version","abstract":false,"location":{"filename":"src/opentelemetry-api/trace.cr","line_number":94,"url":null},"def":{"name":"service_version","visibility":"Public","body":"@service_version"}},{"html_id":"service_version=(val)-instance-method","name":"service_version=","abstract":false,"args":[{"name":"val","external_name":"val","restriction":""}],"args_string":"(val)","args_html":"(val)","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":98,"url":null},"def":{"name":"service_version=","args":[{"name":"val","external_name":"val","restriction":""}],"visibility":"Public","body":"@service_version = val\nself[\"service.version\"] = val\n"}},{"html_id":"set_attribute(key,value)-instance-method","name":"set_attribute","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(key, value)","args_html":"(key, value)","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":73,"url":null},"def":{"name":"set_attribute","args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"resource[key] = value"}},{"html_id":"span_context:SpanContext-instance-method","name":"span_context","abstract":false,"location":{"filename":"src/opentelemetry-api/trace.cr","line_number":24,"url":null},"def":{"name":"span_context","return_type":"SpanContext","visibility":"Public","body":"@span_context"}},{"html_id":"span_context=(span_context:SpanContext)-instance-method","name":"span_context=","abstract":false,"args":[{"name":"span_context","external_name":"span_context","restriction":"SpanContext"}],"args_string":"(span_context : SpanContext)","args_html":"(span_context : <a href=\"../OpenTelemetry/SpanContext.html\">SpanContext</a>)","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":24,"url":null},"def":{"name":"span_context=","args":[{"name":"span_context","external_name":"span_context","restriction":"SpanContext"}],"visibility":"Public","body":"@span_context = span_context"}},{"html_id":"span_stack:Array(Span)-instance-method","name":"span_stack","abstract":false,"location":{"filename":"src/opentelemetry-api/trace.cr","line_number":20,"url":null},"def":{"name":"span_stack","return_type":"Array(Span)","visibility":"Public","body":"@span_stack"}},{"html_id":"to_json-instance-method","name":"to_json","abstract":false,"location":{"filename":"src/opentelemetry-api/trace.cr","line_number":245,"url":null},"def":{"name":"to_json","visibility":"Public","body":"String.build do |json|\n  json << \"{\\n\"\n  json << \"  \\\"type\\\":\\\"trace\\\",\\n\"\n  json << \"  \\\"traceId\\\":\\\"#{trace_id.hexstring}\\\",\\n\"\n  if !resource.empty?\n    json << \"  \\\"resource\\\":{\\n\"\n    json << resource.attribute_list\n    json << \"  },\\n\"\n  end\n  if !schema_url.empty?\n    json << \"  \\\"schemaUrl\\\":\\\"#{schema_url}\\\",\\n\"\n  end\n  json << \"  \\\"spans\\\":[\\n\"\n  json << (String.build do |span_list|\n    iterate_span_nodes(root_span) do |span|\n      span_list << \"    \"\n      if span\n        span_list << span.to_json\n      end\n      span_list << \",\\n\"\n    end\n  end.chomp(\",\\n\"))\n  json << \"\\n  ]\\n\"\n  json << \"}\"\nend"}},{"html_id":"to_protobuf-instance-method","name":"to_protobuf","doc":"TODO: Add support for a Resource\nThis method returns a ProtoBuf object containing all of the Trace information.","summary":"<p><span class=\"flag orange\">TODO</span>  Add support for a Resource This method returns a ProtoBuf object containing all of the Trace information.</p>","abstract":false,"location":{"filename":"src/opentelemetry-api/trace.cr","line_number":231,"url":null},"def":{"name":"to_protobuf","visibility":"Public","body":"spans_buffer = (iterate_span_nodes(root_span, [] of Span)).select(&.recording?).map do |__arg2|\n  __arg2.to_protobuf.not_nil!\nend\nProto::Trace::V1::ResourceSpans.new(resource: resource.to_protobuf, scope_spans: [Proto::Trace::V1::ScopeSpans.new(scope: OpenTelemetry.instrumentation_scope, spans: spans_buffer)], schema_url: schema_url)\n"}},{"html_id":"trace_id:Slice(UInt8)-instance-method","name":"trace_id","abstract":false,"location":{"filename":"src/opentelemetry-api/trace.cr","line_number":14,"url":null},"def":{"name":"trace_id","return_type":"Slice(UInt8)","visibility":"Public","body":"@trace_id"}},{"html_id":"trace_id=(trace_id:Slice(UInt8))-instance-method","name":"trace_id=","abstract":false,"args":[{"name":"trace_id","external_name":"trace_id","restriction":"Slice(UInt8)"}],"args_string":"(trace_id : Slice(UInt8))","args_html":"(trace_id : Slice(UInt8))","location":{"filename":"src/opentelemetry-api/trace.cr","line_number":14,"url":null},"def":{"name":"trace_id=","args":[{"name":"trace_id","external_name":"trace_id","restriction":"Slice(UInt8)"}],"visibility":"Public","body":"@trace_id = trace_id"}}],"types":[{"html_id":"opentelemetry-api/OpenTelemetry/Trace/InvalidSpanInSpanStackError","path":"OpenTelemetry/Trace/InvalidSpanInSpanStackError.html","kind":"class","full_name":"OpenTelemetry::Trace::InvalidSpanInSpanStackError","name":"InvalidSpanInSpanStackError","abstract":false,"superclass":{"html_id":"opentelemetry-api/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"opentelemetry-api/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/trace/exceptions.cr","line_number":3,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry/Trace","kind":"class","full_name":"OpenTelemetry::Trace","name":"Trace"},"constructors":[{"html_id":"new(found=nil,expected=nil)-class-method","name":"new","abstract":false,"args":[{"name":"found","default_value":"nil","external_name":"found","restriction":""},{"name":"expected","default_value":"nil","external_name":"expected","restriction":""}],"args_string":"(found = nil, expected = nil)","args_html":"(found = <span class=\"n\">nil</span>, expected = <span class=\"n\">nil</span>)","location":{"filename":"src/opentelemetry-api/trace/exceptions.cr","line_number":4,"url":null},"def":{"name":"new","args":[{"name":"found","default_value":"nil","external_name":"found","restriction":""},{"name":"expected","default_value":"nil","external_name":"expected","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(found, expected)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]}]},{"html_id":"opentelemetry-api/OpenTelemetry/TraceFlags","path":"OpenTelemetry/TraceFlags.html","kind":"enum","full_name":"OpenTelemetry::TraceFlags","name":"TraceFlags","abstract":false,"ancestors":[{"html_id":"opentelemetry-api/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"opentelemetry-api/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"opentelemetry-api/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/trace_flags.cr","line_number":3,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Sampled","name":"Sampled","value":"1"}],"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"instance_methods":[{"html_id":"none?-instance-method","name":"none?","abstract":false,"location":{"filename":"src/opentelemetry-api/trace_flags.cr","line_number":3,"url":null},"def":{"name":"none?","visibility":"Public","body":"value == 0"}},{"html_id":"sampled?-instance-method","name":"sampled?","abstract":false,"location":{"filename":"src/opentelemetry-api/trace_flags.cr","line_number":4,"url":null},"def":{"name":"sampled?","visibility":"Public","body":"self.includes?(Sampled)"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/TraceProvider","path":"OpenTelemetry/TraceProvider.html","kind":"class","full_name":"OpenTelemetry::TraceProvider","name":"TraceProvider","abstract":false,"superclass":{"html_id":"opentelemetry-api/OpenTelemetry/Provider","kind":"class","full_name":"OpenTelemetry::Provider","name":"Provider"},"ancestors":[{"html_id":"opentelemetry-api/OpenTelemetry/Provider","kind":"class","full_name":"OpenTelemetry::Provider","name":"Provider"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opentelemetry-api/trace_provider.cr","line_number":6,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"},"doc":"A TraceProvider encapsulates a set of tracing configuration, and provides an interface for creating Trace instances.","summary":"<p>A TraceProvider encapsulates a set of tracing configuration, and provides an interface for creating Trace instances.</p>","instance_methods":[{"html_id":"trace(service_name=nil,service_version=nil,schema_url=nil,exporter=nil,provider=self)-instance-method","name":"trace","abstract":false,"args":[{"name":"service_name","default_value":"nil","external_name":"service_name","restriction":""},{"name":"service_version","default_value":"nil","external_name":"service_version","restriction":""},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":""},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":""},{"name":"provider","default_value":"self","external_name":"provider","restriction":""}],"args_string":"(service_name = nil, service_version = nil, schema_url = nil, exporter = nil, provider = self)","args_html":"(service_name = <span class=\"n\">nil</span>, service_version = <span class=\"n\">nil</span>, schema_url = <span class=\"n\">nil</span>, exporter = <span class=\"n\">nil</span>, provider = <span class=\"k\">self</span>)","location":{"filename":"src/opentelemetry-api/trace_provider.cr","line_number":7,"url":null},"def":{"name":"trace","args":[{"name":"service_name","default_value":"nil","external_name":"service_name","restriction":""},{"name":"service_version","default_value":"nil","external_name":"service_version","restriction":""},{"name":"schema_url","default_value":"nil","external_name":"schema_url","restriction":""},{"name":"exporter","default_value":"nil","external_name":"exporter","restriction":""},{"name":"provider","default_value":"self","external_name":"provider","restriction":""}],"visibility":"Public","body":"new_trace = Trace.new(service_name: service_name, service_version: service_version, schema_url: schema_url, exporter: exporter, provider: provider)\nnew_trace.merge_configuration_from_provider = self\nnew_trace\n"}},{"html_id":"trace(&)-instance-method","name":"trace","abstract":false,"location":{"filename":"src/opentelemetry-api/trace_provider.cr","line_number":25,"url":null},"def":{"name":"trace","yields":1,"visibility":"Public","body":"new_trace = trace\nnew_trace.provider = self\nyield new_trace\nnew_trace\n"}}]},{"html_id":"opentelemetry-api/OpenTelemetry/ValueArrays","path":"OpenTelemetry/ValueArrays.html","kind":"alias","full_name":"OpenTelemetry::ValueArrays","name":"ValueArrays","abstract":false,"locations":[{"filename":"src/opentelemetry-api/attribute.cr","line_number":5,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":true,"aliased":"(Array(Bool) | Array(Float64) | Array(Int32) | Array(Int64) | Array(String))","aliased_html":"Array(Bool) | Array(Float64) | Array(Int32) | Array(Int64) | Array(<a href=\"../String.html\">String</a>)","const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"}},{"html_id":"opentelemetry-api/OpenTelemetry/ValueType","path":"OpenTelemetry/ValueType.html","kind":"alias","full_name":"OpenTelemetry::ValueType","name":"ValueType","abstract":false,"locations":[{"filename":"src/opentelemetry-api/attribute.cr","line_number":4,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":true,"aliased":"(Bool | Float64 | Int32 | Int64 | String)","aliased_html":"Bool | Float64 | Int32 | Int64 | <a href=\"../String.html\">String</a>","const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"}},{"html_id":"opentelemetry-api/OpenTelemetry/ValueTypes","path":"OpenTelemetry/ValueTypes.html","kind":"alias","full_name":"OpenTelemetry::ValueTypes","name":"ValueTypes","abstract":false,"locations":[{"filename":"src/opentelemetry-api/attribute.cr","line_number":6,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":true,"aliased":"(Array(Bool) | Array(Float64) | Array(Int32) | Array(Int64) | Array(String) | Bool | Float64 | Int32 | Int64 | String)","aliased_html":"Array(Bool) | Array(Float64) | Array(Int32) | Array(Int64) | Array(<a href=\"../String.html\">String</a>) | Bool | Float64 | Int32 | Int64 | <a href=\"../String.html\">String</a>","const":false,"namespace":{"html_id":"opentelemetry-api/OpenTelemetry","kind":"module","full_name":"OpenTelemetry","name":"OpenTelemetry"}}]},{"html_id":"opentelemetry-api/String","path":"String.html","kind":"class","full_name":"String","name":"String","abstract":false,"superclass":{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"opentelemetry-api/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"opentelemetry-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"opentelemetry-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ext/string.cr","line_number":1,"url":null}],"repository_name":"opentelemetry-api","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"opentelemetry-api/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"doc":"A `String` represents an immutable sequence of UTF-8 characters.\n\nA `String` is typically created with a string literal, enclosing UTF-8 characters\nin double quotes:\n\n```\n\"hello world\"\n```\n\nSee [`String` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/string.html) in the language reference.\n\nA backslash can be used to denote some characters inside the string:\n\n```\n\"\\\"\" # double quote\n\"\\\\\" # backslash\n\"\\e\" # escape\n\"\\f\" # form feed\n\"\\n\" # newline\n\"\\r\" # carriage return\n\"\\t\" # tab\n\"\\v\" # vertical tab\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n\"\\u0041\" # == \"A\"\n```\n\nOr you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF):\n\n```\n\"\\u{41}\" # == \"A\"\n```\n\nA string can span multiple lines:\n\n```\n\"hello\n      world\" # same as \"hello\\n      world\"\n```\n\nNote that in the above example trailing and leading spaces, as well as newlines,\nend up in the resulting string. To avoid this, you can split a string into multiple lines\nby joining multiple literals with a backslash:\n\n```\n\"hello \" \\\n\"world, \" \\\n\"no newlines\" # same as \"hello world, no newlines\"\n```\n\nAlternatively, a backslash followed by a newline can be inserted inside the string literal:\n\n```\n\"hello \\\n     world, \\\n     no newlines\" # same as \"hello world, no newlines\"\n```\n\nIn this case, leading whitespace is not included in the resulting string.\n\nIf you need to write a string that has many double quotes, parentheses, or similar\ncharacters, you can use alternative literals:\n\n```\n# Supports double quotes and nested parentheses\n%(hello (\"world\")) # same as \"hello (\\\"world\\\")\"\n\n# Supports double quotes and nested brackets\n%[hello [\"world\"]] # same as \"hello [\\\"world\\\"]\"\n\n# Supports double quotes and nested curlies\n%{hello {\"world\"}} # same as \"hello {\\\"world\\\"}\"\n\n# Supports double quotes and nested angles\n%<hello <\"world\">> # same as \"hello <\\\"world\\\">\"\n```\n\nTo create a `String` with embedded expressions, you can use string interpolation:\n\n```\na = 1\nb = 2\n\"sum = #{a + b}\" # \"sum = 3\"\n```\n\nThis ends up invoking `Object#to_s(IO)` on each expression enclosed by `#{...}`.\n\nIf you need to dynamically build a string, use `String#build` or `IO::Memory`.\n\n### Non UTF-8 valid strings\n\nString might end up being conformed of bytes which are an invalid\nbyte sequence according to UTF-8. This can happen if the string is created\nvia one of the constructors that accept bytes, or when getting a string\nfrom `String.build` or `IO::Memory`. No exception will be raised, but\ninvalid byte sequences, when asked as chars, will use the unicode replacement\nchar (value 0xFFFD). For example:\n\n```\n# here 255 is not a valid byte value in the UTF-8 encoding\nstring = String.new(Bytes[255, 97])\nstring.valid_encoding? # => false\n\n# The first char here is the unicode replacement char\nstring.chars # => ['�', 'a']\n```\n\nOne can also create strings with specific byte value in them by\nusing octal and hexadecimal escape sequences:\n\n```\n# Octal escape sequences\n\"\\101\" # # => \"A\"\n\"\\12\"  # # => \"\\n\"\n\"\\1\"   # string with one character with code point 1\n\"\\377\" # string with one byte with value 255\n\n# Hexadecimal escape sequences\n\"\\x41\" # # => \"A\"\n\"\\xFF\" # string with one byte with value 255\n```\n\nThe reason for allowing strings that don't have a valid UTF-8 sequence\nis that the world is full of content that isn't properly encoded,\nand having a program raise an exception or stop because of this\nis not good. It's better if programs are more resilient, but\nshow a replacement character when there's an error in incoming data.","summary":"<p>A <code><a href=\"String.html\">String</a></code> represents an immutable sequence of UTF-8 characters.</p>","instance_methods":[{"html_id":"lpad(size,padding=\"\")-instance-method","name":"lpad","doc":"The `#lpad` method takes a string size, and an optional padding string, and it\nreturns a new string, of the specified size, with any empty space to the left\nfilled with repetitions of the padding string. If the size is smaller than the\nsize of the original string, it is truncated from the left to match the requested\nfinal size.","summary":"<p>The <code><a href=\"String.html#lpad%28size%2Cpadding%3D%22%22%29-instance-method\">#lpad</a></code> method takes a string size, and an optional padding string, and it returns a new string, of the specified size, with any empty space to the left filled with repetitions of the padding string.</p>","abstract":false,"args":[{"name":"size","external_name":"size","restriction":""},{"name":"padding","default_value":"\" \"","external_name":"padding","restriction":""}],"args_string":"(size, padding = \" \")","args_html":"(size, padding = <span class=\"s\">&quot; &quot;</span>)","location":{"filename":"src/ext/string.cr","line_number":7,"url":null},"def":{"name":"lpad","args":[{"name":"size","external_name":"size","restriction":""},{"name":"padding","default_value":"\" \"","external_name":"padding","restriction":""}],"visibility":"Public","body":"pad_str = padding.to_s\npad_size = size - self.size\nbase_size = pad_size > 0 ? (size - pad_size) : size\noffset = base_size == size ? self.size - base_size : 0\nString.build(capacity: size) do |str|\n  if pad_size > 0\n    str << (pad_str * ((pad_size // pad_str.size) + 1))[0..(pad_size - 1)]\n  end\n  str << self[(0 + offset)..(base_size + offset)]\nend\n"}},{"html_id":"rpad(size,padding=\"\")-instance-method","name":"rpad","doc":"The `#rpad` method takes a string size, and an optional padding string, and it\nreturns a new string, of the specified size, with any empty space to the right\nfilled with repetitions of the padding string. If the size is smaller than the\nsize of the original string, it is truncated from the right to match the requested\nfinal size.","summary":"<p>The <code><a href=\"String.html#rpad%28size%2Cpadding%3D%22%22%29-instance-method\">#rpad</a></code> method takes a string size, and an optional padding string, and it returns a new string, of the specified size, with any empty space to the right filled with repetitions of the padding string.</p>","abstract":false,"args":[{"name":"size","external_name":"size","restriction":""},{"name":"padding","default_value":"\" \"","external_name":"padding","restriction":""}],"args_string":"(size, padding = \" \")","args_html":"(size, padding = <span class=\"s\">&quot; &quot;</span>)","location":{"filename":"src/ext/string.cr","line_number":24,"url":null},"def":{"name":"rpad","args":[{"name":"size","external_name":"size","restriction":""},{"name":"padding","default_value":"\" \"","external_name":"padding","restriction":""}],"visibility":"Public","body":"pad_str = padding.to_s\npad_size = size - self.size\nbase_size = pad_size > 0 ? (size - pad_size) : size\nString.build(capacity: size) do |str|\n  str << self[0..(base_size - 1)]\n  if pad_size > 0\n    str << (pad_str * ((pad_size // pad_str.size) + 1))[0..(pad_size - 1)]\n  end\nend\n"}}]}]}})